# =============================================================================
# RAG Modulo Environment Configuration for Jules/Remote Development
# =============================================================================
# This configuration is designed for cloud IDEs like Jules where infrastructure
# services (Postgres, Milvus, MinIO) run remotely and the application connects
# to them over the network.
#
# Setup Instructions:
# 1. Deploy infrastructure services (see docs/deployment/jules-setup.md)
# 2. Copy this file: cp env.jules.example .env
# 3. Replace ALL placeholder values with your actual remote service URLs
# 4. Run: make local-dev-setup  (installs dependencies only)
# 5. Start: make local-dev-backend (terminal 1) + make local-dev-frontend (terminal 2)

# =============================================================================
# REMOTE INFRASTRUCTURE SERVICES (REQUIRED)
# =============================================================================

# PostgreSQL Database (Remote/Managed)
# Options: Supabase, ElephantSQL, AWS RDS, Google Cloud SQL, Azure Database
COLLECTIONDB_NAME=rag_modulo
COLLECTIONDB_USER=rag_user
COLLECTIONDB_PASS=YOUR_POSTGRES_PASSWORD
POSTGRES_HOST=your-postgres-host.example.com
POSTGRES_PORT=5432

# Milvus Vector Database (Remote/Managed)
# Options: Zilliz Cloud (managed Milvus), self-hosted on cloud VM
MILVUS_HOST=your-milvus-host.example.com
MILVUS_PORT=19530
MILVUS_USER=YOUR_MILVUS_USER
MILVUS_PASSWORD=YOUR_MILVUS_PASSWORD
MILVUS_INDEX_PARAMS=
MILVUS_SEARCH_PARAMS=

# MinIO Object Storage (Remote/Managed)
# Options: MinIO on cloud VM, AWS S3, Cloudflare R2, Backblaze B2
MINIO_ENDPOINT=your-minio-host.example.com:9000
MINIO_ROOT_USER=YOUR_MINIO_ACCESS_KEY
MINIO_ROOT_PASSWORD=YOUR_MINIO_SECRET_KEY
MINIO_SECURE=true  # Use HTTPS for remote connections

# MLflow Tracking (Optional - can be disabled)
MLFLOW_TRACKING_URI=http://your-mlflow-host.example.com:5001
MLFLOW_TRACKING_USERNAME=mlflow
MLFLOW_TRACKING_PASSWORD=YOUR_MLFLOW_PASSWORD
MLFLOW_PORT=5001

# =============================================================================
# IBM WATSONX CREDENTIALS (REQUIRED FOR AI FEATURES)
# =============================================================================

IBM_CLIENT_ID=your-ibm-client-id
IBM_CLIENT_SECRET=your-ibm-client-secret
WATSONX_APIKEY=your-watsonx-apikey
WATSONX_URL=https://us-south.ml.cloud.ibm.com
WATSONX_INSTANCE_ID=your-watsonx-instance-id

# =============================================================================
# AUTHENTICATION & SECURITY
# =============================================================================

# JWT Configuration
JWT_SECRET_KEY=jules-dev-secret-key-change-in-production

# OIDC Configuration (for production, can skip in dev)
OIDC_DISCOVERY_ENDPOINT=http://localhost:8080/.well-known/openid_configuration
OIDC_AUTH_URL=http://localhost:8080/auth
OIDC_TOKEN_URL=http://localhost:8080/token
OIDC_USERINFO_ENDPOINT=http://localhost:8080/userinfo
OIDC_INTROSPECTION_ENDPOINT=http://localhost:8080/introspect
FRONTEND_URL=http://localhost:3000

# Development Mode (enables easier testing)
TESTING=true
SKIP_AUTH=true
DEVELOPMENT_MODE=true
MOCK_TOKEN=jules-dev-0000-0000-0000

# =============================================================================
# EMBEDDING & MODEL CONFIGURATION
# =============================================================================

# Embeddings
EMBEDDING_MODEL=sentence-transformers/all-minilm-l6-v2
EMBEDDING_DIM=384
EMBEDDING_FIELD=embedding
UPSERT_BATCH_SIZE=100

# WatsonX SDK Embedding Configuration (Rate Limiting & Batching)
EMBEDDING_BATCH_SIZE=5
EMBEDDING_CONCURRENCY_LIMIT=1
EMBEDDING_MAX_RETRIES=10
EMBEDDING_DELAY_TIME=1.0
EMBEDDING_REQUEST_DELAY=0.5

# WatsonX SDK LLM Configuration (Rate Limiting & Retry)
LLM_MAX_RETRIES=10
LLM_DELAY_TIME=0.5

# Chunking Strategy
CHUNKING_STRATEGY=fixed
MIN_CHUNK_SIZE=100
MAX_CHUNK_SIZE=1000
CHUNK_OVERLAP=100
SEMANTIC_THRESHOLD=0.5

# Chain of Thought (CoT) Configuration
COT_MAX_REASONING_DEPTH=3
COT_REASONING_STRATEGY=decomposition
COT_TOKEN_BUDGET_MULTIPLIER=2.0

# Models
TOKENIZER=meta-llama/llama-3-8b
MODEL=google/flan-t5-xl

# =============================================================================
# FRONTEND CONFIGURATION
# =============================================================================

# Frontend API URL (Jules will expose this)
REACT_APP_API_URL=http://localhost:8000

# =============================================================================
# ALTERNATIVE VECTOR DATABASES (OPTIONAL)
# =============================================================================

# ChromaDB (if using instead of Milvus)
# CHROMADB_HOST=your-chromadb-host.example.com
# CHROMADB_PORT=8000

# Elasticsearch (if using instead of Milvus)
# ELASTIC_HOST=your-elasticsearch-host.example.com
# ELASTIC_PORT=9200
# ELASTIC_PASSWORD=your-elastic-password
# ELASTIC_CLOUD_ID=your-cloud-id
# ELASTIC_API_KEY=your-api-key

# Pinecone (fully managed - recommended for Jules!)
# PINECONE_API_KEY=your-pinecone-api-key
# PINECONE_CLOUD=aws
# PINECONE_REGION=us-east-1

# Weaviate Cloud (fully managed)
# WEAVIATE_HOST=your-cluster.weaviate.network
# WEAVIATE_PORT=443
# WEAVIATE_GRPC_PORT=50051
# WEAVIATE_USERNAME=username
# WEAVIATE_PASSWORD=password
# WEAVIATE_INDEX=test_weaviate_index
# WEAVIATE_SCOPES=None

# =============================================================================
# PROJECT CONFIGURATION
# =============================================================================

PROJECT_NAME=rag_modulo
PYTHON_VERSION=3.12

# Data directory (local to Jules)
DATA_DIR=/app/data

# =============================================================================
# PODCAST GENERATION SETTINGS
# =============================================================================

PODCAST_ENVIRONMENT=development
PODCAST_TASK_BACKEND=fastapi
PODCAST_STORAGE_BACKEND=local
PODCAST_LOCAL_STORAGE_PATH=/app/data/podcasts

# OpenAI TTS Configuration (for podcast audio)
OPENAI_API_KEY=your-openai-api-key
OPENAI_TTS_MODEL=tts-1-hd
OPENAI_TTS_DEFAULT_VOICE=alloy

# Podcast Validation & Limits
PODCAST_MIN_DOCUMENTS=5
PODCAST_MAX_CONCURRENT_PER_USER=3
PODCAST_URL_EXPIRY_DAYS=7

# Content Retrieval Settings
PODCAST_RETRIEVAL_TOP_K_SHORT=30
PODCAST_RETRIEVAL_TOP_K_MEDIUM=50
PODCAST_RETRIEVAL_TOP_K_LONG=75
PODCAST_RETRIEVAL_TOP_K_EXTENDED=100

# =============================================================================
# RECOMMENDED MANAGED SERVICE PROVIDERS
# =============================================================================
#
# 1. PostgreSQL:
#    - Supabase (https://supabase.com) - Free tier available
#    - ElephantSQL (https://www.elephantsql.com) - Free tier available
#    - Neon (https://neon.tech) - Serverless Postgres, free tier
#
# 2. Milvus:
#    - Zilliz Cloud (https://zilliz.com) - Managed Milvus, free tier
#    - Self-hosted on DigitalOcean/AWS/GCP VM
#
# 3. MinIO/Object Storage:
#    - Cloudflare R2 (https://cloudflare.com/r2) - S3-compatible, pay as you go
#    - Backblaze B2 (https://www.backblaze.com/b2) - Low-cost S3-compatible
#    - AWS S3 (https://aws.amazon.com/s3) - Industry standard
#
# 4. Alternative Vector DBs (easier for Jules):
#    - Pinecone (https://pinecone.io) - Fully managed, free tier, no infra needed
#    - Weaviate Cloud (https://weaviate.io) - Fully managed, free tier
#
# =============================================================================
