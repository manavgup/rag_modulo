[project]
name = "rag-modulo-backend"
version = "1.0.0"
description = "A modular, agentic RAG which allows selection of embeddings, vector dbs, chunking strategy, etc."
authors = [
    {name = "Manav Gupta", email = "manavgup@ca.ibm.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.12,<3.13"
dependencies = [
    "fastapi>=0.109.2",
    "uvicorn>=0.18.3",
    "pydantic[email]>=2.8.2",
    "pydantic-settings>=2.3.4",
    "python-dotenv>=1.0.1",
    "pinecone>=4.0.0",
    "pymilvus>=2.4.4",
    "scikit-learn>=1.5.1",
    "weaviate-client>=4.6.0",
    "SQLAlchemy>=2.0.31",
    "psycopg2-binary>=2.9.9",
    "python-multipart",
    "pandas>=2.1.4",
    "elasticsearch>=8.14.0",
    "PyMuPDF>=1.24.8",
    "chromadb>=0.5.16",
    "aiofiles",
    "python-docx",
    "openpyxl>=3.1.2",
    "starlette>=0.36.3",
    "setuptools>=75.1.0",
    "tenacity>=8.5.0",
    "pyjwt",
    "passlib",
    "anthropic",
    "openai",
    "authlib",
    "httpx",
    "itsdangerous>=2.1.2",
    "ibm-watsonx-ai>=1.1.22",
    "json-repair>=0.30.3",
    "flatdict>=4.0.1",
    "validators>=0.34.0",
    "psutil (>=7.0.0,<8.0.0)",
    "docling (>=2.0.0)",
    "transformers (>=4.46.0)",
    "pydub (>=0.25.1,<0.26.0)",
    "uuid-extension (>=0.2.0,<0.3.0)",
]

[tool.poetry]
package-mode = false

[project.scripts]
rag-cli = "rag_solution.cli.main:main"
rag-search = "rag_solution.cli.search_cli:main"
rag-admin = "rag_solution.cli.admin_cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^8.3.3"
pytest-cov = "^4.1.0"
pytest-html = "^4.1.1"
pytest-env = "^1.2.0"
pytest-timeout = "^2.2.0"
pytest-xdist = "^3.5.0"
pytest-mock = "^3.15.1"
pytest-asyncio = "^1.2.0"
minio = "^7.2.18"
matplotlib = "^3.10.7"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
deptry = "^0.23.1"
ruff = "^0.14.2"
black = "*"
mypy = "^1.15.0"
pydocstyle = "^6.3.0"
pytest-env = "^1.2.0"
pytest-xdist = "^3.5.0"
pytest-cov = "^4.1.0"
pytest-html = "^4.1.1"
pytest-timeout = "^2.2.0"
bandit = "^1.7.5"
safety = "^3.6.2"
types-aiofiles = "^25.1.0.20251011"
types-requests = "^2.31.0"
types-PyYAML = "^6.0.12"
pytest-asyncio = "^1.2.0"
pylint = "^3.3.8"
autoflake = "^2.3.1"

[tool.deptry.package_module_name_map]
ibm-generative-ai = "genai"

[tool.deptry.per_rule_ignores]
DEP002 = ["psycopg2", "itsdangerous"]

[tool.interrogate]
fail-under = 50
exclude = [
    "tests/",
    ".*/tests/",
    ".*/test_.*",
    ".*/.*_test.py",
    ".*/conftest.py",
    ".*/__pycache__",
    ".*/\\.mypy_cache",
    ".*/\\.pytest_cache",
    ".*/migrations/",
    ".*/alembic/",
    ".*/scripts/",
    ".*/manage.py",
    ".*/wsgi.py",
    ".*/asgi.py",
]
ignore-init-module = true
ignore-init-method = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-magic-methods = true
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = false
ignore-nested-modules = false
ignore-regex = [
    "^_",
    "^test_",
    "^Test",
    "^mock_",
    "^Mock",
    "^fake_",
    "^Fake",
    "^dummy_",
    "^Dummy",
]
output-format = "text"
verbose = true

[tool.pydocstyle]
ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107", "D200", "D201", "D202", "D203", "D204", "D205", "D206", "D207", "D208", "D209", "D210", "D211", "D212", "D213", "D214", "D215", "D300", "D301", "D400", "D401", "D402", "D403", "D404", "D405", "D406", "D407", "D408", "D409", "D410", "D411", "D412", "D413", "D414", "D415", "D416", "D417", "D418", "D419", "D420", "D421", "D422", "D423", "D424", "D425", "D426", "D427", "D428", "D429", "D430", "D431", "D432", "D433", "D434", "D435", "D436", "D437", "D438", "D439", "D440", "D441", "D442", "D443", "D444", "D445", "D446", "D447", "D448", "D449", "D450", "D451", "D452", "D453", "D454", "D455", "D456", "D457", "D458", "D459", "D460", "D461", "D462", "D463", "D464", "D465", "D466", "D467", "D468", "D469", "D470", "D471", "D472", "D473", "D474", "D475", "D476", "D477", "D478", "D479", "D480", "D481", "D482", "D483", "D484", "D485", "D486", "D487", "D488", "D489", "D490", "D491", "D492", "D493", "D494", "D495", "D496", "D497", "D498", "D499", "D500", "D501", "D502", "D503", "D504", "D505", "D506", "D507", "D508", "D509", "D510", "D511", "D512", "D513", "D514", "D515", "D516", "D517", "D518", "D519", "D520", "D521", "D522", "D523", "D524", "D525", "D526", "D527", "D528", "D529", "D530", "D531", "D532", "D533", "D534", "D535", "D536", "D537", "D538", "D539", "D540", "D541", "D542", "D543", "D544", "D545", "D546", "D547", "D548", "D549", "D550", "D551", "D552", "D553", "D554", "D555", "D556", "D557", "D558", "D559", "D560", "D561", "D562", "D563", "D564", "D565", "D566", "D567", "D568", "D569", "D570", "D571", "D572", "D573", "D574", "D575", "D576", "D577", "D578", "D579", "D580", "D581", "D582", "D583", "D584", "D585", "D586", "D587", "D588", "D589", "D590", "D591", "D592", "D593", "D594", "D595", "D596", "D597", "D598", "D599", "D600", "D601", "D602", "D603", "D604", "D605", "D606", "D607", "D608", "D609", "D610", "D611", "D612", "D613", "D614", "D615", "D616", "D617", "D618", "D619", "D620", "D621", "D622", "D623", "D624", "D625", "D626", "D627", "D628", "D629", "D630", "D631", "D632", "D633", "D634", "D635", "D636", "D637", "D638", "D639", "D640", "D641", "D642", "D643", "D644", "D645", "D646", "D647", "D648", "D649", "D650", "D651", "D652", "D653", "D654", "D655", "D656", "D657", "D658", "D659", "D660", "D661", "D662", "D663", "D664", "D665", "D666", "D667", "D668", "D669", "D670", "D671", "D672", "D673", "D674", "D675", "D676", "D677", "D678", "D679", "D680", "D681", "D682", "D683", "D684", "D685", "D686", "D687", "D688", "D689", "D690", "D691", "D692", "D693", "D694", "D695", "D696", "D697", "D698", "D699", "D700", "D701", "D702", "D703", "D704", "D705", "D706", "D707", "D708", "D709", "D710", "D711", "D712", "D713", "D714", "D715", "D716", "D717", "D718", "D719", "D720", "D721", "D722", "D723", "D724", "D725", "D726", "D727", "D728", "D729", "D730", "D731", "D732", "D733", "D734", "D735", "D736", "D737", "D738", "D739", "D740", "D741", "D742", "D743", "D744", "D745", "D746", "D747", "D748", "D749", "D750", "D751", "D752", "D753", "D754", "D755", "D756", "D757", "D758", "D759", "D760", "D761", "D762", "D763", "D764", "D765", "D766", "D767", "D768", "D769", "D770", "D771", "D772", "D773", "D774", "D775", "D776", "D777", "D778", "D779", "D780", "D781", "D782", "D783", "D784", "D785", "D786", "D787", "D788", "D789", "D790", "D791", "D792", "D793", "D794", "D795", "D796", "D797", "D798", "D799", "D800", "D801", "D802", "D803", "D804", "D805", "D806", "D807", "D808", "D809", "D810", "D811", "D812", "D813", "D814", "D815", "D816", "D817", "D818", "D819", "D820", "D821", "D822", "D823", "D824", "D825", "D826", "D827", "D828", "D829", "D830", "D831", "D832", "D833", "D834", "D835", "D836", "D837", "D838", "D839", "D840", "D841", "D842", "D843", "D844", "D845", "D846", "D847", "D848", "D849", "D850", "D851", "D852", "D853", "D854", "D855", "D856", "D857", "D858", "D859", "D860", "D861", "D862", "D863", "D864", "D865", "D866", "D867", "D868", "D869", "D870", "D871", "D872", "D873", "D874", "D875", "D876", "D877", "D878", "D879", "D880", "D881", "D882", "D883", "D884", "D885", "D886", "D887", "D888", "D889", "D890", "D891", "D892", "D893", "D894", "D895", "D896", "D897", "D898", "D899", "D900", "D901", "D902", "D903", "D904", "D905", "D906", "D907", "D908", "D909", "D910", "D911", "D912", "D913", "D914", "D915", "D916", "D917", "D918", "D919", "D920", "D921", "D922", "D923", "D924", "D925", "D926", "D927", "D928", "D929", "D930", "D931", "D932", "D933", "D934", "D935", "D936", "D937", "D938", "D939", "D940", "D941", "D942", "D943", "D944", "D945", "D946", "D947", "D948", "D949", "D950", "D951", "D952", "D953", "D954", "D955", "D956", "D957", "D958", "D959", "D960", "D961", "D962", "D963", "D964", "D965", "D966", "D967", "D968", "D969", "D970", "D971", "D972", "D973", "D974", "D975", "D976", "D977", "D978", "D979", "D980", "D981", "D982", "D983", "D984", "D985", "D986", "D987", "D988", "D989", "D990", "D991", "D992", "D993", "D994", "D995", "D996", "D997", "D998", "D999"]
add-convention = "google"
exclude = [
    "tests/",
    ".*/tests/",
    ".*/test_.*",
    ".*/.*_test.py",
    ".*/conftest.py",
    ".*/__pycache__",
    ".*/\\.mypy_cache",
    ".*/\\.pytest_cache",
    ".*/migrations/",
    ".*/alembic/",
    ".*/scripts/",
    ".*/manage.py",
    ".*/wsgi.py",
    ".*/asgi.py",
]
match = "(?!test_).*\\.py$"
match-dir = "(?!tests).*"

# pytest configuration is handled by pytest.ini
# Minimal async configuration for integration tests
[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.ruff]
# Ruff configuration - consolidated from .ruff.toml
target-version = "py312"
line-length = 120

# Exclude certain directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
# Enable comprehensive rule set
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "W",   # pycodestyle warnings
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "Q",   # flake8-quotes
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PIE", # flake8-pie
    "TID", # flake8-tidy-imports
    "RUF", # Ruff-specific rules
]

# Disable problematic rules
ignore = [
    "E501",   # Line too long (handled by formatter)
    "E203",   # Whitespace before ':' (conflicts with Black)
    "UP037",  # Remove quotes from type annotation (conflicts with forward refs)
    "F821",   # Undefined name (conflicts with forward refs)
    "B008",   # Do not perform function call in argument defaults (FastAPI Depends pattern)
    "ARG001", # Unused function argument (common in FastAPI/pytest)
    "TCH001", # Move third-party import into type-checking block (breaks SQLAlchemy)
    "TCH002", # Move standard library import into type-checking block (breaks SQLAlchemy)
    "TCH003", # Move standard library import into type-checking block (breaks SQLAlchemy)
]

# Allow fix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Import sorting configuration
[tool.ruff.lint.isort]
known-first-party = ["main", "rag_solution", "core", "auth", "vectordbs"]

# Formatting configuration
[tool.ruff.format]
# Like Black, use double quotes for strings
quote-style = "double"

# Like Black, indent with spaces, rather than tabs
indent-style = "space"

# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
# Allow forward references in model files
"rag_solution/models/*.py" = ["F821", "UP037"]
# Allow unused arguments in test files (pytest fixtures often require unused params)
# Allow nested with statements and blind exception assertions (common test patterns)
"tests/*.py" = ["ARG001", "ARG002", "SIM117", "B017"]
"**/tests/**/*.py" = ["ARG001", "ARG002", "SIM117", "B017"]
# Allow unused arguments in router files (FastAPI dependency injection requires unused params)
"**/rag_solution/router/*.py" = ["ARG001"]
