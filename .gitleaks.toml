# .gitleaks.toml

[allowlist]
description = "Allowlist for paths and commits that are known to be safe."
paths = [
    '''gitleaks.toml''',
    '''(.*?)(go.sum|go.mod|vendor)''',
    '''(.*?)(package.json|package-lock.json|npm-shrinkwrap.json)''',
    '''(.*?)(Pipfile|Pipfile.lock|poetry.lock)''',
    '''(.*?)(Gemfile.lock|gems.locked)''',
    '''(.*?)(Cargo.lock)''',
    '''(.*?)(yarn.lock)''',
    '''(.*?)(composer.lock)''',
    '''(.*?)(.snap)''',
    '''(.*?)(\.md|\.txt)''',  # Documentation files
    '''env\.example''',  # Example env files
    '''(.*?)test_.*\.py''',  # Test files with fixtures
    '''(.*?)tests/fixtures/.*''',  # Test fixtures
    '''deployment/scripts/.*''',  # Deployment scripts with env var templates
    '''\.env\..*''',  # Environment template files
]

# Stopwords to avoid false positives
stopwords = [
    "example",
    "sample",
    "test",
    "mock",
    "dummy",
    "placeholder",
]

[[rules]]
    id = "aws-access-token"
    description = "AWS Access Token"
    regex = '''(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}'''
    tags = ["key", "AWS"]

[[rules]]
    id = "github-pat"
    description = "GitHub Personal Access Token"
    regex = '''ghp_[0-9a-zA-Z]{36}'''
    tags = ["key", "GitHub"]

[[rules]]
    id = "github-fine-grained-pat"
    description = "GitHub Fine-Grained Personal Access Token"
    regex = '''github_pat_[0-9a-zA-Z]{22}_[0-9a-zA-Z]{59}'''
    tags = ["key", "GitHub"]

[[rules]]
    id = "github-app-token"
    description = "GitHub App Token"
    regex = '''(ghu|ghs)_[0-9a-zA-Z]{36}'''
    tags = ["key", "GitHub"]

[[rules]]
    id = "github-refresh-token"
    description = "GitHub Refresh Token"
    regex = '''ghr_[0-9a-zA-Z]{76}'''
    tags = ["key", "GitHub"]

[[rules]]
    id = "slack-token"
    description = "Slack Token"
    regex = '''xox[baprs]-([0-9a-zA-Z-]{10,48})?'''
    tags = ["key", "Slack"]

[[rules]]
    id = "stripe-sk"
    description = "Stripe Secret Key"
    regex = '''sk_live_[0-9a-zA-Z]{24}'''
    tags = ["key", "Stripe"]

[[rules]]
    id = "stripe-rk"
    description = "Stripe Restricted Key"
    regex = '''rk_live_[0-9a-zA-Z]{24}'''
    tags = ["key", "Stripe"]

[[rules]]
    id = "private-key"
    description = "Private Key"
    regex = '''-----BEGIN ((EC|PGP|OPENSSH|RSA|DSA) )?PRIVATE KEY( BLOCK)?-----'''
    tags = ["key", "Asymmetric"]

[[rules]]
    id = "watsonx-api-key"
    description = "WatsonX API Key"
    regex = '''(?i)(WATSONX_APIKEY|WATSONX_API_KEY)\s*[=:]\s*['"]?([a-zA-Z0-9_-]{32,})['"]?'''
    tags = ["key", "WatsonX"]

[[rules]]
    id = "anthropic-api-key"
    description = "Anthropic API Key"
    regex = '''(?i)ANTHROPIC_API_KEY\s*[=:]\s*['"]?(sk-ant-[a-zA-Z0-9_-]{32,})['"]?'''
    tags = ["key", "Anthropic"]

[[rules]]
    id = "mlflow-credentials"
    description = "MLFlow Credentials"
    regex = '''(?i)MLFLOW_TRACKING_(USERNAME|PASSWORD)\s*[=:]\s*['"]?([^'"\s]{3,})['"]?'''
    tags = ["credentials", "MLFlow"]

[[rules]]
    id = "minio-credentials"
    description = "MinIO Credentials"
    regex = '''(?i)MINIO_ROOT_(USER|PASSWORD)\s*[=:]\s*['"]?([^'"\s]{3,})['"]?'''
    tags = ["credentials", "MinIO"]

[[rules]]
    id = "postgres-password"
    description = "PostgreSQL Password"
    regex = '''(?i)(POSTGRES_PASSWORD|COLLECTIONDB_PASSWORD)\s*[=:]\s*['"]?([^'"\s]{3,})['"]?'''
    tags = ["password", "PostgreSQL"]

[[rules]]
    id = "jwt-secret-key"
    description = "JWT Secret Key"
    regex = '''(?i)JWT_SECRET_KEY\s*[=:]\s*['"]?([a-zA-Z0-9_-]{32,})['"]?'''
    tags = ["secret", "JWT"]

[[rules]]
    id = "high-entropy-strings"
    description = "High Entropy String (possible secret)"
    regex = '''[a-zA-Z0-9+/=]{32,}'''
    entropy = 4.5
    tags = ["entropy"]
