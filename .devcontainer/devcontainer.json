{
  "name": "RAG Modulo Development",
  "image": "mcr.microsoft.com/devcontainers/python:1-3.12-bullseye",
  "workspaceFolder": "/workspaces/${localWorkspaceFolderBasename}",
  "customizations": {
    "vscode": {
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "charliermarsh.ruff",
        "ms-azuretools.vscode-docker",
        "ms-vscode.vscode-json",
        "redhat.vscode-yaml",
        "ms-vscode.makefile-tools",
        "github.copilot",
        "github.copilot-chat",
        "ms-python.debugpy",
        "ms-python.flake8",
        "ms-python.mypy-type-checker",
        "ms-python.pylint",
        "ms-toolsai.jupyter",
        "ms-toolsai.vscode-jupyter-cell-tags",
        "ms-toolsai.vscode-jupyter-slideshow"
      ],
      "settings": {
        "python.defaultInterpreterPath": "/usr/local/bin/python",
        "python.linting.enabled": true,
        "python.linting.ruffEnabled": true,
        "python.formatting.provider": "none",
        "python.formatting.ruffEnabled": true,
        "python.analysis.typeCheckingMode": "basic",
        "python.analysis.autoImportCompletions": true,
        "python.analysis.autoSearchPaths": true,
        "python.analysis.extraPaths": [
          "/workspace/backend",
          "/app",
          "/app/rag_solution",
          "/app/vectordbs"
        ],
        "files.exclude": {
          "**/__pycache__": true,
          "**/*.pyc": true,
          "**/.pytest_cache": true,
          "**/.mypy_cache": true
        },
        "files.watcherExclude": {
          "**/__pycache__/**": true,
          "**/.pytest_cache/**": true,
          "**/.mypy_cache/**": true,
          "**/node_modules/**": true
        },
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
          "source.organizeImports": "explicit",
          "source.fixAll.ruff": "explicit"
        },
        "terminal.integrated.defaultProfile.linux": "bash",
        "makefile.launchConfigurations": [
          {
            "cwd": "/workspace",
            "binaryPath": "make",
            "binaryArgs": ["dev-status"]
          }
        ]
      }
    }
  },
  "features": {
    "ghcr.io/devcontainers/features/git:1": {},
    "ghcr.io/devcontainers/features/github-cli:1": {},
    "ghcr.io/devcontainers/features/docker-in-docker:2": {
      "version": "latest",
      "dockerDashComposeVersion": "v2"
    },
    "ghcr.io/devcontainers/features/node:1": {
      "version": "lts"
    },
    "ghcr.io/devcontainers/features/python:1": {
      "version": "3.12"
    },
    "ghcr.io/devcontainers/features/common-utils:2": {
      "installZsh": true,
      "installOhMyZsh": true,
      "upgradePackages": true
    }
  },
  "forwardPorts": [8000, 3000, 5001, 5432, 19530],
  "portsAttributes": {
    "8000": {
      "label": "Backend API",
      "onAutoForward": "notify"
    },
    "3000": {
      "label": "Frontend",
      "onAutoForward": "notify"
    },
    "5001": {
      "label": "MLflow",
      "onAutoForward": "silent"
    },
    "5432": {
      "label": "PostgreSQL",
      "onAutoForward": "silent"
    },
    "19530": {
      "label": "Milvus",
      "onAutoForward": "silent"
    }
  },
  "remoteEnv": {
    "PYTHONPATH": "/workspaces/${localWorkspaceFolderBasename}/backend:/workspaces/${localWorkspaceFolderBasename}/backend/rag_solution:/workspaces/${localWorkspaceFolderBasename}/backend/vectordbs",
    "DEVELOPMENT_MODE": "true",
    "TESTING": "true",
    "SKIP_AUTH": "true",
    "WATSONX_APIKEY": "${localEnv:WATSONX_APIKEY}",
    "WATSONX_INSTANCE_ID": "${localEnv:WATSONX_INSTANCE_ID}",
    "IBM_CLIENT_ID": "${localEnv:IBM_CLIENT_ID}",
    "IBM_CLIENT_SECRET": "${localEnv:IBM_CLIENT_SECRET}"
  },
  "onCreateCommand": "bash -c 'cp .env.example .env && echo \"âœ… Environment file created from .env.example\"'",
  "postCreateCommand": "bash -c 'curl -sSL https://install.python-poetry.org | python3 - && export PATH=\"$HOME/.local/bin:$PATH\" && cd backend && poetry config virtualenvs.in-project true && poetry install --with dev,test && cd ../frontend && npm install && echo \"âœ… Dependencies installed (Poetry + npm)\"'",
  "postStartCommand": "bash -c 'docker compose -f docker-compose-infra.yml up -d && echo \"âœ… Infrastructure containers started (Postgres, Milvus, MinIO, MLFlow)\"'",
  "postAttachCommand": "bash -c 'echo \"\" && echo \"ðŸš€ RAG Modulo Codespace Ready!\" && echo \"\" && echo \"Quick Start:\" && echo \"  Terminal 1: make local-dev-backend\" && echo \"  Terminal 2: make local-dev-frontend\" && echo \"\" && echo \"Or run: make local-dev-all (starts everything in background)\" && echo \"\"'"
}
