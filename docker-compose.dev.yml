include:
  - path:
      - docker-compose-infra.yml

name: ${PROJECT_NAME:-rag-modulo}-dev

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
      tags:
        - rag-modulo/backend:dev
        - rag-modulo/backend:latest
    ports:
      - "8000:8000"
    networks:
      - app-network
    restart: unless-stopped
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
      milvus-standalone:
        condition: service_healthy
      mlflow-server:
       condition: service_started
    environment:
      # Development-specific environment variables
      - TESTING=true
      - SKIP_AUTH=true
      - DEVELOPMENT_MODE=true
      - COLLECTIONDB_HOST=postgres
      - WEB_CONCURRENCY=4

      # Database settings with fallbacks
      - COLLECTIONDB_NAME=${COLLECTIONDB_NAME:-rag_modulo}
      - COLLECTIONDB_USER=${COLLECTIONDB_USER:-rag_user}
      - COLLECTIONDB_PASS=${COLLECTIONDB_PASS:-rag_password}

      # MinIO settings with fallbacks
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}

      # MLflow settings with fallbacks
      - MLFLOW_TRACKING_USERNAME=${MLFLOW_TRACKING_USERNAME:-mlflow}
      - MLFLOW_TRACKING_PASSWORD=${MLFLOW_TRACKING_PASSWORD:-mlflow123}
      - RUNTIME_EVAL=${RUNTIME_EVAL:-false}

      # JWT with development default
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-secret-key-change-in-production-f8a7b2c1}

      # OIDC settings with fallbacks
      - OIDC_DISCOVERY_ENDPOINT=${OIDC_DISCOVERY_ENDPOINT:-http://localhost:8080/.well-known/openid_configuration}
      - OIDC_AUTH_URL=${OIDC_AUTH_URL:-http://localhost:8080/auth}
      - OIDC_TOKEN_URL=${OIDC_TOKEN_URL:-http://localhost:8080/token}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}

      # IBM OIDC settings with fallbacks
      - IBM_CLIENT_ID=${IBM_CLIENT_ID:-}
      - IBM_CLIENT_SECRET=${IBM_CLIENT_SECRET:-}

      # WatsonX credentials with fallbacks
      - WATSONX_APIKEY=${WATSONX_APIKEY:-}
      - WATSONX_URL=${WATSONX_URL:-https://us-south.ml.cloud.ibm.com}
      - WATSONX_INSTANCE_ID=${WATSONX_INSTANCE_ID:-}

      # Embedding settings with fallbacks
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-sentence-transformers/all-minilm-l6-v2}
      - EMBEDDING_DIM=${EMBEDDING_DIM:-384}
      - EMBEDDING_FIELD=${EMBEDDING_FIELD:-embedding}

      # Milvus settings with fallbacks
      - MILVUS_PORT=${MILVUS_PORT:-19530}
    env_file:
      - .env
    volumes:
      - backend_data:/mnt/data
      # Mount source code for development (hot reloading) - writable for VS Code server
      - ./backend:/app
      # Mount full project for Dev Container access
      - ./:/workspace
      # Create writable logs directory
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 5

  frontend:
    build:
      context: ./webui
      dockerfile: Dockerfile.frontend
      tags:
        - rag-modulo/frontend:dev
        - rag-modulo/frontend:latest
    networks:
      - app-network
    ports:
      - "3000:8080"
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    volumes:
      # Mount source code for development (hot reloading)
      - ./webui:/app:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      start_period: 5s
      retries: 3

  test:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
      tags:
        - rag-modulo/backend:test-dev
    networks:
      - app-network
    depends_on:
      backend:
        condition: service_healthy
    profiles:
      - test
    environment:
      - PYTHONPATH=/app
      - MILVUS_HOST=milvus-standalone
      - MILVUS_PORT=${MILVUS_PORT:-19530}
      - COLLECTIONDB_HOST=postgres
      - COLLECTIONDB_PORT=5432
      - COLLECTIONDB_NAME=${COLLECTIONDB_NAME:-rag_modulo}
      - COLLECTIONDB_USER=${COLLECTIONDB_USER:-rag_user}
      - COLLECTIONDB_PASS=${COLLECTIONDB_PASS:-rag_password}
      - OIDC_DISCOVERY_ENDPOINT=${OIDC_DISCOVERY_ENDPOINT:-http://localhost:8080/.well-known/openid_configuration}
      - OIDC_AUTH_URL=${OIDC_AUTH_URL:-http://localhost:8080/auth}
      - OIDC_TOKEN_URL=${OIDC_TOKEN_URL:-http://localhost:8080/token}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - IBM_CLIENT_ID=${IBM_CLIENT_ID:-}
      - IBM_CLIENT_SECRET=${IBM_CLIENT_SECRET:-}
      - WATSONX_APIKEY=${WATSONX_APIKEY:-}
      - WATSONX_URL=${WATSONX_URL:-https://us-south.ml.cloud.ibm.com}
      - WATSONX_INSTANCE_ID=${WATSONX_INSTANCE_ID:-}
      - TESTING=true
      - SKIP_AUTH=true
      - DEVELOPMENT_MODE=true
    env_file:
      - .env
    volumes:
      - ./backend:/app/backend:ro
      - ./tests:/app/tests:ro

volumes:
  backend_data:
    driver_opts:
      type: none
      device: ${PWD}/volumes/backend
      o: bind
