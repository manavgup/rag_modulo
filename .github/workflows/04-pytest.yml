name: Unit Tests

# üìã Purpose
# Run Python unit tests with pytest
# Validates atomic/unit tests without requiring infrastructure

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

# üîÑ Concurrency Control
# Cancel outdated workflow runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  # CI Environment Variables
  TESTING: true
  SKIP_AUTH: true
  DEVELOPMENT_MODE: true
  # Test environment variables
  JWT_SECRET_KEY: test-secret-key-for-ci
  RAG_LLM: openai
  WATSONX_INSTANCE_ID: test-instance-id
  WATSONX_APIKEY: test-api-key
  WATSONX_URL: https://test.watsonx.com
  VECTOR_DB: milvus
  MILVUS_HOST: milvus-standalone
  MILVUS_PORT: 19530
  EMBEDDING_MODEL: sentence-transformers/all-minilm-l6-v2
  DATA_DIR: /tmp/test-data

jobs:
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    steps:
      # 0Ô∏è‚É£ Checkout source code
      - name: üì• Checkout code
        uses: actions/checkout@v4

      # 1Ô∏è‚É£ Setup Python environment
      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # 2Ô∏è‚É£ Install Poetry package manager
      - name: üì¶ Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      # 3Ô∏è‚É£ Free up disk space before heavy operations
      - name: üßπ Free Up Disk Space
        run: |
          echo "Initial: $(df -h / | awk 'NR==2 {print $4}') available"

          # Remove large packages in parallel
          sudo rm -rf /usr/share/dotnet &
          sudo rm -rf /opt/ghc &
          sudo rm -rf /usr/local/share/boost &
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" &
          sudo rm -rf /usr/local/lib/android &
          sudo rm -rf /usr/share/swift &
          wait

          echo "After cleanup: $(df -h / | awk 'NR==2 {print $4}') available"

      # 4Ô∏è‚É£ Cache Poetry dependencies for faster builds
      - name: üìö Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            backend/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # 5Ô∏è‚É£ Install Python dependencies (main + test, skip dev)
      - name: üì• Install main + test dependencies (skip dev)
        run: |
          cd backend
          # Install runtime + test deps; skip dev tools to reduce disk usage.
          # Note: We intentionally skip the 'dev' group in unit tests to avoid
          # heavy linters/type-checkers. pytest-cov and friends are declared in
          # the 'test' group in pyproject.toml, so coverage still works.
          # If coverage fails due to env drift, consider adding pytest-cov here
          # explicitly or switching to `--with dev,test` selectively.
          poetry install --with test --without dev

      # 6Ô∏è‚É£ Validate free disk space after cleanup (optional)
      - name: ‚úÖ Ensure sufficient free disk space
        run: |
          THRESHOLD=${MIN_FREE_GB:-5}
          FREE=$(df -BG / | awk 'NR==2 {gsub("G","",$4); print int($4)}')
          echo "Free space: ${FREE}G (threshold: ${THRESHOLD}G)"
          if [ "$FREE" -lt "$THRESHOLD" ]; then
            echo "Error: Less than ${THRESHOLD}G free after cleanup"
            exit 1
          fi

      # 7Ô∏è‚É£ Run unit/atomic tests with coverage
      - name: üß™ Run unit tests with coverage
        run: |
          cd backend
          poetry run pytest tests/ -m "unit or atomic" \
            --cov=rag_solution \
            --cov-report=term-missing \
            --cov-report=html \
            --tb=short \
            -v \
            --maxfail=5
