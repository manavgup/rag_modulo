name: Deploy to Kubernetes Staging

on:
  push:
    branches:
      - develop
      - staging
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  GHCR_REPO: ghcr.io/${{ github.repository_owner }}/rag_modulo
  HELM_RELEASE: rag-modulo
  NAMESPACE: rag-modulo-staging

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.backend
          push: true
          tags: |
            ${{ env.GHCR_REPO }}/backend:staging
            ${{ env.GHCR_REPO }}/backend:staging-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.frontend
          push: true
          tags: |
            ${{ env.GHCR_REPO }}/frontend:staging
            ${{ env.GHCR_REPO }}/frontend:staging-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-helm:
    name: Deploy to Staging with Helm
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: staging
      url: https://rag-modulo-staging.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Configure kubectl context
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Create namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create secrets
        run: |
          kubectl create secret generic rag-modulo-secrets \
            --namespace=${{ env.NAMESPACE }} \
            --from-literal=COLLECTIONDB_USER=${{ secrets.DB_USER }} \
            --from-literal=COLLECTIONDB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --from-literal=MINIO_ROOT_USER=${{ secrets.MINIO_USER }} \
            --from-literal=MINIO_ROOT_PASSWORD=${{ secrets.MINIO_PASSWORD }} \
            --from-literal=MINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY }} \
            --from-literal=MINIO_SECRET_KEY=${{ secrets.MINIO_SECRET_KEY }} \
            --from-literal=JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            --from-literal=WATSONX_APIKEY=${{ secrets.WATSONX_APIKEY }} \
            --from-literal=WATSONX_URL=${{ secrets.WATSONX_URL }} \
            --from-literal=WATSONX_PROJECT_ID=${{ secrets.WATSONX_PROJECT_ID }} \
            --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --from-literal=ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy with Helm
        run: |
          helm upgrade --install ${{ env.HELM_RELEASE }} \
            ./deployment/helm/rag-modulo \
            --namespace ${{ env.NAMESPACE }} \
            --values ./deployment/helm/rag-modulo/values-staging.yaml \
            --set images.backend.tag=staging \
            --set images.frontend.tag=staging \
            --wait \
            --timeout 10m

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/rag-modulo-backend -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/rag-modulo-frontend -n ${{ env.NAMESPACE }}
          kubectl get pods -n ${{ env.NAMESPACE }}

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… Deployed to staging environment successfully!\n\nAccess at: https://rag-modulo-staging.example.com'
            })
