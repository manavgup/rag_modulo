name: "Stage 2: AI Implementation (OpenAI Codex)"

# Triggers when the "plan-approved" label is added (human approval)
on:
  issues:
    types: [labeled]

jobs:
  implement-fix:
    # Only run when the "plan-approved" label is added
    if: github.event.label.name == 'plan-approved'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check for Branch Collision
        run: |
          BRANCH="fix/issue-${{ github.event.issue.number }}"

          # Check if branch exists on remote
          if git ls-remote --heads origin "$BRANCH" | grep -q "$BRANCH"; then
            echo "‚ö†Ô∏è Branch $BRANCH already exists on remote!"

            gh issue comment ${{ github.event.issue.number }} --body "## ‚ùå Implementation Blocked: Branch Already Exists

            The branch \`$BRANCH\` already exists in the repository.

            **This usually means:**
            1. A previous AI implementation attempt for this issue exists
            2. Someone manually created this branch
            3. An old PR was closed without deleting the branch

            **To resolve:**
            1. Check if there's an existing PR for this issue
            2. If the PR is closed/merged, delete the branch:
               \`\`\`bash
               git push origin --delete $BRANCH
               \`\`\`
            3. If you want to keep the existing branch, use a different issue number
            4. After cleanup, remove and re-add the \`plan-approved\` label to retry

            **Workflow stopped to prevent conflicts.**"

            exit 1
          fi

          echo "‚úÖ Branch $BRANCH is available"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch Implementation Plan and Build Prompt
        id: get_plan
        run: |
          # Fetch the latest AI Implementation Plan from issue comments
          PLAN=$(gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            --jq '.[] | select(.body | contains("## ü§ñ AI Implementation Plan")) | .body' | head -1)

          if [ -z "$PLAN" ]; then
            echo "‚ùå No implementation plan found in issue comments"
            gh issue comment ${{ github.event.issue.number }} --body "‚ùå Implementation failed: No AI Implementation Plan found in issue comments. Please ensure the planning step completed successfully."
            exit 1
          fi

          # Build the complete prompt with the plan embedded
          {
            echo "You are implementing the approved plan for GitHub issue #${{ github.event.issue.number }}."
            echo ""
            echo "## üìã Approved Implementation Plan"
            echo ""
            printf '%s\n' "$PLAN"
            echo ""
            echo "---"
            echo ""
            echo "**Your Task:**"
            echo "1. Follow the approved plan above EXACTLY"
            echo "2. Create a new branch: \`fix/issue-${{ github.event.issue.number }}\`"
            echo "3. Implement the changes according to the plan"
            echo "4. Write/update tests as specified in the plan"
            echo "5. Ensure code follows the project's standards (CLAUDE.md)"
            echo "6. Run local quality checks if possible"
            echo "7. Commit changes with descriptive messages (include DCO sign-off)"
            echo "8. Push the branch"
            echo "9. Create a pull request with:"
            echo "   - Title: \"fix: [Brief description from issue]\""
            echo "   - Body: Reference to issue, summary of changes, testing done"
            echo "   - Link to the original issue"
            echo ""
            echo "**Branch Workflow:**"
            echo "\`\`\`bash"
            echo "# Create and checkout new branch"
            echo "git checkout -b fix/issue-${{ github.event.issue.number }}"
            echo ""
            echo "# After making changes, commit with DCO"
            echo "git add ."
            echo "git commit -s -m \"fix: [descriptive message]"
            echo ""
            echo "Fixes #${{ github.event.issue.number }}"
            echo ""
            echo "[Detailed description of what was changed and why]\""
            echo ""
            echo "# Push branch"
            echo "git push -u origin fix/issue-${{ github.event.issue.number }}"
            echo ""
            echo "# Create PR"
            echo "gh pr create \\"
            echo "  --title \"fix: [Brief description]\" \\"
            echo "  --body \"\$(cat <<'PREOF'"
            echo "Fixes #${{ github.event.issue.number }}"
            echo ""
            echo "## Changes Made"
            echo "[List your changes]"
            echo ""
            echo "## Testing"
            echo "[How you tested]"
            echo ""
            echo "## Checklist"
            echo "- [ ] Code follows project style guidelines"
            echo "- [ ] Tests added/updated"
            echo "- [ ] Documentation updated if needed"
            echo "- [ ] All CI checks pass"
            echo "PREOF"
            echo ")\" \\"
            echo "  --label \"ai-generated\""
            echo "\`\`\`"
            echo ""
            echo "**Quality Guidelines:**"
            echo "- Follow existing code patterns"
            echo "- Add comprehensive error handling"
            echo "- Include docstrings and type hints (Python)"
            echo "- Write clear commit messages"
            echo "- Keep changes focused on the issue"
            echo ""
            echo "**Important:**"
            echo "- Do NOT use --yolo mode for destructive operations"
            echo "- Ask before making breaking changes"
            echo "- Test changes locally when possible"
            echo "- Follow the approved plan - don't deviate"
          } > /tmp/codex_prompt.md

          echo "prompt_file=/tmp/codex_prompt.md" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Claude Implements Fix
        run: |
          # Read the prompt
          PROMPT=$(cat ${{ steps.get_plan.outputs.prompt_file }})

          # Build JSON payload
          PROMPT_JSON=$(echo "$PROMPT" | jq -R -s .)

          # Call Anthropic API
          RESPONSE=$(curl -s https://api.anthropic.com/v1/messages \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -H "content-type: application/json" \
            -d "{\"model\":\"claude-sonnet-4-20250514\",\"max_tokens\":4096,\"messages\":[{\"role\":\"user\",\"content\":$PROMPT_JSON}]}")

          # Extract the response
          CLAUDE_RESPONSE=$(echo "$RESPONSE" | jq -r '.content[0].text')

          if [ -z "$CLAUDE_RESPONSE" ] || [ "$CLAUDE_RESPONSE" = "null" ]; then
            echo "‚ùå Failed to get response from Claude"
            echo "API Response: $RESPONSE"
            exit 1
          fi

          echo "Claude's response:"
          echo "$CLAUDE_RESPONSE"

          # Build comment with Claude's response
          {
            echo "## ü§ñ Claude's Implementation Suggestion"
            echo ""
            echo "$CLAUDE_RESPONSE"
            echo ""
            echo "---"
            echo ""
            echo "**Note**: This is Claude's suggested implementation. Review and implement manually, or we can enhance this workflow to auto-execute the changes."
          } > /tmp/claude_comment.md

          # Post the response to the issue
          gh issue comment ${{ github.event.issue.number }} --body-file /tmp/claude_comment.md
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add Success Label
        if: success()
        run: |
          gh issue edit ${{ github.event.issue.number }} --add-label "claude-suggested"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify on Failure
        if: failure()
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "‚ùå Implementation failed. Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.

          You may need to implement this manually."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
