name: Test and Issue Creation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  PROJECT_NAME: rag-modulo
  PYTHON_VERSION: "3.12"
  PROJECT_VERSION: "1.0.0"
  # Use GHCR images by default
  BACKEND_IMAGE: ghcr.io/manavgup/rag_modulo/backend:latest
  FRONTEND_IMAGE: ghcr.io/manavgup/rag_modulo/frontend:latest
  TEST_IMAGE: ghcr.io/manavgup/rag_modulo/backend:latest

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        vector_db: [milvus]  # We can add others like chromadb, weaviate, pinecone when needed
      fail-fast: false

    env:
      VECTOR_DB: ${{ matrix.vector_db }}
      # Add your other environment variables from .env here
      COLLECTIONDB_NAME: testdb
      COLLECTIONDB_USER: postgres
      COLLECTIONDB_PASS: postgres
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Create environment and volume directories  
      run: |
        # Create comprehensive .env file for CI
        cat > .env << EOF
        PROJECT_NAME=rag-modulo
        PYTHON_VERSION=3.12
        VECTOR_DB=milvus
        COLLECTIONDB_NAME=testdb
        COLLECTIONDB_USER=postgres
        COLLECTIONDB_PASS=postgres
        MINIO_ROOT_USER=minioadmin
        MINIO_ROOT_PASSWORD=minioadmin
        MLFLOW_TRACKING_USERNAME=admin
        MLFLOW_TRACKING_PASSWORD=admin
        RUNTIME_EVAL=false
        MILVUS_PORT=19530
        FRONTEND_URL=http://localhost:3000
        EOF
        
        make create-volumes

    - name: Try to pull GHCR images (with fallback)
      id: pull-images
      run: |
        echo "Attempting to pull GHCR images..."
        if docker pull ${{ env.BACKEND_IMAGE }} 2>/dev/null; then
          echo "✅ Successfully pulled backend image"
          echo "backend_image_exists=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Backend image not found in GHCR, will build locally"
          echo "backend_image_exists=false" >> $GITHUB_OUTPUT
        fi
        
        if docker pull ${{ env.FRONTEND_IMAGE }} 2>/dev/null; then
          echo "✅ Successfully pulled frontend image"
          echo "frontend_image_exists=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Frontend image not found in GHCR, will build locally"
          echo "frontend_image_exists=false" >> $GITHUB_OUTPUT
        fi
        
        if docker pull ${{ env.TEST_IMAGE }} 2>/dev/null; then
          echo "✅ Successfully pulled test image"
          echo "test_image_exists=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Test image not found in GHCR, will build locally"
          echo "test_image_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Build images locally (if GHCR images not available)
      if: steps.pull-images.outputs.backend_image_exists == 'false' || steps.pull-images.outputs.frontend_image_exists == 'false' || steps.pull-images.outputs.test_image_exists == 'false'
      run: |
        echo "Building images locally for CI testing..."
        # Build images locally without pushing to GHCR
        docker build -t ghcr.io/manavgup/rag_modulo/backend:latest -f ./backend/Dockerfile.backend ./backend
        docker build -t ghcr.io/manavgup/rag_modulo/frontend:latest -f ./webui/Dockerfile.frontend ./webui

    - name: Start services
      run: |
        echo "Starting infrastructure services..."
        docker compose up -d postgres minio milvus-etcd milvus-standalone createbuckets mlflow-server
        echo "Services started, checking status..."
        docker compose ps
      
    - name: Wait for services to be healthy
      run: |
        echo "Waiting for services to be healthy..."
        attempt=1
        max_attempts=30
        while [ $attempt -le $max_attempts ]; do
          if docker compose ps | grep -q "unhealthy\|exit"; then
            echo "Attempt $attempt: Some services are unhealthy or exited"
            docker compose ps
            docker compose logs
            sleep 10
            attempt=$((attempt+1))
          else
            echo "All services are healthy!"
            docker compose ps
            break
          fi
        done
        if [ $attempt -gt $max_attempts ]; then
          echo "Services failed to become healthy after $max_attempts attempts"
          exit 1
        fi

    - name: Run tests
      id: run-tests
      run: |
        make create-test-dirs
        make tests || echo "tests_failed=true" >> $GITHUB_OUTPUT

    - name: Create issues for failed tests
      if: steps.run-tests.outputs.tests_failed == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const xml2js = require('xml2js');
          
          try {
            const xmlData = fs.readFileSync('test-reports/junit.xml', 'utf8');
            const parser = new xml2js.Parser();
            
            parser.parseString(xmlData, async (err, result) => {
              if (err) {
                console.error('Error parsing XML:', err);
                return;
              }
              
              const testcases = result.testsuites.testsuite[0].testcase;
              for (const testcase of testcases) {
                if (testcase.failure) {
                  const title = `[${process.env.VECTOR_DB}] Test Failure: ${testcase.$.name}`;
                  const body = `
                  Test: ${testcase.$.name}
                  Class: ${testcase.$.classname}
                  Vector DB: ${process.env.VECTOR_DB}
                  Error: ${testcase.failure[0]._}
                  
                  This issue was automatically created by the test automation workflow.
                  `;
                  
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: title,
                    body: body,
                    labels: ['test-failure', 'needs-triage', process.env.VECTOR_DB]
                  });
                }
              }
            });
          } catch (error) {
            console.error('Error processing test results:', error);
          }

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-${{ matrix.vector_db }}
        path: |
          test-reports/
          logs/
        retention-days: 7

    - name: Cleanup
      if: always()
      run: |
        echo "Cleaning up containers..."
        docker compose down -v || true
        docker container prune -f || true
        docker volume prune -f || true