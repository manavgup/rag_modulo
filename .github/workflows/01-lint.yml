name: Lint & Static Analysis

# This workflow uses tool versions and configurations from pyproject.toml (project root)
# All linting tools (Ruff, MyPy, Pylint, Pydocstyle) reference pyproject.toml as single source of truth
# Tool versions: Ruff ^0.14.0, MyPy ^1.15.0, Pylint ^3.3.8, Pydocstyle ^6.3.0

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

# üîÑ Concurrency Control
# Cancel outdated workflow runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Show all linter failures, not just the first
      matrix:
        include:
          # Security & Secret Detection (BLOCKING)
          - id: detect-private-keys
            name: "üîë Detect Private Keys"
            blocking: true
            cmd: |
              if grep -r "BEGIN.*PRIVATE KEY" \
                --include="*.py" --include="*.js" \
                --include="*.ts" --include="*.env*" . 2>/dev/null | \
                grep -v ".git" | grep -v "node_modules"; then
                echo "‚ùå Private keys detected! Remove before merging."
                exit 1
              else
                echo "‚úÖ No private keys found"
              fi

          - id: detect-ai-artifacts
            name: "ü§ñ Detect AI Artifacts"
            blocking: true
            cmd: |
              PATTERN="(as an ai language model|i am an ai developed by"
              PATTERN="${PATTERN}|source=chatgpt\.com|\[oaicite:\?\?\d+\]"
              PATTERN="${PATTERN}|:contentReference)"
              if grep -rE "${PATTERN}" \
                --include="*.py" --include="*.md" \
                --include="*.js" --include="*.ts" . 2>/dev/null | \
                grep -v ".git" | grep -v "node_modules" | grep -v ".github"; then
                echo "‚ùå AI-generated artifacts detected! Clean before merging."
                exit 1
              else
                echo "‚úÖ No AI artifacts found"
              fi

          # File Hygiene Checks (BLOCKING)
          - id: check-merge-conflicts
            name: "üìù Check Merge Conflicts"
            blocking: true
            cmd: |
              if grep -rn "^<<<<<<< \|^=======$\|^>>>>>>> " \
                --include="*.py" --include="*.js" \
                --include="*.ts" . 2>/dev/null | \
                grep -v ".git" | grep -v "node_modules"; then
                echo "‚ùå Merge conflict markers detected!"
                exit 1
              else
                echo "‚úÖ No merge conflicts"
              fi

          - id: check-large-files
            name: "üìè Check Large Files"
            blocking: true
            cmd: |
              # Only check git-tracked files, not working directory
              LARGE_FILES=$(git ls-files | xargs -I {} sh -c 'test -f "{}" && find "{}" -size +5M 2>/dev/null' || true)
              if [ -n "$LARGE_FILES" ]; then
                echo "‚ö†Ô∏è Large files detected in git (>5MB):"
                echo "$LARGE_FILES" | xargs ls -lh
                echo "‚ùå Large files should be stored in Git LFS or not committed"
                exit 1
              else
                echo "‚úÖ No large files in git"
              fi

          - id: check-debug-statements
            name: "üêç Check Debug Statements"
            blocking: true
            cmd: |
              if grep -rn "import pdb\|breakpoint()\|import ipdb" \
                --include="*.py" backend/rag_solution/ 2>/dev/null; then
                echo "‚ö†Ô∏è Debug statements found - remove before merging"
                exit 1
              else
                echo "‚úÖ No debug statements"
              fi

          # Configuration file linting
          - id: yamllint
            name: "YAML Lint"
            blocking: true
            cmd: |
              pip install yamllint
              yamllint .github/

          - id: jsonlint
            name: "JSON Lint"
            blocking: true
            cmd: |
              find . -name '*.json' -not -path './node_modules/*' -not -path './.git/*' -exec jq empty {} \; || exit 1

          - id: toml-check
            name: "TOML Lint"
            blocking: true
            cmd: |
              pip install toml
              python -c "import toml; toml.load(open('pyproject.toml'))"

          # Python backend linting (blocking) - Check ALL backend Python files
          - id: ruff
            name: "Ruff (Lint + Format)"
            blocking: true
            cmd: |
              pip install poetry
              poetry install --only dev
              echo "Running Ruff linting..."
              poetry run ruff check backend --config pyproject.toml
              echo "Running Ruff formatting check..."
              poetry run ruff format --check backend --config pyproject.toml

          # Python type/quality checking (non-blocking / informational)
          - id: mypy
            name: "MyPy Type Check (Informational)"
            blocking: false
            cmd: |
              pip install poetry
              poetry install --only dev
              poetry run mypy backend --config-file pyproject.toml --ignore-missing-imports --show-error-codes || true

          - id: pylint
            name: "Pylint Quality (Informational)"
            blocking: false
            cmd: |
              pip install poetry
              poetry install --only dev
              poetry run pylint backend/rag_solution/ backend/vectordbs/ backend/core/ backend/auth/ --rcfile=pyproject.toml || true

          - id: pydocstyle
            name: "Docstring Style (Informational)"
            blocking: false
            cmd: |
              pip install poetry
              poetry install --only dev
              poetry run pydocstyle backend/rag_solution/ backend/vectordbs/ backend/core/ backend/auth/ --config=pyproject.toml --count || true

    name: ${{ matrix.name }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v5

      - name: üêç Set up Python 3.12
        if: |
          contains(matrix.id, 'ruff') || contains(matrix.id, 'mypy') ||
          contains(matrix.id, 'pylint') || contains(matrix.id, 'pydocstyle') ||
          contains(matrix.id, 'toml')
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: üßπ Free Up Disk Space
        if: |
          contains(matrix.id, 'ruff') || contains(matrix.id, 'mypy') ||
          contains(matrix.id, 'pylint') || contains(matrix.id, 'pydocstyle')
        run: |
          echo "Initial: $(df -h / | awk 'NR==2 {print $4}') available"
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          echo "After cleanup: $(df -h / | awk 'NR==2 {print $4}') available"

      - name: üîç Install jq for JSON linting
        if: matrix.id == 'jsonlint'
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: üöÄ Run ${{ matrix.name }}
        working-directory: ${{ matrix.working-directory || '.' }}
        run: ${{ matrix.cmd }}
        continue-on-error: ${{ !matrix.blocking }}

      - name: ‚úÖ ${{ matrix.name }} passed
        if: success()
        run: echo "::notice::${{ matrix.name }} completed successfully"

      - name: ‚ö†Ô∏è ${{ matrix.name }} failed
        if: failure() && !matrix.blocking
        run: echo "::warning::${{ matrix.name }} found issues (non-blocking)"

      - name: ‚ùå ${{ matrix.name }} failed
        if: failure() && matrix.blocking
        run: echo "::error::${{ matrix.name }} found issues (blocking)"

  lint-summary:
    runs-on: ubuntu-latest
    needs: lint
    if: always()

    steps:
      - name: üìä Lint Summary
        run: |
          echo "## üìä Lint Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All lint checks completed. Check individual jobs for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Benefits of Matrix Linting" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Parallel Execution**: All linters run simultaneously" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Clear Visibility**: Each linter shown separately in GitHub UI" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Fail-Fast Disabled**: See all failures, not just the first" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Easy Retry**: Can re-run individual linters" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Blocking vs Informational" >> $GITHUB_STEP_SUMMARY
          echo "- üî¥ **Blocking**: YAML, JSON, TOML, Ruff (Lint + Format)" >> $GITHUB_STEP_SUMMARY
          echo "- üü° **Informational**: MyPy, Pylint, Pydocstyle" >> $GITHUB_STEP_SUMMARY
