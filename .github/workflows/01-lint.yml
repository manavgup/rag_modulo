name: Lint & Static Analysis

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Show all linter failures, not just the first
      matrix:
        include:
          # Configuration file linting
          - id: yamllint
            name: "YAML Lint"
            cmd: |
              pip install yamllint
              yamllint .github/

          - id: jsonlint
            name: "JSON Lint"
            cmd: |
              find . -name '*.json' -not -path './node_modules/*' -not -path './.git/*' -exec jq empty {} \; || exit 1

          - id: toml-check
            name: "TOML Lint"
            cmd: |
              pip install toml
              python -c "import toml; toml.load(open('backend/pyproject.toml'))"

          # Python backend linting
          - id: ruff-check
            name: "Ruff Check"
            working-directory: backend
            cmd: |
              pip install poetry
              poetry install --only dev
              poetry run ruff check rag_solution/ --line-length 120

          - id: ruff-format
            name: "Ruff Format Check"
            working-directory: backend
            cmd: |
              pip install poetry
              poetry install --only dev
              poetry run ruff format --check rag_solution/

          - id: mypy
            name: "MyPy Type Check"
            working-directory: backend
            cmd: |
              pip install poetry
              poetry install --only dev
              poetry run mypy rag_solution/ --ignore-missing-imports

          - id: pylint
            name: "Pylint Quality"
            working-directory: backend
            cmd: |
              pip install poetry
              poetry install --only dev
              poetry run pylint rag_solution/ --exit-zero  # Non-blocking for now

          - id: pydocstyle
            name: "Docstring Style"
            working-directory: backend
            cmd: |
              pip install poetry
              poetry install --only dev
              poetry run pydocstyle rag_solution/ --count

          # Frontend linting
          - id: eslint
            name: "ESLint (Frontend)"
            working-directory: frontend
            cmd: |
              npm ci
              npm run lint

          - id: prettier
            name: "Prettier Format Check"
            working-directory: frontend
            cmd: |
              npm ci
              npm run format:check

    name: ${{ matrix.name }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.12
        if: contains(matrix.id, 'ruff') || contains(matrix.id, 'mypy') || contains(matrix.id, 'pylint') || contains(matrix.id, 'pydocstyle') || contains(matrix.id, 'toml')
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: 🟢 Set up Node.js
        if: contains(matrix.id, 'eslint') || contains(matrix.id, 'prettier')
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 🔍 Install jq for JSON linting
        if: matrix.id == 'jsonlint'
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: 🚀 Run ${{ matrix.name }}
        working-directory: ${{ matrix.working-directory || '.' }}
        run: ${{ matrix.cmd }}

      - name: ✅ ${{ matrix.name }} passed
        if: success()
        run: echo "::notice::${{ matrix.name }} completed successfully"

      - name: ❌ ${{ matrix.name }} failed
        if: failure()
        run: echo "::error::${{ matrix.name }} found issues"

  lint-summary:
    runs-on: ubuntu-latest
    needs: lint
    if: always()

    steps:
      - name: 📊 Lint Summary
        run: |
          echo "## 📊 Lint Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All lint checks completed. Check individual jobs for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Benefits of Matrix Linting" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Parallel Execution**: All linters run simultaneously" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Clear Visibility**: Each linter shown separately in GitHub UI" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Fail-Fast Disabled**: See all failures, not just the first" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Easy Retry**: Can re-run individual linters" >> $GITHUB_STEP_SUMMARY
