name: "Stage 1: Gemini Issue Analysis & Planning"

# Triggers when an issue is labeled with "ai-assist"
on:
  issues:
    types: [labeled]

jobs:
  analyze-and-plan:
    # Only run when the "ai-assist" label is added
    if: github.event.label.name == 'ai-assist'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gemini Analyzes Issue and Creates Plan
        uses: google-github-actions/run-gemini-cli@v1
        with:
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          prompt: |
            You are a senior software engineer analyzing GitHub issue #${{ github.event.issue.number }}.

            ## üõ°Ô∏è STEP 1: COMPLEXITY ASSESSMENT (MANDATORY FIRST STEP)

            Before creating any implementation plan, you MUST assess complexity:

            **Complexity Criteria:**
            - Count estimated files to be changed
            - Estimate total lines of code (LOC) to write
            - Identify cross-cutting concerns and dependencies
            - Assess risk level (low/medium/high)

            **Complexity Thresholds:**
            - ‚úÖ **SIMPLE** (1-3 files, <100 LOC, low risk)
            - ‚ö†Ô∏è **MODERATE** (4-8 files, 100-400 LOC, medium risk)
            - üõë **COMPLEX** (>8 files OR >400 LOC OR high risk)

            ## üö® IF COMPLEX: POST THIS AND STOP

            If the issue is COMPLEX, do NOT create an implementation plan. Instead, post:

            ```bash
            gh issue comment ${{ github.event.issue.number }} --body "$(cat <<'EOF'
            ## üõë Issue Too Complex for Automated AI Implementation

            **Complexity Assessment:**
            - Estimated files to change: [X files]
            - Estimated lines of code: [Y LOC]
            - Risk level: [High/Critical]
            - Complexity factors:
              * [Factor 1 - e.g., touches authentication system]
              * [Factor 2 - e.g., requires database schema changes]
              * [Factor 3 - e.g., affects multiple services]

            **Why This is Too Complex:**
            [Explain why this exceeds AI capabilities - e.g., requires architectural decisions, security-critical, cross-cutting changes]

            ---

            ## üìã Recommended Approach

            ### Option 1: Break into Sub-Issues (RECOMMENDED)

            Create focused, manageable sub-issues that can each use AI automation:

            1. **Sub-issue**: [Specific subtask 1]
               - Files: [list]
               - Complexity: Simple/Moderate
               - Can use \`ai-assist\`: ‚úÖ

            2. **Sub-issue**: [Specific subtask 2]
               - Files: [list]
               - Complexity: Simple/Moderate
               - Can use \`ai-assist\`: ‚úÖ

            3. **Sub-issue**: [Specific subtask 3]
               - Files: [list]
               - Complexity: Simple/Moderate
               - Can use \`ai-assist\`: ‚úÖ

            ### Option 2: Manual Implementation with Claude Assist

            This issue requires human expertise for:
            - [Reason 1 - e.g., architectural design decisions]
            - [Reason 2 - e.g., security trade-offs]
            - [Reason 3 - e.g., performance optimization]

            Consider using Claude Code (interactive) for pair programming instead of automated workflow.

            ### Option 3: Hybrid Approach

            1. Manually implement the complex core logic
            2. Use \`ai-assist\` for supporting tasks (tests, documentation, etc.)

            ---

            **Next Steps:**
            1. Remove the \`ai-assist\` label from this issue
            2. Add \`needs-breakdown\` label if splitting into sub-issues
            3. Create sub-issues or implement manually as appropriate

            *AI automation works best for focused, well-scoped issues. Breaking this down will lead to better results.*
            EOF
            )"
            ```

            Then STOP. Do not proceed with planning.

            ## ‚úÖ IF SIMPLE/MODERATE: PROCEED WITH PLANNING

            Only if the issue is SIMPLE or MODERATE, continue with the full implementation plan:

            **Your Task:**
            1. Read the issue content carefully
            2. Analyze the codebase to understand the context
            3. Develop a detailed implementation plan including:
               - Root cause analysis
               - Proposed solution approach
               - Files that need to be changed (list each one)
               - Testing strategy
               - Potential risks and edge cases
               - Estimated complexity (confirm: simple or moderate)

            **Output Format:**
            Post your plan as a comment on the issue using:
            ```bash
            gh issue comment ${{ github.event.issue.number }} --body "$(cat <<'EOF'
            ## ü§ñ AI Implementation Plan

            ### Root Cause Analysis
            [Your analysis here]

            ### Proposed Solution
            [Your solution approach]

            ### Files to Change
            - `path/to/file1.py` - [what changes]
            - `path/to/file2.py` - [what changes]

            ### Testing Strategy
            [How to test this]

            ### Risks & Edge Cases
            [What could go wrong]

            ### Complexity
            - [ ] Simple (< 100 lines)
            - [ ] Moderate (100-300 lines)
            - [ ] Complex (> 300 lines)

            ---
            **Next Steps:**
            - Review this plan carefully
            - If approved, add the \`plan-approved\` label to trigger implementation
            - If changes needed, comment with feedback and remove the \`ai-assist\` label
            EOF
            )"
            ```

            **Important Guidelines:**
            - Follow the project's coding standards from CLAUDE.md
            - Consider the existing CI/CD setup (linting, testing, security)
            - Be specific about implementation details
            - Identify dependencies and prerequisites

          # Allow read-only operations and GitHub CLI
          cli_args: '--allowed-tools "Read,Glob,Grep,Bash(gh issue:*),Bash(gh search:*)"'

      - name: Add Planning Complete Label
        if: success()
        run: gh issue edit ${{ github.event.issue.number }} --add-label "plan-ready"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify on Failure
        if: failure()
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "‚ö†Ô∏è AI planning failed. Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
