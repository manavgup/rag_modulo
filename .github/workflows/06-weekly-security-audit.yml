name: Weekly Security Audit

on:
  schedule:
    # Every Monday at 2:00 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:
    # Manual trigger option

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  rebuild-and-scan:
    name: üîí Comprehensive Security Audit
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: backend
            dockerfile: backend/Dockerfile.backend
            context: backend
            image_name: rag-modulo-backend
          - service: frontend
            dockerfile: frontend/Dockerfile.frontend
            context: frontend
            image_name: rag-modulo-frontend

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üßπ Free Up Disk Space
        run: |
          echo "Initial: $(df -h / | awk 'NR==2 {print $4}') available"
          sudo rm -rf /usr/share/dotnet &
          sudo rm -rf /opt/ghc &
          sudo rm -rf /usr/local/share/boost &
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" &
          sudo rm -rf /usr/local/lib/android &
          sudo rm -rf /usr/share/swift &
          wait
          docker system prune -af --volumes || true
          echo "After cleanup: $(df -h / | awk 'NR==2 {print $4}') available"

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build Fresh Container (no cache)
        run: |
          docker buildx build \
            --file ${{ matrix.dockerfile }} \
            --tag ${{ matrix.image_name }}:audit \
            --load \
            --no-cache \
            --pull \
            ${{ matrix.context }}

      - name: üîç Trivy - Deep Vulnerability Scan (All Severities)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.image_name }}:audit'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          exit-code: '0'  # Don't fail, just report

      - name: üì§ Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'

      - name: üîç Trivy - Generate Detailed Report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.image_name }}:audit'
          format: 'json'
          output: 'trivy-${{ matrix.service }}-detailed.json'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'

      - name: üê≥ Dockle - Best Practices Audit
        run: |
          VERSION=$(curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
            grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          curl -L -o dockle.deb https://github.com/goodwithtech/dockle/releases/download/v${VERSION}/dockle_${VERSION}_Linux-64bit.deb
          sudo dpkg -i dockle.deb
          dockle --format json --output dockle-${{ matrix.service }}-report.json ${{ matrix.image_name }}:audit || true
          dockle ${{ matrix.image_name }}:audit || true

      - name: üìã Hadolint - Dockerfile Audit
        run: |
          docker run --rm -i hadolint/hadolint < ${{ matrix.dockerfile }} || true

      - name: üì¶ Generate SBOM (Software Bill of Materials)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.image_name }}:audit'
          format: 'cyclonedx'
          output: 'sbom-${{ matrix.service }}.json'

      - name: üì§ Upload Security Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ matrix.service }}
          path: |
            trivy-${{ matrix.service }}-*.json
            dockle-${{ matrix.service }}-*.json
            sbom-${{ matrix.service }}.json
          retention-days: 90

  # Aggregate results and create issue if vulnerabilities found
  report-vulnerabilities:
    name: üìä Vulnerability Report
    runs-on: ubuntu-latest
    needs: [rebuild-and-scan]
    if: always()
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì• Download Security Reports
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: üìä Analyze Security Reports
        id: analyze
        run: |
          echo "Analyzing security scan results..."

          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq

          # Count vulnerabilities by severity using jq
          CRITICAL_COUNT=0
          HIGH_COUNT=0
          MEDIUM_COUNT=0

          # Parse Trivy reports with jq for accurate counting
          for report in security-reports/*/trivy-*-detailed.json; do
            if [ -f "$report" ]; then
              # Count vulnerabilities by severity level using jq
              CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "$report" 2>/dev/null || echo 0)
              HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "$report" 2>/dev/null || echo 0)
              MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' "$report" 2>/dev/null || echo 0)

              CRITICAL_COUNT=$((CRITICAL_COUNT + CRITICAL))
              HIGH_COUNT=$((HIGH_COUNT + HIGH))
              MEDIUM_COUNT=$((MEDIUM_COUNT + MEDIUM))
            fi
          done

          echo "critical=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high=$HIGH_COUNT" >> $GITHUB_OUTPUT
          echo "medium=$MEDIUM_COUNT" >> $GITHUB_OUTPUT

          # Determine if we should create an issue
          if [ $CRITICAL_COUNT -gt 0 ] || [ $HIGH_COUNT -gt 5 ]; then
            echo "create_issue=true" >> $GITHUB_OUTPUT
          else
            echo "create_issue=false" >> $GITHUB_OUTPUT
          fi

      - name: üö® Create Security Issue if Vulnerabilities Found
        if: steps.analyze.outputs.create_issue == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const critical = '${{ steps.analyze.outputs.critical }}';
            const high = '${{ steps.analyze.outputs.high }}';
            const medium = '${{ steps.analyze.outputs.medium }}';

            const body = `
            ## üîí Weekly Security Audit Results

            **Date**: ${new Date().toLocaleDateString()}

            ### Vulnerability Summary
            - üî¥ **Critical**: ${critical}
            - üü† **High**: ${high}
            - üü° **Medium**: ${medium}

            ### Action Required
            ${critical > 0 ? '‚ö†Ô∏è **CRITICAL vulnerabilities found!** Immediate action required.' : ''}
            ${high > 5 ? '‚ö†Ô∏è **Multiple HIGH severity vulnerabilities found.** Review recommended.' : ''}

            ### Reports
            Security scan reports are available in the workflow artifacts:
            - Trivy vulnerability scans
            - Dockle best practices audit
            - Software Bill of Materials (SBOM)

            ### Next Steps
            1. Review the workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            2. Download security reports from artifacts
            3. Update base images and dependencies
            4. Re-run security scans after fixes

            ---
            *This issue was automatically created by the Weekly Security Audit workflow.*
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîí Security Audit - ${critical} Critical, ${high} High Vulnerabilities Found`,
              body: body,
              labels: ['security', 'automated', 'needs-triage']
            });

      - name: ‚úÖ Post Success Summary
        if: steps.analyze.outputs.create_issue == 'false'
        run: |
          echo "‚úÖ Weekly Security Audit Complete"
          echo "No critical security issues found."
          echo "Critical: ${{ steps.analyze.outputs.critical }}"
          echo "High: ${{ steps.analyze.outputs.high }}"
          echo "Medium: ${{ steps.analyze.outputs.medium }}"
