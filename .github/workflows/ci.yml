name: CI/CD Pipeline

on:
  pull_request:
    branches: [main, dev, test]

env:
  # Use GHCR images by default
  BACKEND_IMAGE: ghcr.io/manavgup/rag_modulo/backend:latest
  FRONTEND_IMAGE: ghcr.io/manavgup/rag_modulo/frontend:latest
  TEST_IMAGE: ghcr.io/manavgup/rag_modulo/backend:latest

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        vector_db: [milvus, chromadb, weaviate, pinecone]
      fail-fast: false  # Continue with other tests even if one fails
    
    env:
      VECTOR_DB: ${{ matrix.vector_db }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Try to pull GHCR images (with fallback)
        id: pull-images
        run: |
          echo "Attempting to pull GHCR images..."
          if docker pull ${{ env.BACKEND_IMAGE }} 2>/dev/null; then
            echo "✅ Successfully pulled backend image"
            echo "backend_image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Backend image not found in GHCR, will build locally"
            echo "backend_image_exists=false" >> $GITHUB_OUTPUT
          fi
          
          if docker pull ${{ env.FRONTEND_IMAGE }} 2>/dev/null; then
            echo "✅ Successfully pulled frontend image"
            echo "frontend_image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Frontend image not found in GHCR, will build locally"
            echo "frontend_image_exists=false" >> $GITHUB_OUTPUT
          fi
          
          if docker pull ${{ env.TEST_IMAGE }} 2>/dev/null; then
            echo "✅ Successfully pulled test image"
            echo "test_image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Test image not found in GHCR, will build locally"
            echo "test_image_exists=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Build images locally (if GHCR images not available)
        if: steps.pull-images.outputs.backend_image_exists == 'false' || steps.pull-images.outputs.frontend_image_exists == 'false' || steps.pull-images.outputs.test_image_exists == 'false'
        run: |
          echo "Building images locally..."
          make build-all
          
      - name: Create volume directories
        run: make create-volumes
          
      - name: Start services
        run: make run-services
        env:
          DOCKER_BUILDKIT: 1
          
      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          timeout 300 bash -c '
            while true; do
              if docker compose ps | grep -q "healthy"; then
                echo "Services are healthy"
                exit 0
              fi
              echo "Waiting for services to become healthy..."
              docker compose ps
              sleep 10
            done'
            
      - name: Run all tests
        run: |
          make create-test-dirs
          make tests
        
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.vector_db }}
          path: test-reports/
          retention-days: 1

  report:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install coverage
        run: pip install coverage
        
      - name: Download all test reports
        uses: actions/download-artifact@v4
        with:
          path: test-reports-download
          
      - name: Generate combined test report
        run: |
          mkdir -p ./test-reports/combined
          coverage combine ./test-reports-download/*/coverage/.coverage* || true
          coverage html -d ./test-reports/combined/coverage || true
          coverage xml -o ./test-reports/combined/coverage.xml || true
          
      - name: Upload combined test report
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-combined
          path: test-reports/combined
          retention-days: 1
          
      - name: Add PR comment
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          body="## Test Results Summary\n\n"
          body+="### Coverage\n\`\`\`\n$(coverage report || echo 'No coverage data available')\n\`\`\`\n"
          body+="### Test Results\n\n"
          body+="| Vector DB | Test Type | Total | Passed | Failed |\n|-----------|-----------|-------|--------|--------|\n"
          
          for db in milvus chromadb weaviate pinecone; do
            if [ -f "./test-reports-download/test-reports-$db/junit.xml" ]; then
              results=$(python -c "
                import xml.etree.ElementTree as ET
                try:
                    tree = ET.parse('./test-reports-download/test-reports-$db/junit.xml')
                    root = tree.getroot()
                    total = int(root.attrib.get('tests', 0))
                    failures = int(root.attrib.get('failures', 0))
                    errors = int(root.attrib.get('errors', 0))
                    passed = total - failures - errors
                    print(f'$db:Integration:{total}:{passed}:{failures + errors}')
                except Exception as e:
                    print(f'$db:Integration:0:0:0')
              ")
              IFS=':' read -r db type total passed failed <<< "$results"
              body+="| $db | $type | $total | $passed | $failed |\n"
            fi
          done
          
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -f body="$body"