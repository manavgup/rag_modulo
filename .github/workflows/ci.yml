name: CI/CD Pipeline

on:
  pull_request:
    branches: [main, dev, test]

env:
  # Use GHCR images by default
  BACKEND_IMAGE: ghcr.io/manavgup/rag_modulo/backend:latest
  FRONTEND_IMAGE: ghcr.io/manavgup/rag_modulo/frontend:latest
  TEST_IMAGE: ghcr.io/manavgup/rag_modulo/backend:latest

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        vector_db: [milvus]  # Only test milvus - the default and configured vector database
      fail-fast: false  # Continue with other tests even if one fails
    
    env:
      VECTOR_DB: ${{ matrix.vector_db }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Create environment and volume directories
        run: |
          # Create comprehensive .env file for CI
          cat > .env << EOF
          PROJECT_NAME=rag-modulo
          PYTHON_VERSION=3.11
          VECTOR_DB=milvus
          COLLECTIONDB_NAME=rag_db
          COLLECTIONDB_USER=rag_user
          COLLECTIONDB_PASS=rag_password
          MINIO_ROOT_USER=minioadmin
          MINIO_ROOT_PASSWORD=minioadmin
          MLFLOW_TRACKING_USERNAME=admin
          MLFLOW_TRACKING_PASSWORD=admin
          RUNTIME_EVAL=false
          MILVUS_PORT=19530
          FRONTEND_URL=http://localhost:3000
          EOF
          
          make create-volumes
        
      - name: Build images locally for CI
        run: |
          echo "Building images locally for CI testing..."
          # Build images locally without pushing to GHCR
          docker build -t ghcr.io/manavgup/rag_modulo/backend:latest -f ./backend/Dockerfile.backend ./backend
          docker build -t ghcr.io/manavgup/rag_modulo/frontend:latest -f ./webui/Dockerfile.frontend ./webui
          
      - name: Start services
        run: |
          echo "Starting infrastructure services..."
          make create-volumes
          docker compose up -d postgres minio milvus-etcd milvus-standalone createbuckets mlflow-server
          echo "Services started, checking status..."
          docker compose ps
        env:
          DOCKER_BUILDKIT: 1
          
      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          
          # Start with a longer initial wait for CI environment
          sleep 10
          
          max_wait=300  # 5 minutes for CI environment
          check_interval=10
          elapsed=0
          
          while [ $elapsed -lt $max_wait ]; do
            echo "⏳ Checking service health (${elapsed}s/${max_wait}s)..."
            
            # Show current status
            docker compose ps
            
            # Check for healthy services
            healthy_count=$(docker compose ps --format 'table {{.Name}}\t{{.Status}}' | grep -c 'healthy' || echo 0)
            total_services=5  # postgres, minio, milvus-etcd, milvus-standalone, mlflow-server
            
            if [ "$healthy_count" -eq "$total_services" ]; then
              echo "✅ All services are healthy ($healthy_count/$total_services)"
              exit 0
            fi
            
            # Show logs for any unhealthy services
            echo "⚠️ Services healthy: $healthy_count/$total_services"
            docker compose ps --format 'table {{.Name}}\t{{.Status}}' | grep -v 'healthy' || true
            
            # Show logs for failed containers
            failed_containers=$(docker ps -f status=exited -q || echo "")
            if [ -n "$failed_containers" ]; then
              echo "📋 Logs from failed containers:"
              for container in $failed_containers; do
                echo "--- Container $container ---"
                docker logs --tail 20 $container || true
              done
            fi
            
            sleep $check_interval
            elapsed=$((elapsed + check_interval))
          done
          
          echo "❌ Timeout waiting for services to be healthy"
          echo "Final status:"
          docker compose ps
          docker compose logs --tail 50
          exit 1
            
      - name: Run all tests
        run: |
          make create-test-dirs
          make tests
        
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.vector_db }}
          path: test-reports/
          retention-days: 1

  report:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install coverage
        run: pip install coverage
        
      - name: Download all test reports
        uses: actions/download-artifact@v4
        with:
          path: test-reports-download
          
      - name: Generate combined test report
        run: |
          mkdir -p ./test-reports/combined
          coverage combine ./test-reports-download/*/coverage/.coverage* || true
          coverage html -d ./test-reports/combined/coverage || true
          coverage xml -o ./test-reports/combined/coverage.xml || true
          
      - name: Upload combined test report
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-combined
          path: test-reports/combined
          retention-days: 1
          
      - name: Add PR comment
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          body="## Test Results Summary\n\n"
          body+="### Coverage\n\`\`\`\n$(coverage report || echo 'No coverage data available')\n\`\`\`\n"
          body+="### Test Results\n\n"
          body+="| Vector DB | Test Type | Total | Passed | Failed |\n|-----------|-----------|-------|--------|--------|\n"
          
          # Since we only test milvus now, simplify the reporting
          if [ -f "./test-reports-download/test-reports-milvus/junit.xml" ]; then
            results=$(python -c "
              import xml.etree.ElementTree as ET
              try:
                  tree = ET.parse('./test-reports-download/test-reports-milvus/junit.xml')
                  root = tree.getroot()
                  total = int(root.attrib.get('tests', 0))
                  failures = int(root.attrib.get('failures', 0))
                  errors = int(root.attrib.get('errors', 0))
                  passed = total - failures - errors
                  print(f'milvus:Integration:{total}:{passed}:{failures + errors}')
              except Exception as e:
                  print(f'milvus:Integration:0:0:0')
            ")
            IFS=':' read -r db type total passed failed <<< "$results"
            body+="| $db | $type | $total | $passed | $failed |\n"
          fi
          
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -f body="$body"