name: CI/CD Pipeline

on:
  push:
    branches: [main, dev, test]
  pull_request:
    branches: [main, dev, test]

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - name: Setup Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: Install dependencies
        uses: actions/cache@v2
        id: poetry-cache
        with:
          path: ./backend/.venv
          key: poetry-${{ hashFiles('**/poetry.lock') }}
      - if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: |
          poetry install --only main --no-root -C ./backend
      - name: Check Poetry configuration
        run: make check-toml
      - name: Run formatting
        run: make format

  lint:
    needs: format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - name: Setup Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: Install dependencies
        uses: actions/cache@v2
        id: poetry-cache
        with:
          path: .venv
          key: poetry-${{ hashFiles('**/poetry.lock') }}
      - if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Run linting
        run: make lint

  test:
    needs: format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Start container with dependencies
        run: make run-services
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - name: Setup Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: Install dependencies
        uses: actions/cache@v2
        id: poetry-cache
        with:
          path: .venv
          key: poetry-${{ hashFiles('**/poetry.lock') }}
      - if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Run tests
        run: make test

  audit:
    needs: [format, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - name: Setup Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: Install dependencies
        uses: actions/cache@v2
        id: poetry-cache
        with:
          path: .venv
          key: poetry-${{ hashFiles('**/poetry.lock') }}
      - if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Run security audit
        run: make audit

  build:
    needs: [lint, test, audit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build application containers
        run: make build-app

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to production
        run: |
          # Add your deployment steps here
          echo "Deploying to production"
