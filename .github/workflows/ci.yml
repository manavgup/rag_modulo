name: CI/CD Pipeline

on:
  pull_request:
    branches: [main, dev, test]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v4
      - name: Build frontend
        run: docker build -t rag-modulo/frontend:1.0.${{ github.run_number }} -f ./webui/Dockerfile.frontend ./webui
      - name: Build backend
        run: docker build -t rag-modulo/backend:1.0.${{ github.run_number }}  -f ./backend/Dockerfile.backend ./backend
      - name: Build tests
        run: docker build -t rag-modulo/backend-test:1.0.${{ github.run_number }} -f ./backend/Dockerfile.test ./backend
      - name: Setup .env file with variables required for test environment deployment
        run: |
          touch .env
          
          cat <<EOL >> .env
          COLLECTIONDB_NAME=${{ vars.COLLECTIONDB_NAME }}
          COLLECTIONDB_USER=${{ secrets.COLLECTIONDB_USER }}
          COLLECTIONDB_PASS=${{ secrets.COLLECTIONDB_USER }}
          COLLECTIONDB_PORT=${{ vars.COLLECTIONDB_PORT }}
          COLLECTIONDB_HOST=${{ vars.COLLECTIONDB_HOST }}
          MINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY=${{ secrets.MINIO_SECRET_KEY }}
          IBM_CLIENT_ID=${{ secrets.IBM_CLIENT_ID }}
          MILVUS_HOST=${{ vars.MILVUS_HOST }}
          MILVUS_PORT=${{ vars.MILVUS_PORT }}
          OIDC_DISCOVERY_ENDPOINT=${{ secrets.OIDC_DISCOVERY_ENDPOINT }}
          OIDC_AUTH_URL=${{ secrets.OIDC_AUTH_URL }}
          OIDC_TOKEN_URL=${{ secrets.OIDC_TOKEN_URL }}
          FRONTEND_URL=${{ vars.FRONTEND_URL }}
          IBM_CLIENT_SECRET=${{ secrets.IBM_CLIENT_SECRET }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          ELASTIC_HOST=${{ vars.ELASTIC_HOST }}
          ELASTIC_PORT=${{ vars.ELASTIC_PORT }}
          EMBEDDING_MODEL=${{ vars.EMBEDDING_MODEL }}
          EMBEDDING_FIELD=${{ vars.EMBEDDING_FIELD }}
          EMBEDDING_DIM=${{ vars.EMBEDDING_DIM }}
          VECTOR_DB=${{ vars.VECTOR_DB }}
          WATSONX_APIKEY=${{ secrets.WATSONX_APIKEY }}
          WATSONX_URL=${{ vars.WATSONX_URL }}
          WATSONX_INSTANCE_ID=${{ secrets.WATSONX_INSTANCE_ID }}
          RAG_LLM=${{ vars.RAG_LLM }}
          MAX_NEW_TOKENS=${{ vars.MAX_NEW_TOKENS }}
          MIN_NEW_TOKENS=${{ vars.MIN_NEW_TOKENS }}
          RANDOM_SEED=${{ vars.RANDOM_SEED }}
          TOP_K=${{ vars.TOP_K }}5
          TEMPERATURE=${{ vars.TEMPERATURE }}
          PROJECT_VERSION=1.0.${{ github.run_number }}
          EOL
      - name: Run all tests
        run: |
          source .env
          echo $PROJECT_VERSION

          echo "Creating volume directories with correct permissions..."
          mkdir -p ./volumes/postgres ./volumes/etcd ./volumes/minio ./volumes/milvus ./volumes/backend
          chmod -R 777 ./volumes
          echo "Volume directories created and permissions set."

          echo "Starting services:"
          docker compose up -d postgres minio milvus-etcd milvus-standalone createbuckets mlflow-server || \
          { \
            echo "Failed to infra services"; \
            unhealthy_containers=$$(docker ps -f health=unhealthy -q); \
            if [ -n "$$unhealthy_containers" ]; then \
              echo "Logs from unhealthy containers:"; \
              for container in $$unhealthy_containers; do \
                echo "Container ID: $$container"; \
                docker logs $$container; \
              done; \
            else \
              echo "No unhealthy containers found, checking for failed containers..."; \
              failed_containers=$$(docker ps -f status=exited -q); \
              if [ -n "$$failed_containers" ]; then \
                echo "Logs from failed containers:"; \
                for container in $$failed_containers; do \
                  echo "Container ID: $$container"; \
                  docker logs $$container; \
                done; \
              else \
                echo "No failed containers found, showing logs for all services."; \
                docker compose logs; \
              fi; \
            fi; \
            exit 1; \
          }

          echo "Starting backend..."
          docker compose up -d backend
          echo "Backend is now running."

          docker compose run --rm test pytest -v -s -m "not (chromadb or elasticsearch or pinecone or weaviate)"
