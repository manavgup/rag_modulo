name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  packages: write
  actions: read

env:
  # Use GHCR images by default
  BACKEND_IMAGE: ghcr.io/manavgup/rag_modulo/backend:latest
  FRONTEND_IMAGE: ghcr.io/manavgup/rag_modulo/frontend:latest
  TEST_IMAGE: ghcr.io/manavgup/rag_modulo/backend:latest

jobs:
  # Test isolation validation - atomic tests without any environment variables
  test-isolation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies with retry
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: cd backend && poetry install --with dev,test

      - name: Run test isolation checker
        run: |
          cd backend && python ../scripts/check_test_isolation.py

      - name: Run atomic tests without environment variables
        run: |
          cd backend && poetry run pytest tests/ -m atomic --tb=short -v

  # Fast feedback - lint and unit tests without infrastructure
  lint-and-unit:
    runs-on: ubuntu-latest
    needs: [test-isolation]
    env:
      # Essential environment variables for current atomic tests
      # TODO: Remove these once issue #172 (test isolation) is fixed
      JWT_SECRET_KEY: test-secret-key-for-ci
      RAG_LLM: openai
      WATSONX_INSTANCE_ID: test-instance-id
      WATSONX_APIKEY: test-api-key
      WATSONX_URL: https://test.watsonx.com
      # Additional variables needed by tests
      VECTOR_DB: milvus
      MILVUS_HOST: milvus-standalone
      MILVUS_PORT: 19530
      EMBEDDING_MODEL: sentence-transformers/all-minilm-l6-v2
      DATA_DIR: /tmp/test-data
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            backend/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies with retry
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            cd backend
            pip install poetry
            poetry config virtualenvs.in-project true
            # Regenerate lock file to ensure sync
            poetry lock
            # Install main, dev, and test groups for CI
            poetry install --with dev,test

      - name: Check formatting
        run: make format-check
        continue-on-error: true  # Don't fail on format issues initially

      - name: Run linting (Ruff + MyPy)
        run: make lint
        continue-on-error: true  # Don't fail on lint issues initially

      - name: Run security checks
        run: make security-check
        continue-on-error: true  # Don't fail on security issues initially

      - name: Run unit tests with coverage
        run: |
          cd backend && poetry run pytest tests/ \
            -m "atomic" \
            --cov=rag_solution \
            --cov-report=term-missing \
            --cov-fail-under=60 \
            --maxfail=5 \
            --tb=short
        continue-on-error: true  # Don't fail on coverage threshold initially

  # Build images once
  build:
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.build.outputs.backend-image }}
      frontend-image: ${{ steps.build.outputs.frontend-image }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images
        id: build
        run: |
          # Build with commit SHA for uniqueness
          BACKEND_TAG="ghcr.io/manavgup/rag_modulo/backend:${{ github.sha }}"
          FRONTEND_TAG="ghcr.io/manavgup/rag_modulo/frontend:${{ github.sha }}"

          echo "Building backend image..."
          docker build -t $BACKEND_TAG -f ./backend/Dockerfile.backend ./backend

          echo "Building frontend image..."
          docker build -t $FRONTEND_TAG -f ./webui/Dockerfile.frontend ./webui

          # Only push images on main branch pushes (not PRs)
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            # Also tag as latest for compose compatibility
            docker tag $BACKEND_TAG ghcr.io/manavgup/rag_modulo/backend:latest
            docker tag $FRONTEND_TAG ghcr.io/manavgup/rag_modulo/frontend:latest

            echo "Pushing images to GHCR..."
            # Push images to GHCR
            docker push $BACKEND_TAG
            docker push $FRONTEND_TAG
            docker push ghcr.io/manavgup/rag_modulo/backend:latest
            docker push ghcr.io/manavgup/rag_modulo/frontend:latest
          else
            echo "Skipping push to GHCR - not on main branch or not a push event"
          fi

          echo "backend-image=$BACKEND_TAG" >> $GITHUB_OUTPUT
          echo "frontend-image=$FRONTEND_TAG" >> $GITHUB_OUTPUT

  # API tests (fast, no external dependencies)
  api-tests:
    needs: [lint-and-unit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies with retry
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: cd backend && poetry install --with dev,test

      - name: Run API tests
        run: |
          cd backend && poetry run pytest tests/ \
            -m "asyncio" \
            --maxfail=5 \
            --tb=short \
            -v
        continue-on-error: true

  # Integration tests (only when needed)
  integration-test:
    needs: [build, lint-and-unit, api-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        vector_db: [milvus]
      fail-fast: false

    env:
      VECTOR_DB: ${{ matrix.vector_db }}
      BACKEND_IMAGE: ${{ needs.build.outputs.backend-image }}
      FRONTEND_IMAGE: ${{ needs.build.outputs.frontend-image }}

    steps:
      - uses: actions/checkout@v4

      - name: Create environment and volume directories
        run: |
          # Use the .env.ci file for CI testing
          cp .env.ci .env

          make create-volumes

      - name: Start minimal services for integration tests
        run: |
          echo "Starting essential services for integration tests..."
          # Set testing environment variables
          export TESTING=true
          export SKIP_AUTH=true
          export DEVELOPMENT_MODE=true
          # Only start essential services to speed up tests
          docker compose up -d postgres milvus-etcd milvus-standalone
          echo "Services started, using health check instead of sleep..."
          ./.github/scripts/wait-for-services.sh --config ./.github/config/ci-services.yml --timeout 120 --verbose
          docker compose ps
        env:
          DOCKER_BUILDKIT: 1
          TESTING: true
          SKIP_AUTH: true
          DEVELOPMENT_MODE: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run integration tests (lightweight)
        run: |
          echo "Running integration tests with built images..."
          make create-test-dirs
          # Run only integration tests, skip performance tests for speed
          docker compose run --rm \
            -e TESTING=true \
            -e CONTAINER_ENV=false \
            -e SKIP_AUTH=true \
            -e DEVELOPMENT_MODE=true \
            test pytest -v -s -m "integration and not performance" \
            --maxfail=3 \
            --tb=short \
            || echo "Some integration tests failed (non-blocking for now)"
        env:
          TESTING: true
          SKIP_AUTH: true
          DEVELOPMENT_MODE: true

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.vector_db }}
          path: test-reports/
          retention-days: 1

  # Simple reporting without complex XML parsing
  report:
    needs: [lint-and-unit, build, api-tests, integration-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Report results
        run: |
          echo "## CI/CD Results"
          echo "- Lint and Unit Tests: ${{ needs.lint-and-unit.result }}"
          echo "- Build: ${{ needs.build.result }}"
          echo "- API Tests: ${{ needs.api-tests.result }}"
          echo "- Integration Tests: ${{ needs.integration-test.result }}"

          if [[ "${{ needs.lint-and-unit.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Critical jobs failed"
            exit 1
          else
            echo "✅ Core jobs passed"
          fi
