name: Main - Integration Tests & Build

# This workflow runs full integration tests and builds containers
# For fast PR checks, see pr-fast-check.yml

on:
  push:
    branches: [main]  # Only on merge to main
  workflow_dispatch:  # Manual trigger

permissions:
  contents: read
  packages: write
  actions: read

env:
  # Use GHCR images by default
  BACKEND_IMAGE: ghcr.io/manavgup/rag_modulo/backend:latest
  FRONTEND_IMAGE: ghcr.io/manavgup/rag_modulo/frontend:latest
  TEST_IMAGE: ghcr.io/manavgup/rag_modulo/backend:latest

  # CI Environment Variables
  TESTING: true
  SKIP_AUTH: true
  DEVELOPMENT_MODE: true

jobs:
  # Test isolation validation - atomic tests without any environment variables
  test-isolation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies with retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: poetry install --with dev,test

      - name: Run test isolation checker
        run: |
          export TESTING=true
          export SKIP_AUTH=true
          export DEVELOPMENT_MODE=true
          python scripts/check_test_isolation.py

      - name: Run atomic tests without environment variables
        run: |
          export TESTING=true
          export SKIP_AUTH=true
          export DEVELOPMENT_MODE=true
          poetry run pytest tests/ -m atomic --tb=short -v

  # Fast feedback - lint and unit tests without infrastructure
  lint-and-unit:
    runs-on: ubuntu-latest
    needs: [test-isolation]
    env:
      # Essential environment variables for current atomic tests
      # TODO: Remove these once issue #172 (test isolation) is fixed
      JWT_SECRET_KEY: test-secret-key-for-ci  # pragma: allowlist secret
      RAG_LLM: openai
      WATSONX_INSTANCE_ID: test-instance-id
      WATSONX_APIKEY: test-api-key  # pragma: allowlist secret
      WATSONX_URL: https://test.watsonx.com
      # Additional variables needed by tests
      VECTOR_DB: milvus
      MILVUS_HOST: milvus-standalone
      MILVUS_PORT: 19530
      EMBEDDING_MODEL: sentence-transformers/all-minilm-l6-v2
      DATA_DIR: /tmp/test-data
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            backend/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies with retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            pip install poetry
            poetry config virtualenvs.in-project true
            # Regenerate lock file to ensure sync
            poetry lock
            # Install main, dev, and test groups for CI
            poetry install --with dev,test

      - name: Check formatting
        run: make format-check
        continue-on-error: true  # Don't fail on format issues initially

      - name: Run linting (Ruff + MyPy)
        run: make lint
        continue-on-error: true  # Don't fail on lint issues initially

      - name: Run security checks
        run: make security-check
        continue-on-error: true  # Don't fail on security issues initially

      - name: Run unit tests with coverage
        run: |
          poetry run pytest tests/ \
            -m "atomic" \
            --cov=rag_solution \
            --cov-report=term-missing \
            --cov-fail-under=60 \
            --maxfail=5 \
            --tb=short
        continue-on-error: true  # Don't fail on coverage threshold initially

  # NOTE: Build job removed - now handled by 03-build-secure.yml workflow
  # This eliminates duplicate builds (was building in both ci.yml and 03-build-secure.yml)
  # Security scanning workflow (03-build-secure.yml) now handles both building AND scanning

  # Simple reporting without complex XML parsing
  report:
    needs: [lint-and-unit]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Report results
        run: |
          echo "## CI/CD Results"
          echo "- Lint and Unit Tests: ${{ needs.lint-and-unit.result }}"
          echo ""
          echo "Note: Docker builds handled by 'Secure Docker Build & Scan' workflow"
          echo "This eliminates duplicate builds and ensures all images are security scanned"

          if [[ "${{ needs.lint-and-unit.result }}" == "failure" ]]; then
            echo "❌ Lint/unit tests failed"
            exit 1
          else
            echo "✅ Lint and unit tests passed"
          fi
