name: Codespace Testing

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'tests/**'
      - '.devcontainer/**'
  workflow_dispatch:

jobs:
  codespace-testing:
    runs-on: ubuntu-latest
    name: Run Tests in Codespace Environment
    
    steps:
    - name: Create Codespace
      id: create-codespace
      uses: github/codespace-action@v1
      with:
        codespace-name: testing-${{ github.run_number }}
        timeout-minutes: 15
        
    - name: Wait for Codespace to be ready
      run: |
        echo "Waiting for Codespace to be ready..."
        sleep 45
        
    - name: Setup Development Environment
      run: |
        echo "Setting up development environment in Codespace..."
        
        # Initialize development environment
        gh codespace exec --command "cd /workspace && make dev-init" --codespace ${{ steps.create-codespace.outputs.codespace-name }}
        
        # Build development images
        gh codespace exec --command "cd /workspace && make dev-build" --codespace ${{ steps.create-codespace.outputs.codespace-name }}
        
    - name: Start Services
      run: |
        echo "Starting development services..."
        
        # Start development environment
        gh codespace exec --command "cd /workspace && make dev-up" --codespace ${{ steps.create-codespace.outputs.codespace-name }}
        
        # Wait for services to be healthy
        gh codespace exec --command "cd /workspace && make dev-validate" --codespace ${{ steps.create-codespace.outputs.codespace-name }}
        
    - name: Run Tests
      run: |
        echo "Running tests in Codespace environment..."
        
        # Run atomic tests
        gh codespace exec --command "cd /workspace && make test-atomic" --codespace ${{ steps.create-codespace.outputs.codespace-name }}
        
        # Run unit tests
        gh codespace exec --command "cd /workspace && make test-unit" --codespace ${{ steps.create-codespace.outputs.codespace-name }}
        
        # Run integration tests
        gh codespace exec --command "cd /workspace && make test-integration" --codespace ${{ steps.create-codespace.outputs.codespace-name }}
        
    - name: Test Hot Reloading
      run: |
        echo "Testing hot reloading functionality..."
        
        # Create a test file change
        gh codespace exec --command "cd /workspace/backend && echo '# Test change' >> test_hot_reload.py" --codespace ${{ steps.create-codespace.outputs.codespace-name }}
        
        # Verify the change is reflected
        gh codespace exec --command "cd /workspace && ls backend/test_hot_reload.py" --codespace ${{ steps.create-codespace.outputs.codespace-name }}
        
        # Clean up test file
        gh codespace exec --command "cd /workspace/backend && rm test_hot_reload.py" --codespace ${{ steps.create-codespace.outputs.codespace-name }}
        
    - name: Test CLI Commands
      run: |
        echo "Testing CLI commands..."
        
        # Test CLI help
        gh codespace exec --command "cd /workspace && poetry run python -m rag_solution.cli.main --help" --codespace ${{ steps.create-codespace.outputs.codespace-name }}
        
        # Test health check
        gh codespace exec --command "cd /workspace && poetry run python -m rag_solution.cli.main health check" --codespace ${{ steps.create-codespace.outputs.codespace-name }}
        
    - name: Cleanup Services
      if: always()
      run: |
        echo "Cleaning up services..."
        gh codespace exec --command "cd /workspace && make dev-down" --codespace ${{ steps.create-codespace.outputs.codespace-name }}
        
    - name: Cleanup Codespace
      if: always()
      run: |
        echo "Cleaning up Codespace..."
        gh codespace delete --codespace ${{ steps.create-codespace.outputs.codespace-name }} --force
        
    - name: Test Results
      run: |
        echo "âœ… Codespace testing completed successfully!"
        echo "All tests passed in Codespace environment."
