name: Secure Docker Build & Scan

on:
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose*.yml'
      - '.github/workflows/03-build-secure.yml'
  push:
    branches: [main]
  schedule:
    # Weekly CVE scan every Tuesday at 6:17 PM UTC
    - cron: '17 18 * * 2'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write  # For SARIF uploads
  actions: read

jobs:
  security-scan:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: backend
            dockerfile: backend/Dockerfile.backend
            context: backend
            image_name: rag-modulo-backend
          - service: frontend
            dockerfile: frontend/Dockerfile.frontend
            context: frontend
            image_name: rag-modulo-frontend

    name: 🔒 Security Scan - ${{ matrix.service }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ===== STAGE 1: Dockerfile Security (Hadolint) =====
      - name: 🔍 Hadolint - Dockerfile Security Scan
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.dockerfile }}
          format: sarif
          output-file: hadolint-${{ matrix.service }}.sarif
          no-fail: true  # Don't fail the build, just report

      - name: 📤 Upload Hadolint SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-${{ matrix.service }}.sarif
          category: hadolint-${{ matrix.service }}

      # ===== STAGE 2: Build Docker Image =====
      - name: 🏗️ Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: false
          load: true
          tags: ${{ matrix.image_name }}:${{ github.sha }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # ===== STAGE 3: Container Security (Dockle) =====
      - name: 🛡️ Dockle - Container Security Scan
        uses: erzz/dockle-action@v1
        with:
          image: ${{ matrix.image_name }}:${{ github.sha }}
          exit-code: '0'  # Don't fail, just report
          exit-level: warn
          report-format: sarif
          report-name: dockle-${{ matrix.service }}

      - name: 📤 Upload Dockle SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: dockle-${{ matrix.service }}.sarif
          category: dockle-${{ matrix.service }}

      # ===== STAGE 4: Vulnerability Scan (Trivy) =====
      - name: 🔎 Trivy - Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image_name }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # Report but don't fail on vulnerabilities
          ignore-unfixed: true

      - name: 📤 Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-${{ matrix.service }}.sarif
          category: trivy-${{ matrix.service }}

      - name: 🔎 Trivy - Critical CVE Check
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image_name }}:${{ github.sha }}
          format: 'table'
          severity: 'CRITICAL'
          exit-code: '1'  # Fail if CRITICAL vulnerabilities found
          ignore-unfixed: true

      # ===== STAGE 5: SBOM Generation (Syft) =====
      - name: 📋 Syft - Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ matrix.image_name }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom-${{ matrix.service }}.spdx.json

      - name: 📤 Upload SBOM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.service }}
          path: sbom-${{ matrix.service }}.spdx.json
          retention-days: 90

      # ===== STAGE 6: Additional Trivy Scans =====
      - name: 🔍 Trivy - Filesystem Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: ${{ matrix.context }}
          format: 'sarif'
          output: 'trivy-fs-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: 📤 Upload Trivy Filesystem SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-fs-${{ matrix.service }}.sarif
          category: trivy-fs-${{ matrix.service }}

  security-summary:
    runs-on: ubuntu-latest
    needs: security-scan
    if: always()

    steps:
      - name: 📊 Security Scan Summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All security scans completed for backend and frontend services." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Hadolint**: Dockerfile best practices and security" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Dockle**: Container image security checks" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Trivy**: CVE vulnerability scanning (image + filesystem)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Syft**: SBOM generation for supply chain security" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "📋 Check the **Security** tab for detailed findings" >> $GITHUB_STEP_SUMMARY
          echo "📦 SBOM artifacts available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review SARIF results in GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Download and verify SBOM artifacts" >> $GITHUB_STEP_SUMMARY
          echo "3. Address any CRITICAL vulnerabilities before merging" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Documentation**: [CI/CD Security Pipeline](../../docs/development/ci-cd-security.md)" >> $GITHUB_STEP_SUMMARY
