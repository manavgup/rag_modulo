name: PR - Fast Checks

on:
  pull_request:
    branches: [main]
    # Run for all PRs - this is our fast feedback loop
    # Container builds are handled separately in 03-build-secure.yml with path filters

# Cancel outdated workflow runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

env:
  # CI Environment Variables
  TESTING: true
  SKIP_AUTH: true
  DEVELOPMENT_MODE: true

jobs:
  # Quick lint check (30-60 seconds)
  lint:
    name: 🎨 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 📚 Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            backend/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: 📥 Install dependencies
        run: cd backend && poetry install --with dev,test --no-root

      - name: 🎨 Run Ruff (lint + format check)
        run: |
          cd backend
          poetry run ruff check rag_solution/ tests/ --line-length 120
          poetry run ruff format --check rag_solution/ tests/ --line-length 120

      - name: 🔍 Run MyPy (informational)
        continue-on-error: true
        run: cd backend && poetry run mypy rag_solution/ --ignore-missing-imports

  # Code-level security scans (30-45 seconds)
  code-security:
    name: 🔒 Code Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for secret scanning

      - name: 🔐 Gitleaks - Secret Scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔐 TruffleHog - Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified --fail

      - name: 🐍 Set up Python for Bandit
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 📦 Install Bandit
        run: pip install bandit[toml]

      - name: 🛡️ Bandit - Python Security Scan
        continue-on-error: true
        run: |
          cd backend
          bandit -r rag_solution/ -f json -o bandit-report.json || true
          bandit -r rag_solution/ -f screen

  # Fast unit tests without infrastructure (60-90 seconds)
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    env:
      # Minimal environment variables for unit tests
      JWT_SECRET_KEY: test-secret-key-for-ci
      RAG_LLM: openai
      WATSONX_INSTANCE_ID: test-instance-id
      WATSONX_APIKEY: test-api-key
      WATSONX_URL: https://test.watsonx.com
      VECTOR_DB: milvus
      MILVUS_HOST: milvus-standalone
      MILVUS_PORT: 19530
      EMBEDDING_MODEL: sentence-transformers/all-minilm-l6-v2
      DATA_DIR: /tmp/test-data
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 📚 Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            backend/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: 📥 Install dependencies
        run: cd backend && poetry install --with dev,test

      - name: 🧪 Run Unit Tests (fast - no containers)
        run: |
          cd backend
          poetry run pytest tests/ -m "unit or atomic" --tb=short -v --maxfail=5

      - name: 📊 Generate Coverage Report (informational)
        if: always()
        continue-on-error: true
        run: |
          cd backend
          poetry run pytest tests/ -m "unit or atomic" --cov=rag_solution --cov-report=term-missing --cov-report=html

  # Summary comment on PR
  pr-summary:
    name: 📝 PR Summary
    runs-on: ubuntu-latest
    needs: [lint, code-security, unit-tests]
    if: always()
    steps:
      - name: 📝 Post PR Summary
        uses: actions/github-script@v7
        with:
          script: |
            const lint = '${{ needs.lint.result }}';
            const security = '${{ needs.code-security.result }}';
            const tests = '${{ needs.unit-tests.result }}';

            const icon = (status) => {
              if (status === 'success') return '✅';
              if (status === 'failure') return '❌';
              return '⚠️';
            };

            const summary = `
            ## 🚀 Fast PR Checks Complete

            | Check | Status |
            |-------|--------|
            | 🎨 Code Quality | ${icon(lint)} ${lint} |
            | 🔒 Security Scans | ${icon(security)} ${security} |
            | 🧪 Unit Tests | ${icon(tests)} ${tests} |

            **Note**: Container builds and integration tests run only on merge to main or when Dockerfiles change.
            This keeps PR feedback fast (~2-3 minutes). ⚡

            See [CI/CD Strategy](https://github.com/manavgup/rag_modulo/blob/main/docs/development/ci-cd-security.md) for details.
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
