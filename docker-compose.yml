include:
  - path:
      - docker-compose-infra.yml

services:
  backend:
    image: rag_modulo/backend
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    networks:
      - app-network
    command: ["/entrypoint.sh"]
    working_dir: /app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      milvus-standalone:
        condition: service_started
    environment:
      - COLLECTIONDB_HOST=postgres
    env_file:
      - .env
    volumes:
      - /Users/mg/Downloads:/app/downloads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    image: rag_modulo/frontend
    build:
      context: ./webui
      dockerfile: Dockerfile.frontend
    networks:
      - app-network
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=/api
      - REACT_APP_OIDC_CLIENT_ID=${IBM_CLIENT_ID}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  test:
    image: rag_modulo/backend
    command: pytest -v -s
    volumes:
      - .:/app
      - /Users/mg/Downloads:/app/downloads
    networks:
      - app-network
    depends_on:
      - milvus-standalone
      - postgres
      - backend
    environment:
      - PYTHONPATH=/app
      - MILVUS_HOST=milvus-standalone
      - MILVUS_PORT=19530
      - COLLECTIONDB_HOST=postgres
      - COLLECTIONDB_PORT=5432
      - COLLECTIONDB_NAME=${COLLECTIONDB_NAME}
      - COLLECTIONDB_USER=${COLLECTIONDB_USER}
      - COLLECTIONDB_PASS=${COLLECTIONDB_PASS}
      - OIDC_DISCOVERY_ENDPOINT=${OIDC_DISCOVERY_ENDPOINT}
      - OIDC_AUTH_URL=${OIDC_AUTH_URL}
      - OIDC_TOKEN_URL=${OIDC_TOKEN_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - IBM_CLIENT_ID=${IBM_CLIENT_ID}
      - IBM_CLIENT_SECRET=${IBM_CLIENT_SECRET}
    env_file:
      - .env

volumes:
  postgres_data:
  etcd_data:
  minio_data:
  milvus_data:

networks:
  app-network:
    driver: bridge
