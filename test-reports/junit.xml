<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="246" failures="157" skipped="0" tests="539" time="596.315" timestamp="2025-01-19T03:52:01.511600" hostname="5a3b667b1625"><testcase classname="tests.api.test_api" name="test_health_check" time="0.687" /><testcase classname="tests.api.test_api" name="test_create_user" time="0.077"><failure message="AssertionError: User creation failed with status code 403&#10;assert 403 == 200&#10; +  where 403 = &lt;Response [403 Forbidden]&gt;.status_code">backend/tests/api/test_api.py:28: in test_create_user
    assert response.status_code == 200, f"User creation failed with status code {response.status_code}"
E   AssertionError: User creation failed with status code 403
E   assert 403 == 200
E    +  where 403 = &lt;Response [403 Forbidden]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_api" name="test_create_collection" time="0.030"><failure message="AssertionError: Collection creation failed with status code 404&#10;assert 404 == 200&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">backend/tests/api/test_api.py:43: in test_create_collection
    assert response.status_code == 200, f"Collection creation failed with status code {response.status_code}"
E   AssertionError: Collection creation failed with status code 404
E   assert 404 == 200
E    +  where 404 = &lt;Response [404 Not Found]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_api" name="test_upload_file" time="2.858"><failure message="AssertionError: File upload failed with status code 404&#10;assert 404 == 200&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">backend/tests/api/test_api.py:55: in test_upload_file
    assert response.status_code == 200, f"File upload failed with status code {response.status_code}"
E   AssertionError: File upload failed with status code 404
E   assert 404 == 200
E    +  where 404 = &lt;Response [404 Not Found]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_api" name="test_get_user_collections" time="0.034"><failure message="AssertionError: Get user collections failed with status code 404&#10;assert 404 == 200&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">backend/tests/api/test_api.py:64: in test_get_user_collections
    assert response.status_code == 200, f"Get user collections failed with status code {response.status_code}"
E   AssertionError: Get user collections failed with status code 404
E   assert 404 == 200
E    +  where 404 = &lt;Response [404 Not Found]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_api" name="test_unauthorized_access" time="0.034" /><testcase classname="tests.api.test_api" name="test_not_found" time="0.033"><failure message="AssertionError: Non-existent resource should return 404, got 401&#10;assert 401 == 404&#10; +  where 401 = &lt;Response [401 Unauthorized]&gt;.status_code">backend/tests/api/test_api.py:77: in test_not_found
    assert response.status_code == 404, f"Non-existent resource should return 404, got {response.status_code}"
E   AssertionError: Non-existent resource should return 404, got 401
E   assert 401 == 404
E    +  where 401 = &lt;Response [401 Unauthorized]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_api" name="test_get_user" time="0.034"><failure message="AssertionError: Get user failed with status code 404&#10;assert 404 == 200&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">backend/tests/api/test_api.py:81: in test_get_user
    assert response.status_code == 200, f"Get user failed with status code {response.status_code}"
E   AssertionError: Get user failed with status code 404
E   assert 404 == 200
E    +  where 404 = &lt;Response [404 Not Found]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_api" name="test_update_user" time="0.033"><failure message="AssertionError: Update user failed with status code 422&#10;assert 422 == 200&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">backend/tests/api/test_api.py:88: in test_update_user
    assert response.status_code == 200, f"Update user failed with status code {response.status_code}"
E   AssertionError: Update user failed with status code 422
E   assert 422 == 200
E    +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_api" name="test_delete_user" time="0.030"><failure message="AssertionError: User creation for deletion test failed with status code 403&#10;assert 403 == 200&#10; +  where 403 = &lt;Response [403 Forbidden]&gt;.status_code">backend/tests/api/test_api.py:99: in test_delete_user
    assert create_response.status_code == 200, f"User creation for deletion test failed with status code {create_response.status_code}"
E   AssertionError: User creation for deletion test failed with status code 403
E   assert 403 == 200
E    +  where 403 = &lt;Response [403 Forbidden]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_auth_router.TestOIDCConfig" name="test_get_oidc_config_success" time="0.549" /><testcase classname="tests.api.test_auth_router.TestTokenExchange" name="test_token_exchange_success" time="0.346"><failure message="assert 400 == 200&#10; +  where 400 = &lt;Response [400 Bad Request]&gt;.status_code">backend/tests/api/test_auth_router.py:77: in test_token_exchange_success
    assert response.status_code == 200
E   assert 400 == 200
E    +  where 400 = &lt;Response [400 Bad Request]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_auth_router.TestCallback" name="test_callback_success" time="0.064"><failure message="assert 404 == 307&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">backend/tests/api/test_auth_router.py:83: in test_callback_success
    assert response.status_code == 307
E   assert 404 == 307
E    +  where 404 = &lt;Response [404 Not Found]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_auth_router.TestCallback" name="test_callback_missing_userinfo" time="0.037"><failure message="assert 404 == 307&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">backend/tests/api/test_auth_router.py:97: in test_callback_missing_userinfo
    assert response.status_code == 307
E   assert 404 == 307
E    +  where 404 = &lt;Response [404 Not Found]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_auth_router.TestUserInfo" name="test_get_userinfo_success" time="0.032"><error message="failed on setup with &quot;sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;ix_users_ibm_id&quot;&#10;DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.&#10;&#10;[SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]&#10;[parameters: {'id': UUID('1eb1050c-3860-49e5-a921-59a2f7f965a3'), 'ibm_id': 'test-ibm-id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 52, 9, 521121), 'updated_at': datetime.datetime(2025, 1, 19, 3, 52, 9, 521122)}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/tests/api/test_auth_router.py:24: in test_user
    db_session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('1eb1050c-3860-49e5-a921-59a2f7f965a3'), 'ibm_id': 'test-ibm-id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 52, 9, 521121), 'updated_at': datetime.datetime(2025, 1, 19, 3, 52, 9, 521122)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</error></testcase><testcase classname="tests.api.test_auth_router.TestUserInfo" name="test_get_userinfo_invalid_token" time="0.033"><failure message="fastapi.exceptions.HTTPException: 401: Invalid authentication credentials">+ Exception Group Traceback (most recent call last):
  |   File "/app/.venv/lib/python3.12/site-packages/starlette/_utils.py", line 87, in collapse_excgroups
  |     yield
  |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 190, in __call__
  |     async with anyio.create_task_group() as task_group:
  |                ^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 815, in __aexit__
  |     raise BaseExceptionGroup(
  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 341, in from_call
    |     result: Optional[TResult] = func()
    |                                 ^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    |     lambda: ihook(item=item, **kwds), when=when, reraise=reraise
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    |     raise e
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    |     item.runtest()
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/python.py", line 1792, in runtest
    |     self.ihook.pytest_pyfunc_call(pyfuncitem=self)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    |     result = testfunction(**testargs)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/tests/api/test_auth_router.py", line 112, in test_get_userinfo_invalid_token
    |     response = client.get(
    |                ^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 523, in get
    |     return super().get(
    |            ^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 1054, in get
    |     return self.request(
    |            ^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 491, in request
    |     return super().request(
    |            ^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 827, in request
    |     return self.send(request, auth=auth, follow_redirects=follow_redirects)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 914, in send
    |     response = self._send_handling_auth(
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    |     response = self._send_handling_redirects(
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    |     response = self._send_single_request(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 1015, in _send_single_request
    |     response = transport.handle_request(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 372, in handle_request
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 369, in handle_request
    |     portal.call(self.app, scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/from_thread.py", line 290, in call
    |     return cast(T_Retval, self.start_task_soon(func, *args).result())
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/concurrent/futures/_base.py", line 456, in result
    |     return self.__get_result()
    |            ^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/concurrent/futures/_base.py", line 401, in __get_result
    |     raise self._exception
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/from_thread.py", line 221, in _call_func
    |     retval = await retval_or_awaitable
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    |     await super().__call__(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/applications.py", line 123, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/errors.py", line 186, in __call__
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/errors.py", line 164, in __call__
    |     await self.app(scope, receive, _send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 189, in __call__
    |     with collapse_excgroups():
    |          ^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/contextlib.py", line 158, in __exit__
    |     self.gen.throw(value)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_utils.py", line 93, in collapse_excgroups
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 191, in __call__
    |     response = await self.dispatch_func(request, call_next)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/core/authentication_middleware.py", line 27, in dispatch
    |     payload = verify_jwt_token(token)
    |               ^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/auth/oidc.py", line 29, in verify_jwt_token
    |     raise HTTPException(
    | fastapi.exceptions.HTTPException: 401: Invalid authentication credentials
    +------------------------------------

During handling of the above exception, another exception occurred:
backend/tests/api/test_auth_router.py:112: in test_get_userinfo_invalid_token
    response = client.get(
.venv/lib/python3.12/site-packages/starlette/testclient.py:523: in get
    return super().get(
.venv/lib/python3.12/site-packages/httpx/_client.py:1054: in get
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:491: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:827: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
.venv/lib/python3.12/site-packages/httpx/_client.py:914: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
.venv/lib/python3.12/site-packages/httpx/_client.py:1015: in _send_single_request
    response = transport.handle_request(request)
.venv/lib/python3.12/site-packages/starlette/testclient.py:372: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:369: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/usr/local/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/usr/local/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:123: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:186: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:164: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:189: in __call__
    with collapse_excgroups():
/usr/local/lib/python3.12/contextlib.py:158: in __exit__
    self.gen.throw(value)
.venv/lib/python3.12/site-packages/starlette/_utils.py:93: in collapse_excgroups
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:191: in __call__
    response = await self.dispatch_func(request, call_next)
backend/core/authentication_middleware.py:27: in dispatch
    payload = verify_jwt_token(token)
backend/auth/oidc.py:29: in verify_jwt_token
    raise HTTPException(
E   fastapi.exceptions.HTTPException: 401: Invalid authentication credentials</failure></testcase><testcase classname="tests.api.test_auth_router.TestSession" name="test_session_status_authenticated" time="0.033"><error message="failed on setup with &quot;sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;ix_users_ibm_id&quot;&#10;DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.&#10;&#10;[SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]&#10;[parameters: {'id': UUID('4bafed32-b62a-424d-88cc-449afa4e59d5'), 'ibm_id': 'test-ibm-id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 52, 10, 271284), 'updated_at': datetime.datetime(2025, 1, 19, 3, 52, 10, 271285)}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/tests/api/test_auth_router.py:24: in test_user
    db_session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('4bafed32-b62a-424d-88cc-449afa4e59d5'), 'ibm_id': 'test-ibm-id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 52, 10, 271284), 'updated_at': datetime.datetime(2025, 1, 19, 3, 52, 10, 271285)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</error></testcase><testcase classname="tests.api.test_auth_router.TestSession" name="test_session_status_no_auth" time="0.030"><failure message="assert 401 == 200&#10; +  where 401 = &lt;Response [401 Unauthorized]&gt;.status_code">backend/tests/api/test_auth_router.py:132: in test_session_status_no_auth
    assert response.status_code == 200
E   assert 401 == 200
E    +  where 401 = &lt;Response [401 Unauthorized]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_collection_router" name="test_create_collection" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/api/test_collection_router.py, line 14&#10;  def test_create_collection(client, collection_service, base_user, auth_headers):&#10;E       fixture 'client' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_collection_router.py:14&quot;">file /app/backend/tests/api/test_collection_router.py, line 14
  def test_create_collection(client, collection_service, base_user, auth_headers):
E       fixture 'client' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_collection_router.py:14</error></testcase><testcase classname="tests.api.test_collection_router" name="test_create_collection_with_documents" time="2.545" /><testcase classname="tests.api.test_collection_router" name="test_get_collection" time="0.045"><error message="failed on setup with &quot;file /app/backend/tests/api/test_collection_router.py, line 59&#10;  def test_get_collection(test_client, collection_service, test_collection, auth_headers):&#10;E       fixture 'test_collection' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_collection_router.py:59&quot;">file /app/backend/tests/api/test_collection_router.py, line 59
  def test_get_collection(test_client, collection_service, test_collection, auth_headers):
E       fixture 'test_collection' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_collection_router.py:59</error></testcase><testcase classname="tests.api.test_collection_router" name="test_delete_collection" time="2.974"><failure message="assert 200 == 204&#10; +  where 200 = &lt;Response [200 OK]&gt;.status_code">backend/tests/api/test_collection_router.py:90: in test_delete_collection
    assert response.status_code == 204
E   assert 200 == 204
E    +  where 200 = &lt;Response [200 OK]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_collection_router" name="test_create_collection_question" time="2.934"><failure message="assert 422 == 200&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">backend/tests/api/test_collection_router.py:109: in test_create_collection_question
    assert response.status_code == 200
E   assert 422 == 200
E    +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_collection_router" name="test_get_collection_questions" time="2.877"><error message="failed on setup with &quot;AttributeError: property 'is_valid' of 'SuggestedQuestion' object has no setter&quot;">backend/tests/conftest.py:237: in base_suggested_question
    question = SuggestedQuestion(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2180: in _declarative_constructor
    setattr(self, k, kwargs[k])
E   AttributeError: property 'is_valid' of 'SuggestedQuestion' object has no setter</error></testcase><testcase classname="tests.api.test_collection_router" name="test_delete_collection_question" time="2.882"><error message="failed on setup with &quot;AttributeError: property 'is_valid' of 'SuggestedQuestion' object has no setter&quot;">backend/tests/conftest.py:237: in base_suggested_question
    question = SuggestedQuestion(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2180: in _declarative_constructor
    setattr(self, k, kwargs[k])
E   AttributeError: property 'is_valid' of 'SuggestedQuestion' object has no setter</error></testcase><testcase classname="tests.api.test_collection_router" name="test_delete_all_collection_questions" time="3.120" /><testcase classname="tests.api.test_collection_router" name="test_create_llm_parameters" time="2.862"><failure message="assert 404 == 200&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">backend/tests/api/test_collection_router.py:185: in test_create_llm_parameters
    assert response.status_code == 200
E   assert 404 == 200
E    +  where 404 = &lt;Response [404 Not Found]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_collection_router" name="test_get_llm_parameters" time="3.121"><failure message="assert 404 == 200&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">backend/tests/api/test_collection_router.py:203: in test_get_llm_parameters
    assert response.status_code == 200
E   assert 404 == 200
E    +  where 404 = &lt;Response [404 Not Found]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_collection_router" name="test_delete_llm_parameters" time="2.878"><failure message="assert 404 == 204&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">backend/tests/api/test_collection_router.py:222: in test_delete_llm_parameters
    assert response.status_code == 204
E   assert 404 == 204
E    +  where 404 = &lt;Response [404 Not Found]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_collection_router" name="test_create_prompt_template" time="3.085"><failure message="assert 404 == 200&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">backend/tests/api/test_collection_router.py:254: in test_create_prompt_template
    assert response.status_code == 200
E   assert 404 == 200
E    +  where 404 = &lt;Response [404 Not Found]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_collection_router" name="test_get_prompt_template" time="2.922"><failure message="assert 404 == 200&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">backend/tests/api/test_collection_router.py:272: in test_get_prompt_template
    assert response.status_code == 200
E   assert 404 == 200
E    +  where 404 = &lt;Response [404 Not Found]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_collection_router" name="test_delete_prompt_template" time="2.923"><failure message="assert 404 == 204&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">backend/tests/api/test_collection_router.py:291: in test_delete_prompt_template
    assert response.status_code == 204
E   assert 404 == 204
E    +  where 404 = &lt;Response [404 Not Found]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_collection_router" name="test_get_collection_files" time="3.123"><failure message="assert 500 == 200&#10; +  where 500 = &lt;Response [500 Internal Server Error]&gt;.status_code">backend/tests/api/test_collection_router.py:305: in test_get_collection_files
    assert response.status_code == 200
E   assert 500 == 200
E    +  where 500 = &lt;Response [500 Internal Server Error]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_collection_router" name="test_get_file_path" time="2.927"><failure message="assert 405 == 200&#10; +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code">backend/tests/api/test_collection_router.py:326: in test_get_file_path
    assert upload_response.status_code == 200
E   assert 405 == 200
E    +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_collection_router" name="test_delete_files" time="2.865"><failure message="TypeError: TestClient.delete() got an unexpected keyword argument 'json'">backend/tests/api/test_collection_router.py:346: in test_delete_files
    response = test_client.delete(
E   TypeError: TestClient.delete() got an unexpected keyword argument 'json'</failure></testcase><testcase classname="tests.api.test_collection_router" name="test_update_file_metadata" time="3.121"><failure message="assert 405 == 200&#10; +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code">backend/tests/api/test_collection_router.py:371: in test_update_file_metadata
    assert upload_response.status_code == 200
E   assert 405 == 200
E    +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_health_router" name="test_health_check" time="0.043" /><testcase classname="tests.api.test_health_router" name="test_health_check_failure" time="0.042"><failure message="Exception: Vector DB connection failed">+ Exception Group Traceback (most recent call last):
  |   File "/app/.venv/lib/python3.12/site-packages/starlette/_utils.py", line 87, in collapse_excgroups
  |     yield
  |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 190, in __call__
  |     async with anyio.create_task_group() as task_group:
  |                ^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 815, in __aexit__
  |     raise BaseExceptionGroup(
  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 341, in from_call
    |     result: Optional[TResult] = func()
    |                                 ^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    |     lambda: ihook(item=item, **kwds), when=when, reraise=reraise
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    |     raise e
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    |     item.runtest()
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/python.py", line 1792, in runtest
    |     self.ihook.pytest_pyfunc_call(pyfuncitem=self)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    |     result = testfunction(**testargs)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/tests/api/test_health_router.py", line 44, in test_health_check_failure
    |     response = test_client.get("/api/health", headers=auth_headers)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 523, in get
    |     return super().get(
    |            ^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 1054, in get
    |     return self.request(
    |            ^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 491, in request
    |     return super().request(
    |            ^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 827, in request
    |     return self.send(request, auth=auth, follow_redirects=follow_redirects)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 914, in send
    |     response = self._send_handling_auth(
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    |     response = self._send_handling_redirects(
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    |     response = self._send_single_request(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 1015, in _send_single_request
    |     response = transport.handle_request(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 372, in handle_request
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 369, in handle_request
    |     portal.call(self.app, scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/from_thread.py", line 290, in call
    |     return cast(T_Retval, self.start_task_soon(func, *args).result())
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/concurrent/futures/_base.py", line 456, in result
    |     return self.__get_result()
    |            ^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/concurrent/futures/_base.py", line 401, in __get_result
    |     raise self._exception
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/from_thread.py", line 221, in _call_func
    |     retval = await retval_or_awaitable
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    |     await super().__call__(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/applications.py", line 123, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/errors.py", line 186, in __call__
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/errors.py", line 164, in __call__
    |     await self.app(scope, receive, _send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 189, in __call__
    |     with collapse_excgroups():
    |          ^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/contextlib.py", line 158, in __exit__
    |     self.gen.throw(value)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_utils.py", line 93, in collapse_excgroups
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 191, in __call__
    |     response = await self.dispatch_func(request, call_next)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/core/authentication_middleware.py", line 53, in dispatch
    |     response = await call_next(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 165, in call_next
    |     raise app_exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 151, in coro
    |     await self.app(scope, receive_or_disconnect, send_no_error)
    |   File "/app/backend/core/loggingcors_middleware.py", line 15, in __call__
    |     response = await super().__call__(scope, receive, send)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/cors.py", line 83, in __call__
    |     await self.app(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py", line 83, in __call__
    |     await self.app(scope, receive, send_wrapper)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    |     await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 64, in wrapped_app
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    |     await app(scope, receive, sender)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 758, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 778, in app
    |     await route.handle(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 299, in handle
    |     await self.app(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 79, in app
    |     await wrap_app_handling_exceptions(app, request)(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 64, in wrapped_app
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    |     await app(scope, receive, sender)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 74, in app
    |     response = await func(request)
    |                ^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 334, in app
    |     raise exception_to_reraise
    |   File "/app/backend/rag_solution/file_management/database.py", line 58, in get_db
    |     yield db
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/concurrency.py", line 27, in contextmanager_in_threadpool
    |     yield await run_in_threadpool(cm.__enter__)
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 299, in app
    |     raise e
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 294, in app
    |     raw_response = await run_endpoint_function(
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 193, in run_endpoint_function
    |     return await run_in_threadpool(dependant.call, **values)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/concurrency.py", line 42, in run_in_threadpool
    |     return await anyio.to_thread.run_sync(func, *args)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/to_thread.py", line 56, in run_sync
    |     return await get_async_backend().run_sync_in_worker_thread(
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 2505, in run_sync_in_worker_thread
    |     return await future
    |            ^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1005, in run
    |     result = context.run(func, *args)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/rag_solution/router/health_router.py", line 118, in health_check
    |     milvus_health = check_vectordb()
    |                     ^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1139, in __call__
    |     return self._mock_call(*args, **kwargs)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1143, in _mock_call
    |     return self._execute_mock_call(*args, **kwargs)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1198, in _execute_mock_call
    |     raise effect
    | Exception: Vector DB connection failed
    +------------------------------------

During handling of the above exception, another exception occurred:
backend/tests/api/test_health_router.py:44: in test_health_check_failure
    response = test_client.get("/api/health", headers=auth_headers)
.venv/lib/python3.12/site-packages/starlette/testclient.py:523: in get
    return super().get(
.venv/lib/python3.12/site-packages/httpx/_client.py:1054: in get
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:491: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:827: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
.venv/lib/python3.12/site-packages/httpx/_client.py:914: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
.venv/lib/python3.12/site-packages/httpx/_client.py:1015: in _send_single_request
    response = transport.handle_request(request)
.venv/lib/python3.12/site-packages/starlette/testclient.py:372: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:369: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/usr/local/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/usr/local/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:123: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:186: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:164: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:189: in __call__
    with collapse_excgroups():
/usr/local/lib/python3.12/contextlib.py:158: in __exit__
    self.gen.throw(value)
.venv/lib/python3.12/site-packages/starlette/_utils.py:93: in collapse_excgroups
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:191: in __call__
    response = await self.dispatch_func(request, call_next)
backend/core/authentication_middleware.py:53: in dispatch
    response = await call_next(request)
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:165: in call_next
    raise app_exc
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:151: in coro
    await self.app(scope, receive_or_disconnect, send_no_error)
backend/core/loggingcors_middleware.py:15: in __call__
    response = await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:83: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:83: in __call__
    await self.app(scope, receive, send_wrapper)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:64: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:758: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:778: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:299: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:79: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:64: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:74: in app
    response = await func(request)
.venv/lib/python3.12/site-packages/fastapi/routing.py:334: in app
    raise exception_to_reraise
backend/rag_solution/file_management/database.py:58: in get_db
    yield db
.venv/lib/python3.12/site-packages/fastapi/concurrency.py:27: in contextmanager_in_threadpool
    yield await run_in_threadpool(cm.__enter__)
.venv/lib/python3.12/site-packages/fastapi/routing.py:299: in app
    raise e
.venv/lib/python3.12/site-packages/fastapi/routing.py:294: in app
    raw_response = await run_endpoint_function(
.venv/lib/python3.12/site-packages/fastapi/routing.py:193: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
.venv/lib/python3.12/site-packages/starlette/concurrency.py:42: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2505: in run_sync_in_worker_thread
    return await future
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:1005: in run
    result = context.run(func, *args)
backend/rag_solution/router/health_router.py:118: in health_check
    milvus_health = check_vectordb()
/usr/local/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
/usr/local/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
/usr/local/lib/python3.12/unittest/mock.py:1198: in _execute_mock_call
    raise effect
E   Exception: Vector DB connection failed</failure></testcase><testcase classname="tests.api.test_health_router" name="test_check_vectordb" time="0.034" /><testcase classname="tests.api.test_health_router" name="test_check_datastore" time="0.033" /><testcase classname="tests.api.test_health_router" name="test_check_watsonx" time="0.031" /><testcase classname="tests.api.test_health_router" name="test_check_file_system" time="0.031" /><testcase classname="tests.api.test_health_router" name="test_multiple_component_failures" time="0.036"><failure message="Exception: Vector DB connection failed">+ Exception Group Traceback (most recent call last):
  |   File "/app/.venv/lib/python3.12/site-packages/starlette/_utils.py", line 87, in collapse_excgroups
  |     yield
  |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 190, in __call__
  |     async with anyio.create_task_group() as task_group:
  |                ^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 815, in __aexit__
  |     raise BaseExceptionGroup(
  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 341, in from_call
    |     result: Optional[TResult] = func()
    |                                 ^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    |     lambda: ihook(item=item, **kwds), when=when, reraise=reraise
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    |     raise e
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    |     item.runtest()
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/python.py", line 1792, in runtest
    |     self.ihook.pytest_pyfunc_call(pyfuncitem=self)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    |     result = testfunction(**testargs)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/tests/api/test_health_router.py", line 78, in test_multiple_component_failures
    |     response = test_client.get("/api/health", headers=auth_headers)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 523, in get
    |     return super().get(
    |            ^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 1054, in get
    |     return self.request(
    |            ^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 491, in request
    |     return super().request(
    |            ^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 827, in request
    |     return self.send(request, auth=auth, follow_redirects=follow_redirects)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 914, in send
    |     response = self._send_handling_auth(
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    |     response = self._send_handling_redirects(
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    |     response = self._send_single_request(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 1015, in _send_single_request
    |     response = transport.handle_request(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 372, in handle_request
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 369, in handle_request
    |     portal.call(self.app, scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/from_thread.py", line 290, in call
    |     return cast(T_Retval, self.start_task_soon(func, *args).result())
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/concurrent/futures/_base.py", line 456, in result
    |     return self.__get_result()
    |            ^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/concurrent/futures/_base.py", line 401, in __get_result
    |     raise self._exception
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/from_thread.py", line 221, in _call_func
    |     retval = await retval_or_awaitable
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    |     await super().__call__(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/applications.py", line 123, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/errors.py", line 186, in __call__
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/errors.py", line 164, in __call__
    |     await self.app(scope, receive, _send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 189, in __call__
    |     with collapse_excgroups():
    |          ^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/contextlib.py", line 158, in __exit__
    |     self.gen.throw(value)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_utils.py", line 93, in collapse_excgroups
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 191, in __call__
    |     response = await self.dispatch_func(request, call_next)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/core/authentication_middleware.py", line 53, in dispatch
    |     response = await call_next(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 165, in call_next
    |     raise app_exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 151, in coro
    |     await self.app(scope, receive_or_disconnect, send_no_error)
    |   File "/app/backend/core/loggingcors_middleware.py", line 15, in __call__
    |     response = await super().__call__(scope, receive, send)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/cors.py", line 83, in __call__
    |     await self.app(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py", line 83, in __call__
    |     await self.app(scope, receive, send_wrapper)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    |     await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 64, in wrapped_app
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    |     await app(scope, receive, sender)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 758, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 778, in app
    |     await route.handle(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 299, in handle
    |     await self.app(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 79, in app
    |     await wrap_app_handling_exceptions(app, request)(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 64, in wrapped_app
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    |     await app(scope, receive, sender)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 74, in app
    |     response = await func(request)
    |                ^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 334, in app
    |     raise exception_to_reraise
    |   File "/app/backend/rag_solution/file_management/database.py", line 58, in get_db
    |     yield db
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/concurrency.py", line 27, in contextmanager_in_threadpool
    |     yield await run_in_threadpool(cm.__enter__)
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 299, in app
    |     raise e
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 294, in app
    |     raw_response = await run_endpoint_function(
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 193, in run_endpoint_function
    |     return await run_in_threadpool(dependant.call, **values)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/concurrency.py", line 42, in run_in_threadpool
    |     return await anyio.to_thread.run_sync(func, *args)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/to_thread.py", line 56, in run_sync
    |     return await get_async_backend().run_sync_in_worker_thread(
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 2505, in run_sync_in_worker_thread
    |     return await future
    |            ^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1005, in run
    |     result = context.run(func, *args)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/rag_solution/router/health_router.py", line 118, in health_check
    |     milvus_health = check_vectordb()
    |                     ^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1139, in __call__
    |     return self._mock_call(*args, **kwargs)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1143, in _mock_call
    |     return self._execute_mock_call(*args, **kwargs)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1198, in _execute_mock_call
    |     raise effect
    | Exception: Vector DB connection failed
    +------------------------------------

During handling of the above exception, another exception occurred:
backend/tests/api/test_health_router.py:78: in test_multiple_component_failures
    response = test_client.get("/api/health", headers=auth_headers)
.venv/lib/python3.12/site-packages/starlette/testclient.py:523: in get
    return super().get(
.venv/lib/python3.12/site-packages/httpx/_client.py:1054: in get
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:491: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:827: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
.venv/lib/python3.12/site-packages/httpx/_client.py:914: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
.venv/lib/python3.12/site-packages/httpx/_client.py:1015: in _send_single_request
    response = transport.handle_request(request)
.venv/lib/python3.12/site-packages/starlette/testclient.py:372: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:369: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/usr/local/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/usr/local/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:123: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:186: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:164: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:189: in __call__
    with collapse_excgroups():
/usr/local/lib/python3.12/contextlib.py:158: in __exit__
    self.gen.throw(value)
.venv/lib/python3.12/site-packages/starlette/_utils.py:93: in collapse_excgroups
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:191: in __call__
    response = await self.dispatch_func(request, call_next)
backend/core/authentication_middleware.py:53: in dispatch
    response = await call_next(request)
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:165: in call_next
    raise app_exc
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:151: in coro
    await self.app(scope, receive_or_disconnect, send_no_error)
backend/core/loggingcors_middleware.py:15: in __call__
    response = await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:83: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:83: in __call__
    await self.app(scope, receive, send_wrapper)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:64: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:758: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:778: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:299: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:79: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:64: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:74: in app
    response = await func(request)
.venv/lib/python3.12/site-packages/fastapi/routing.py:334: in app
    raise exception_to_reraise
backend/rag_solution/file_management/database.py:58: in get_db
    yield db
.venv/lib/python3.12/site-packages/fastapi/concurrency.py:27: in contextmanager_in_threadpool
    yield await run_in_threadpool(cm.__enter__)
.venv/lib/python3.12/site-packages/fastapi/routing.py:299: in app
    raise e
.venv/lib/python3.12/site-packages/fastapi/routing.py:294: in app
    raw_response = await run_endpoint_function(
.venv/lib/python3.12/site-packages/fastapi/routing.py:193: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
.venv/lib/python3.12/site-packages/starlette/concurrency.py:42: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2505: in run_sync_in_worker_thread
    return await future
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:1005: in run
    result = context.run(func, *args)
backend/rag_solution/router/health_router.py:118: in health_check
    milvus_health = check_vectordb()
/usr/local/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
/usr/local/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
/usr/local/lib/python3.12/unittest/mock.py:1198: in _execute_mock_call
    raise effect
E   Exception: Vector DB connection failed</failure></testcase><testcase classname="tests.api.test_health_router" name="test_watsonx_not_configured" time="0.042" /><testcase classname="tests.api.test_health_router" name="test_file_system_permission_error" time="0.038"><failure message="Exception: Permission denied">+ Exception Group Traceback (most recent call last):
  |   File "/app/.venv/lib/python3.12/site-packages/starlette/_utils.py", line 87, in collapse_excgroups
  |     yield
  |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 190, in __call__
  |     async with anyio.create_task_group() as task_group:
  |                ^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 815, in __aexit__
  |     raise BaseExceptionGroup(
  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 341, in from_call
    |     result: Optional[TResult] = func()
    |                                 ^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    |     lambda: ihook(item=item, **kwds), when=when, reraise=reraise
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    |     raise e
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    |     item.runtest()
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/python.py", line 1792, in runtest
    |     self.ihook.pytest_pyfunc_call(pyfuncitem=self)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    |     result = testfunction(**testargs)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/tests/api/test_health_router.py", line 97, in test_file_system_permission_error
    |     response = test_client.get("/api/health", headers=auth_headers)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 523, in get
    |     return super().get(
    |            ^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 1054, in get
    |     return self.request(
    |            ^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 491, in request
    |     return super().request(
    |            ^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 827, in request
    |     return self.send(request, auth=auth, follow_redirects=follow_redirects)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 914, in send
    |     response = self._send_handling_auth(
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    |     response = self._send_handling_redirects(
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    |     response = self._send_single_request(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 1015, in _send_single_request
    |     response = transport.handle_request(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 372, in handle_request
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 369, in handle_request
    |     portal.call(self.app, scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/from_thread.py", line 290, in call
    |     return cast(T_Retval, self.start_task_soon(func, *args).result())
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/concurrent/futures/_base.py", line 456, in result
    |     return self.__get_result()
    |            ^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/concurrent/futures/_base.py", line 401, in __get_result
    |     raise self._exception
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/from_thread.py", line 221, in _call_func
    |     retval = await retval_or_awaitable
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    |     await super().__call__(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/applications.py", line 123, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/errors.py", line 186, in __call__
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/errors.py", line 164, in __call__
    |     await self.app(scope, receive, _send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 189, in __call__
    |     with collapse_excgroups():
    |          ^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/contextlib.py", line 158, in __exit__
    |     self.gen.throw(value)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_utils.py", line 93, in collapse_excgroups
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 191, in __call__
    |     response = await self.dispatch_func(request, call_next)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/core/authentication_middleware.py", line 53, in dispatch
    |     response = await call_next(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 165, in call_next
    |     raise app_exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 151, in coro
    |     await self.app(scope, receive_or_disconnect, send_no_error)
    |   File "/app/backend/core/loggingcors_middleware.py", line 15, in __call__
    |     response = await super().__call__(scope, receive, send)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/cors.py", line 83, in __call__
    |     await self.app(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py", line 83, in __call__
    |     await self.app(scope, receive, send_wrapper)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    |     await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 64, in wrapped_app
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    |     await app(scope, receive, sender)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 758, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 778, in app
    |     await route.handle(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 299, in handle
    |     await self.app(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 79, in app
    |     await wrap_app_handling_exceptions(app, request)(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 64, in wrapped_app
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    |     await app(scope, receive, sender)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 74, in app
    |     response = await func(request)
    |                ^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 334, in app
    |     raise exception_to_reraise
    |   File "/app/backend/rag_solution/file_management/database.py", line 58, in get_db
    |     yield db
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/concurrency.py", line 27, in contextmanager_in_threadpool
    |     yield await run_in_threadpool(cm.__enter__)
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 299, in app
    |     raise e
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 294, in app
    |     raw_response = await run_endpoint_function(
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 193, in run_endpoint_function
    |     return await run_in_threadpool(dependant.call, **values)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/concurrency.py", line 42, in run_in_threadpool
    |     return await anyio.to_thread.run_sync(func, *args)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/to_thread.py", line 56, in run_sync
    |     return await get_async_backend().run_sync_in_worker_thread(
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 2505, in run_sync_in_worker_thread
    |     return await future
    |            ^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1005, in run
    |     result = context.run(func, *args)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/rag_solution/router/health_router.py", line 121, in health_check
    |     file_system_health = check_file_system()
    |                          ^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1139, in __call__
    |     return self._mock_call(*args, **kwargs)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1143, in _mock_call
    |     return self._execute_mock_call(*args, **kwargs)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1198, in _execute_mock_call
    |     raise effect
    | Exception: Permission denied
    +------------------------------------

During handling of the above exception, another exception occurred:
backend/tests/api/test_health_router.py:97: in test_file_system_permission_error
    response = test_client.get("/api/health", headers=auth_headers)
.venv/lib/python3.12/site-packages/starlette/testclient.py:523: in get
    return super().get(
.venv/lib/python3.12/site-packages/httpx/_client.py:1054: in get
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:491: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:827: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
.venv/lib/python3.12/site-packages/httpx/_client.py:914: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
.venv/lib/python3.12/site-packages/httpx/_client.py:1015: in _send_single_request
    response = transport.handle_request(request)
.venv/lib/python3.12/site-packages/starlette/testclient.py:372: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:369: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/usr/local/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/usr/local/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:123: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:186: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:164: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:189: in __call__
    with collapse_excgroups():
/usr/local/lib/python3.12/contextlib.py:158: in __exit__
    self.gen.throw(value)
.venv/lib/python3.12/site-packages/starlette/_utils.py:93: in collapse_excgroups
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:191: in __call__
    response = await self.dispatch_func(request, call_next)
backend/core/authentication_middleware.py:53: in dispatch
    response = await call_next(request)
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:165: in call_next
    raise app_exc
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:151: in coro
    await self.app(scope, receive_or_disconnect, send_no_error)
backend/core/loggingcors_middleware.py:15: in __call__
    response = await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:83: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:83: in __call__
    await self.app(scope, receive, send_wrapper)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:64: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:758: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:778: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:299: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:79: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:64: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:74: in app
    response = await func(request)
.venv/lib/python3.12/site-packages/fastapi/routing.py:334: in app
    raise exception_to_reraise
backend/rag_solution/file_management/database.py:58: in get_db
    yield db
.venv/lib/python3.12/site-packages/fastapi/concurrency.py:27: in contextmanager_in_threadpool
    yield await run_in_threadpool(cm.__enter__)
.venv/lib/python3.12/site-packages/fastapi/routing.py:299: in app
    raise e
.venv/lib/python3.12/site-packages/fastapi/routing.py:294: in app
    raw_response = await run_endpoint_function(
.venv/lib/python3.12/site-packages/fastapi/routing.py:193: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
.venv/lib/python3.12/site-packages/starlette/concurrency.py:42: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2505: in run_sync_in_worker_thread
    return await future
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:1005: in run
    result = context.run(func, *args)
backend/rag_solution/router/health_router.py:121: in health_check
    file_system_health = check_file_system()
/usr/local/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
/usr/local/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
/usr/local/lib/python3.12/unittest/mock.py:1198: in _execute_mock_call
    raise effect
E   Exception: Permission denied</failure></testcase><testcase classname="tests.api.test_health_router" name="test_database_connection_error" time="0.033"><failure message="Exception: Connection refused">+ Exception Group Traceback (most recent call last):
  |   File "/app/.venv/lib/python3.12/site-packages/starlette/_utils.py", line 87, in collapse_excgroups
  |     yield
  |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 190, in __call__
  |     async with anyio.create_task_group() as task_group:
  |                ^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 815, in __aexit__
  |     raise BaseExceptionGroup(
  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 341, in from_call
    |     result: Optional[TResult] = func()
    |                                 ^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    |     lambda: ihook(item=item, **kwds), when=when, reraise=reraise
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    |     raise e
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    |     item.runtest()
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/python.py", line 1792, in runtest
    |     self.ihook.pytest_pyfunc_call(pyfuncitem=self)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    |     result = testfunction(**testargs)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/tests/api/test_health_router.py", line 106, in test_database_connection_error
    |     response = test_client.get("/api/health", headers=auth_headers)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 523, in get
    |     return super().get(
    |            ^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 1054, in get
    |     return self.request(
    |            ^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 491, in request
    |     return super().request(
    |            ^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 827, in request
    |     return self.send(request, auth=auth, follow_redirects=follow_redirects)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 914, in send
    |     response = self._send_handling_auth(
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    |     response = self._send_handling_redirects(
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    |     response = self._send_single_request(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 1015, in _send_single_request
    |     response = transport.handle_request(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 372, in handle_request
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 369, in handle_request
    |     portal.call(self.app, scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/from_thread.py", line 290, in call
    |     return cast(T_Retval, self.start_task_soon(func, *args).result())
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/concurrent/futures/_base.py", line 456, in result
    |     return self.__get_result()
    |            ^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/concurrent/futures/_base.py", line 401, in __get_result
    |     raise self._exception
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/from_thread.py", line 221, in _call_func
    |     retval = await retval_or_awaitable
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    |     await super().__call__(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/applications.py", line 123, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/errors.py", line 186, in __call__
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/errors.py", line 164, in __call__
    |     await self.app(scope, receive, _send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 189, in __call__
    |     with collapse_excgroups():
    |          ^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/contextlib.py", line 158, in __exit__
    |     self.gen.throw(value)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_utils.py", line 93, in collapse_excgroups
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 191, in __call__
    |     response = await self.dispatch_func(request, call_next)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/core/authentication_middleware.py", line 53, in dispatch
    |     response = await call_next(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 165, in call_next
    |     raise app_exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 151, in coro
    |     await self.app(scope, receive_or_disconnect, send_no_error)
    |   File "/app/backend/core/loggingcors_middleware.py", line 15, in __call__
    |     response = await super().__call__(scope, receive, send)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/cors.py", line 83, in __call__
    |     await self.app(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py", line 83, in __call__
    |     await self.app(scope, receive, send_wrapper)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    |     await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 64, in wrapped_app
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    |     await app(scope, receive, sender)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 758, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 778, in app
    |     await route.handle(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 299, in handle
    |     await self.app(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 79, in app
    |     await wrap_app_handling_exceptions(app, request)(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 64, in wrapped_app
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    |     await app(scope, receive, sender)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 74, in app
    |     response = await func(request)
    |                ^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 334, in app
    |     raise exception_to_reraise
    |   File "/app/backend/rag_solution/file_management/database.py", line 58, in get_db
    |     yield db
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/concurrency.py", line 27, in contextmanager_in_threadpool
    |     yield await run_in_threadpool(cm.__enter__)
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 299, in app
    |     raise e
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 294, in app
    |     raw_response = await run_endpoint_function(
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 193, in run_endpoint_function
    |     return await run_in_threadpool(dependant.call, **values)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/concurrency.py", line 42, in run_in_threadpool
    |     return await anyio.to_thread.run_sync(func, *args)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/to_thread.py", line 56, in run_sync
    |     return await get_async_backend().run_sync_in_worker_thread(
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 2505, in run_sync_in_worker_thread
    |     return await future
    |            ^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1005, in run
    |     result = context.run(func, *args)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/rag_solution/router/health_router.py", line 119, in health_check
    |     postgres_health = check_datastore(db)
    |                       ^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1139, in __call__
    |     return self._mock_call(*args, **kwargs)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1143, in _mock_call
    |     return self._execute_mock_call(*args, **kwargs)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1198, in _execute_mock_call
    |     raise effect
    | Exception: Connection refused
    +------------------------------------

During handling of the above exception, another exception occurred:
backend/tests/api/test_health_router.py:106: in test_database_connection_error
    response = test_client.get("/api/health", headers=auth_headers)
.venv/lib/python3.12/site-packages/starlette/testclient.py:523: in get
    return super().get(
.venv/lib/python3.12/site-packages/httpx/_client.py:1054: in get
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:491: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:827: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
.venv/lib/python3.12/site-packages/httpx/_client.py:914: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
.venv/lib/python3.12/site-packages/httpx/_client.py:1015: in _send_single_request
    response = transport.handle_request(request)
.venv/lib/python3.12/site-packages/starlette/testclient.py:372: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:369: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/usr/local/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/usr/local/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:123: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:186: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:164: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:189: in __call__
    with collapse_excgroups():
/usr/local/lib/python3.12/contextlib.py:158: in __exit__
    self.gen.throw(value)
.venv/lib/python3.12/site-packages/starlette/_utils.py:93: in collapse_excgroups
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:191: in __call__
    response = await self.dispatch_func(request, call_next)
backend/core/authentication_middleware.py:53: in dispatch
    response = await call_next(request)
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:165: in call_next
    raise app_exc
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:151: in coro
    await self.app(scope, receive_or_disconnect, send_no_error)
backend/core/loggingcors_middleware.py:15: in __call__
    response = await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:83: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:83: in __call__
    await self.app(scope, receive, send_wrapper)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:64: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:758: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:778: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:299: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:79: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:64: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:74: in app
    response = await func(request)
.venv/lib/python3.12/site-packages/fastapi/routing.py:334: in app
    raise exception_to_reraise
backend/rag_solution/file_management/database.py:58: in get_db
    yield db
.venv/lib/python3.12/site-packages/fastapi/concurrency.py:27: in contextmanager_in_threadpool
    yield await run_in_threadpool(cm.__enter__)
.venv/lib/python3.12/site-packages/fastapi/routing.py:299: in app
    raise e
.venv/lib/python3.12/site-packages/fastapi/routing.py:294: in app
    raw_response = await run_endpoint_function(
.venv/lib/python3.12/site-packages/fastapi/routing.py:193: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
.venv/lib/python3.12/site-packages/starlette/concurrency.py:42: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2505: in run_sync_in_worker_thread
    return await future
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:1005: in run
    result = context.run(func, *args)
backend/rag_solution/router/health_router.py:119: in health_check
    postgres_health = check_datastore(db)
/usr/local/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
/usr/local/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
/usr/local/lib/python3.12/unittest/mock.py:1198: in _execute_mock_call
    raise effect
E   Exception: Connection refused</failure></testcase><testcase classname="tests.api.test_health_router" name="test_vectordb_specific_error" time="0.036"><failure message="Exception: Invalid vector dimension">+ Exception Group Traceback (most recent call last):
  |   File "/app/.venv/lib/python3.12/site-packages/starlette/_utils.py", line 87, in collapse_excgroups
  |     yield
  |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 190, in __call__
  |     async with anyio.create_task_group() as task_group:
  |                ^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 815, in __aexit__
  |     raise BaseExceptionGroup(
  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 341, in from_call
    |     result: Optional[TResult] = func()
    |                                 ^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    |     lambda: ihook(item=item, **kwds), when=when, reraise=reraise
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    |     raise e
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    |     item.runtest()
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/python.py", line 1792, in runtest
    |     self.ihook.pytest_pyfunc_call(pyfuncitem=self)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    |     result = testfunction(**testargs)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/tests/api/test_health_router.py", line 115, in test_vectordb_specific_error
    |     response = test_client.get("/api/health", headers=auth_headers)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 523, in get
    |     return super().get(
    |            ^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 1054, in get
    |     return self.request(
    |            ^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 491, in request
    |     return super().request(
    |            ^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 827, in request
    |     return self.send(request, auth=auth, follow_redirects=follow_redirects)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 914, in send
    |     response = self._send_handling_auth(
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    |     response = self._send_handling_redirects(
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    |     response = self._send_single_request(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 1015, in _send_single_request
    |     response = transport.handle_request(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 372, in handle_request
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 369, in handle_request
    |     portal.call(self.app, scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/from_thread.py", line 290, in call
    |     return cast(T_Retval, self.start_task_soon(func, *args).result())
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/concurrent/futures/_base.py", line 456, in result
    |     return self.__get_result()
    |            ^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/concurrent/futures/_base.py", line 401, in __get_result
    |     raise self._exception
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/from_thread.py", line 221, in _call_func
    |     retval = await retval_or_awaitable
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    |     await super().__call__(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/applications.py", line 123, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/errors.py", line 186, in __call__
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/errors.py", line 164, in __call__
    |     await self.app(scope, receive, _send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 189, in __call__
    |     with collapse_excgroups():
    |          ^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/contextlib.py", line 158, in __exit__
    |     self.gen.throw(value)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_utils.py", line 93, in collapse_excgroups
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 191, in __call__
    |     response = await self.dispatch_func(request, call_next)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/core/authentication_middleware.py", line 53, in dispatch
    |     response = await call_next(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 165, in call_next
    |     raise app_exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 151, in coro
    |     await self.app(scope, receive_or_disconnect, send_no_error)
    |   File "/app/backend/core/loggingcors_middleware.py", line 15, in __call__
    |     response = await super().__call__(scope, receive, send)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/cors.py", line 83, in __call__
    |     await self.app(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py", line 83, in __call__
    |     await self.app(scope, receive, send_wrapper)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    |     await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 64, in wrapped_app
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    |     await app(scope, receive, sender)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 758, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 778, in app
    |     await route.handle(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 299, in handle
    |     await self.app(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 79, in app
    |     await wrap_app_handling_exceptions(app, request)(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 64, in wrapped_app
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    |     await app(scope, receive, sender)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 74, in app
    |     response = await func(request)
    |                ^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 334, in app
    |     raise exception_to_reraise
    |   File "/app/backend/rag_solution/file_management/database.py", line 58, in get_db
    |     yield db
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/concurrency.py", line 27, in contextmanager_in_threadpool
    |     yield await run_in_threadpool(cm.__enter__)
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 299, in app
    |     raise e
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 294, in app
    |     raw_response = await run_endpoint_function(
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 193, in run_endpoint_function
    |     return await run_in_threadpool(dependant.call, **values)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/concurrency.py", line 42, in run_in_threadpool
    |     return await anyio.to_thread.run_sync(func, *args)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/to_thread.py", line 56, in run_sync
    |     return await get_async_backend().run_sync_in_worker_thread(
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 2505, in run_sync_in_worker_thread
    |     return await future
    |            ^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1005, in run
    |     result = context.run(func, *args)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/rag_solution/router/health_router.py", line 118, in health_check
    |     milvus_health = check_vectordb()
    |                     ^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1139, in __call__
    |     return self._mock_call(*args, **kwargs)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1143, in _mock_call
    |     return self._execute_mock_call(*args, **kwargs)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1198, in _execute_mock_call
    |     raise effect
    | Exception: Invalid vector dimension
    +------------------------------------

During handling of the above exception, another exception occurred:
backend/tests/api/test_health_router.py:115: in test_vectordb_specific_error
    response = test_client.get("/api/health", headers=auth_headers)
.venv/lib/python3.12/site-packages/starlette/testclient.py:523: in get
    return super().get(
.venv/lib/python3.12/site-packages/httpx/_client.py:1054: in get
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:491: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:827: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
.venv/lib/python3.12/site-packages/httpx/_client.py:914: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
.venv/lib/python3.12/site-packages/httpx/_client.py:1015: in _send_single_request
    response = transport.handle_request(request)
.venv/lib/python3.12/site-packages/starlette/testclient.py:372: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:369: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/usr/local/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/usr/local/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:123: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:186: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:164: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:189: in __call__
    with collapse_excgroups():
/usr/local/lib/python3.12/contextlib.py:158: in __exit__
    self.gen.throw(value)
.venv/lib/python3.12/site-packages/starlette/_utils.py:93: in collapse_excgroups
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:191: in __call__
    response = await self.dispatch_func(request, call_next)
backend/core/authentication_middleware.py:53: in dispatch
    response = await call_next(request)
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:165: in call_next
    raise app_exc
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:151: in coro
    await self.app(scope, receive_or_disconnect, send_no_error)
backend/core/loggingcors_middleware.py:15: in __call__
    response = await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:83: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:83: in __call__
    await self.app(scope, receive, send_wrapper)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:64: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:758: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:778: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:299: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:79: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:64: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:74: in app
    response = await func(request)
.venv/lib/python3.12/site-packages/fastapi/routing.py:334: in app
    raise exception_to_reraise
backend/rag_solution/file_management/database.py:58: in get_db
    yield db
.venv/lib/python3.12/site-packages/fastapi/concurrency.py:27: in contextmanager_in_threadpool
    yield await run_in_threadpool(cm.__enter__)
.venv/lib/python3.12/site-packages/fastapi/routing.py:299: in app
    raise e
.venv/lib/python3.12/site-packages/fastapi/routing.py:294: in app
    raw_response = await run_endpoint_function(
.venv/lib/python3.12/site-packages/fastapi/routing.py:193: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
.venv/lib/python3.12/site-packages/starlette/concurrency.py:42: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2505: in run_sync_in_worker_thread
    return await future
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:1005: in run
    result = context.run(func, *args)
backend/rag_solution/router/health_router.py:118: in health_check
    milvus_health = check_vectordb()
/usr/local/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
/usr/local/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
/usr/local/lib/python3.12/unittest/mock.py:1198: in _execute_mock_call
    raise effect
E   Exception: Invalid vector dimension</failure></testcase><testcase classname="tests.api.test_health_router" name="test_partial_system_health" time="0.037"><failure message="Exception: Permission denied">+ Exception Group Traceback (most recent call last):
  |   File "/app/.venv/lib/python3.12/site-packages/starlette/_utils.py", line 87, in collapse_excgroups
  |     yield
  |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 190, in __call__
  |     async with anyio.create_task_group() as task_group:
  |                ^^^^^^^^^^^^^^^^^^^^^^^^^
  |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 815, in __aexit__
  |     raise BaseExceptionGroup(
  | ExceptionGroup: unhandled errors in a TaskGroup (1 sub-exception)
  +-+---------------- 1 ----------------
    | Traceback (most recent call last):
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 341, in from_call
    |     result: Optional[TResult] = func()
    |                                 ^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 262, in &lt;lambda&gt;
    |     lambda: ihook(item=item, **kwds), when=when, reraise=reraise
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 177, in pytest_runtest_call
    |     raise e
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/runner.py", line 169, in pytest_runtest_call
    |     item.runtest()
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/python.py", line 1792, in runtest
    |     self.ihook.pytest_pyfunc_call(pyfuncitem=self)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_hooks.py", line 513, in __call__
    |     return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_manager.py", line 120, in _hookexec
    |     return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 182, in _multicall
    |     return outcome.get_result()
    |            ^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_result.py", line 100, in get_result
    |     raise exc.with_traceback(exc.__traceback__)
    |   File "/app/.venv/lib/python3.12/site-packages/pluggy/_callers.py", line 103, in _multicall
    |     res = hook_impl.function(*args)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/_pytest/python.py", line 194, in pytest_pyfunc_call
    |     result = testfunction(**testargs)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/tests/api/test_health_router.py", line 127, in test_partial_system_health
    |     response = test_client.get("/api/health", headers=auth_headers)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 523, in get
    |     return super().get(
    |            ^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 1054, in get
    |     return self.request(
    |            ^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 491, in request
    |     return super().request(
    |            ^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 827, in request
    |     return self.send(request, auth=auth, follow_redirects=follow_redirects)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 914, in send
    |     response = self._send_handling_auth(
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 942, in _send_handling_auth
    |     response = self._send_handling_redirects(
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 979, in _send_handling_redirects
    |     response = self._send_single_request(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/httpx/_client.py", line 1015, in _send_single_request
    |     response = transport.handle_request(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 372, in handle_request
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/testclient.py", line 369, in handle_request
    |     portal.call(self.app, scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/from_thread.py", line 290, in call
    |     return cast(T_Retval, self.start_task_soon(func, *args).result())
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/concurrent/futures/_base.py", line 456, in result
    |     return self.__get_result()
    |            ^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/concurrent/futures/_base.py", line 401, in __get_result
    |     raise self._exception
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/from_thread.py", line 221, in _call_func
    |     retval = await retval_or_awaitable
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/applications.py", line 1054, in __call__
    |     await super().__call__(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/applications.py", line 123, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/errors.py", line 186, in __call__
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/errors.py", line 164, in __call__
    |     await self.app(scope, receive, _send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 189, in __call__
    |     with collapse_excgroups():
    |          ^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/contextlib.py", line 158, in __exit__
    |     self.gen.throw(value)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_utils.py", line 93, in collapse_excgroups
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 191, in __call__
    |     response = await self.dispatch_func(request, call_next)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/core/authentication_middleware.py", line 53, in dispatch
    |     response = await call_next(request)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 165, in call_next
    |     raise app_exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/base.py", line 151, in coro
    |     await self.app(scope, receive_or_disconnect, send_no_error)
    |   File "/app/backend/core/loggingcors_middleware.py", line 15, in __call__
    |     response = await super().__call__(scope, receive, send)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/cors.py", line 83, in __call__
    |     await self.app(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py", line 83, in __call__
    |     await self.app(scope, receive, send_wrapper)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    |     await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 64, in wrapped_app
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    |     await app(scope, receive, sender)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 758, in __call__
    |     await self.middleware_stack(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 778, in app
    |     await route.handle(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 299, in handle
    |     await self.app(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 79, in app
    |     await wrap_app_handling_exceptions(app, request)(scope, receive, send)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 64, in wrapped_app
    |     raise exc
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    |     await app(scope, receive, sender)
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/routing.py", line 74, in app
    |     response = await func(request)
    |                ^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 334, in app
    |     raise exception_to_reraise
    |   File "/app/backend/rag_solution/file_management/database.py", line 58, in get_db
    |     yield db
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/concurrency.py", line 27, in contextmanager_in_threadpool
    |     yield await run_in_threadpool(cm.__enter__)
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 299, in app
    |     raise e
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 294, in app
    |     raw_response = await run_endpoint_function(
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/fastapi/routing.py", line 193, in run_endpoint_function
    |     return await run_in_threadpool(dependant.call, **values)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/starlette/concurrency.py", line 42, in run_in_threadpool
    |     return await anyio.to_thread.run_sync(func, *args)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/to_thread.py", line 56, in run_sync
    |     return await get_async_backend().run_sync_in_worker_thread(
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 2505, in run_sync_in_worker_thread
    |     return await future
    |            ^^^^^^^^^^^^
    |   File "/app/.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py", line 1005, in run
    |     result = context.run(func, *args)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/app/backend/rag_solution/router/health_router.py", line 121, in health_check
    |     file_system_health = check_file_system()
    |                          ^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1139, in __call__
    |     return self._mock_call(*args, **kwargs)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1143, in _mock_call
    |     return self._execute_mock_call(*args, **kwargs)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |   File "/usr/local/lib/python3.12/unittest/mock.py", line 1198, in _execute_mock_call
    |     raise effect
    | Exception: Permission denied
    +------------------------------------

During handling of the above exception, another exception occurred:
backend/tests/api/test_health_router.py:127: in test_partial_system_health
    response = test_client.get("/api/health", headers=auth_headers)
.venv/lib/python3.12/site-packages/starlette/testclient.py:523: in get
    return super().get(
.venv/lib/python3.12/site-packages/httpx/_client.py:1054: in get
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:491: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:827: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
.venv/lib/python3.12/site-packages/httpx/_client.py:914: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
.venv/lib/python3.12/site-packages/httpx/_client.py:1015: in _send_single_request
    response = transport.handle_request(request)
.venv/lib/python3.12/site-packages/starlette/testclient.py:372: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:369: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
/usr/local/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
/usr/local/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:123: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:186: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:164: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:189: in __call__
    with collapse_excgroups():
/usr/local/lib/python3.12/contextlib.py:158: in __exit__
    self.gen.throw(value)
.venv/lib/python3.12/site-packages/starlette/_utils.py:93: in collapse_excgroups
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:191: in __call__
    response = await self.dispatch_func(request, call_next)
backend/core/authentication_middleware.py:53: in dispatch
    response = await call_next(request)
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:165: in call_next
    raise app_exc
.venv/lib/python3.12/site-packages/starlette/middleware/base.py:151: in coro
    await self.app(scope, receive_or_disconnect, send_no_error)
backend/core/loggingcors_middleware.py:15: in __call__
    response = await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:83: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:83: in __call__
    await self.app(scope, receive, send_wrapper)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:64: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:758: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:778: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:299: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:79: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:64: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:74: in app
    response = await func(request)
.venv/lib/python3.12/site-packages/fastapi/routing.py:334: in app
    raise exception_to_reraise
backend/rag_solution/file_management/database.py:58: in get_db
    yield db
.venv/lib/python3.12/site-packages/fastapi/concurrency.py:27: in contextmanager_in_threadpool
    yield await run_in_threadpool(cm.__enter__)
.venv/lib/python3.12/site-packages/fastapi/routing.py:299: in app
    raise e
.venv/lib/python3.12/site-packages/fastapi/routing.py:294: in app
    raw_response = await run_endpoint_function(
.venv/lib/python3.12/site-packages/fastapi/routing.py:193: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
.venv/lib/python3.12/site-packages/starlette/concurrency.py:42: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2505: in run_sync_in_worker_thread
    return await future
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:1005: in run
    result = context.run(func, *args)
backend/rag_solution/router/health_router.py:121: in health_check
    file_system_health = check_file_system()
/usr/local/lib/python3.12/unittest/mock.py:1139: in __call__
    return self._mock_call(*args, **kwargs)
/usr/local/lib/python3.12/unittest/mock.py:1143: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
/usr/local/lib/python3.12/unittest/mock.py:1198: in _execute_mock_call
    raise effect
E   Exception: Permission denied</failure></testcase><testcase classname="tests.api.test_health_router" name="test_health_check_with_empty_response" time="0.034"><failure message="assert 200 == 503&#10; +  where 200 = &lt;Response [200 OK]&gt;.status_code">backend/tests/api/test_health_router.py:138: in test_health_check_with_empty_response
    assert response.status_code == 503
E   assert 200 == 503
E    +  where 200 = &lt;Response [200 OK]&gt;.status_code</failure></testcase><testcase classname="tests.api.test_llm_parameters_router" name="test_get_llm_parameters" time="0.029"><error message="failed on setup with &quot;file /app/backend/tests/api/test_llm_parameters_router.py, line 97&#10;  @pytest.mark.asyncio&#10;  async def test_get_llm_parameters(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_llm_parameters_service,&#10;      mock_auth_user&#10;  ):&#10;      &quot;&quot;&quot;Test GET /api/users/{user_id}/llm-parameters endpoint.&quot;&quot;&quot;&#10;      # Mock auth user&#10;      mock_auth_user(TEST_USER_ID)&#10;&#10;      # Make request&#10;      response = await client.get(f&quot;/api/users/{TEST_USER_ID}/llm-parameters&quot;)&#10;&#10;      # Assert response&#10;      assert response.status_code == 200&#10;      data = response.json()&#10;      assert isinstance(data, list)&#10;      assert len(data) &gt; 0&#10;      assert data[0][&quot;id&quot;] == str(TEST_PARAMETER_ID)&#10;      assert data[0][&quot;user_id&quot;] == str(TEST_USER_ID)&#10;&#10;      # Verify service called&#10;      mock_llm_parameters_service.get_parameters.assert_called_once_with(&#10;          TEST_USER_ID&#10;      )&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_llm_parameters_router.py:97&quot;">file /app/backend/tests/api/test_llm_parameters_router.py, line 97
  @pytest.mark.asyncio
  async def test_get_llm_parameters(
      app: FastAPI,
      client: AsyncClient,
      mock_llm_parameters_service,
      mock_auth_user
  ):
      """Test GET /api/users/{user_id}/llm-parameters endpoint."""
      # Mock auth user
      mock_auth_user(TEST_USER_ID)

      # Make request
      response = await client.get(f"/api/users/{TEST_USER_ID}/llm-parameters")

      # Assert response
      assert response.status_code == 200
      data = response.json()
      assert isinstance(data, list)
      assert len(data) &gt; 0
      assert data[0]["id"] == str(TEST_PARAMETER_ID)
      assert data[0]["user_id"] == str(TEST_USER_ID)

      # Verify service called
      mock_llm_parameters_service.get_parameters.assert_called_once_with(
          TEST_USER_ID
      )
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_llm_parameters_router.py:97</error></testcase><testcase classname="tests.api.test_llm_parameters_router" name="test_create_llm_parameters" time="0.030"><error message="failed on setup with &quot;file /app/backend/tests/api/test_llm_parameters_router.py, line 124&#10;  @pytest.mark.asyncio&#10;  async def test_create_llm_parameters(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_llm_parameters_service,&#10;      mock_auth_user,&#10;      test_parameter_data&#10;  ):&#10;      &quot;&quot;&quot;Test POST /api/users/{user_id}/llm-parameters endpoint.&quot;&quot;&quot;&#10;      # Mock auth user&#10;      mock_auth_user(TEST_USER_ID)&#10;&#10;      # Make request&#10;      response = await client.post(&#10;          f&quot;/api/users/{TEST_USER_ID}/llm-parameters&quot;,&#10;          json=test_parameter_data&#10;      )&#10;&#10;      # Assert response&#10;      assert response.status_code == 201&#10;      data = response.json()&#10;      assert data[&quot;id&quot;] == str(TEST_PARAMETER_ID)&#10;      assert data[&quot;user_id&quot;] == str(TEST_USER_ID)&#10;&#10;      # Verify service called&#10;      mock_llm_parameters_service.create_parameters.assert_called_once()&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_llm_parameters_router.py:124&quot;">file /app/backend/tests/api/test_llm_parameters_router.py, line 124
  @pytest.mark.asyncio
  async def test_create_llm_parameters(
      app: FastAPI,
      client: AsyncClient,
      mock_llm_parameters_service,
      mock_auth_user,
      test_parameter_data
  ):
      """Test POST /api/users/{user_id}/llm-parameters endpoint."""
      # Mock auth user
      mock_auth_user(TEST_USER_ID)

      # Make request
      response = await client.post(
          f"/api/users/{TEST_USER_ID}/llm-parameters",
          json=test_parameter_data
      )

      # Assert response
      assert response.status_code == 201
      data = response.json()
      assert data["id"] == str(TEST_PARAMETER_ID)
      assert data["user_id"] == str(TEST_USER_ID)

      # Verify service called
      mock_llm_parameters_service.create_parameters.assert_called_once()
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_llm_parameters_router.py:124</error></testcase><testcase classname="tests.api.test_llm_parameters_router" name="test_update_llm_parameters" time="0.031"><error message="failed on setup with &quot;file /app/backend/tests/api/test_llm_parameters_router.py, line 151&#10;  @pytest.mark.asyncio&#10;  async def test_update_llm_parameters(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_llm_parameters_service,&#10;      mock_auth_user,&#10;      test_parameter_data&#10;  ):&#10;      &quot;&quot;&quot;Test PUT /api/users/{user_id}/llm-parameters/{parameter_id} endpoint.&quot;&quot;&quot;&#10;      # Mock auth user&#10;      mock_auth_user(TEST_USER_ID)&#10;&#10;      # Update data&#10;      test_parameter_data[&quot;name&quot;] = &quot;Updated Parameters&quot;&#10;      test_parameter_data[&quot;temperature&quot;] = 0.8&#10;&#10;      # Make request&#10;      response = await client.put(&#10;          f&quot;/api/users/{TEST_USER_ID}/llm-parameters/{TEST_PARAMETER_ID}&quot;,&#10;          json=test_parameter_data&#10;      )&#10;&#10;      # Assert response&#10;      assert response.status_code == 200&#10;      data = response.json()&#10;      assert data[&quot;id&quot;] == str(TEST_PARAMETER_ID)&#10;      assert data[&quot;name&quot;] == &quot;Updated Parameters&quot;&#10;      assert data[&quot;temperature&quot;] == 0.8&#10;&#10;      # Verify service called&#10;      mock_llm_parameters_service.update_parameters.assert_called_once()&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_llm_parameters_router.py:151&quot;">file /app/backend/tests/api/test_llm_parameters_router.py, line 151
  @pytest.mark.asyncio
  async def test_update_llm_parameters(
      app: FastAPI,
      client: AsyncClient,
      mock_llm_parameters_service,
      mock_auth_user,
      test_parameter_data
  ):
      """Test PUT /api/users/{user_id}/llm-parameters/{parameter_id} endpoint."""
      # Mock auth user
      mock_auth_user(TEST_USER_ID)

      # Update data
      test_parameter_data["name"] = "Updated Parameters"
      test_parameter_data["temperature"] = 0.8

      # Make request
      response = await client.put(
          f"/api/users/{TEST_USER_ID}/llm-parameters/{TEST_PARAMETER_ID}",
          json=test_parameter_data
      )

      # Assert response
      assert response.status_code == 200
      data = response.json()
      assert data["id"] == str(TEST_PARAMETER_ID)
      assert data["name"] == "Updated Parameters"
      assert data["temperature"] == 0.8

      # Verify service called
      mock_llm_parameters_service.update_parameters.assert_called_once()
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_llm_parameters_router.py:151</error></testcase><testcase classname="tests.api.test_llm_parameters_router" name="test_delete_llm_parameters" time="0.030"><error message="failed on setup with &quot;file /app/backend/tests/api/test_llm_parameters_router.py, line 183&#10;  @pytest.mark.asyncio&#10;  async def test_delete_llm_parameters(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_llm_parameters_service,&#10;      mock_auth_user&#10;  ):&#10;      &quot;&quot;&quot;Test DELETE /api/users/{user_id}/llm-parameters/{parameter_id} endpoint.&quot;&quot;&quot;&#10;      # Mock auth user&#10;      mock_auth_user(TEST_USER_ID)&#10;&#10;      # Make request&#10;      response = await client.delete(&#10;          f&quot;/api/users/{TEST_USER_ID}/llm-parameters/{TEST_PARAMETER_ID}&quot;&#10;      )&#10;&#10;      # Assert response&#10;      assert response.status_code == 200&#10;      assert response.json() is True&#10;&#10;      # Verify service called&#10;      mock_llm_parameters_service.delete_parameters.assert_called_once_with(&#10;          TEST_PARAMETER_ID&#10;      )&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_llm_parameters_router.py:183&quot;">file /app/backend/tests/api/test_llm_parameters_router.py, line 183
  @pytest.mark.asyncio
  async def test_delete_llm_parameters(
      app: FastAPI,
      client: AsyncClient,
      mock_llm_parameters_service,
      mock_auth_user
  ):
      """Test DELETE /api/users/{user_id}/llm-parameters/{parameter_id} endpoint."""
      # Mock auth user
      mock_auth_user(TEST_USER_ID)

      # Make request
      response = await client.delete(
          f"/api/users/{TEST_USER_ID}/llm-parameters/{TEST_PARAMETER_ID}"
      )

      # Assert response
      assert response.status_code == 200
      assert response.json() is True

      # Verify service called
      mock_llm_parameters_service.delete_parameters.assert_called_once_with(
          TEST_PARAMETER_ID
      )
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_llm_parameters_router.py:183</error></testcase><testcase classname="tests.api.test_llm_parameters_router" name="test_set_default_llm_parameters" time="0.029"><error message="failed on setup with &quot;file /app/backend/tests/api/test_llm_parameters_router.py, line 208&#10;  @pytest.mark.asyncio&#10;  async def test_set_default_llm_parameters(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_llm_parameters_service,&#10;      mock_auth_user&#10;  ):&#10;      &quot;&quot;&quot;Test PUT /api/users/{user_id}/llm-parameters/{parameter_id}/default endpoint.&quot;&quot;&quot;&#10;      # Mock auth user&#10;      mock_auth_user(TEST_USER_ID)&#10;&#10;      # Make request&#10;      response = await client.put(&#10;          f&quot;/api/users/{TEST_USER_ID}/llm-parameters/{TEST_PARAMETER_ID}/default&quot;&#10;      )&#10;&#10;      # Assert response&#10;      assert response.status_code == 200&#10;      data = response.json()&#10;      assert data[&quot;id&quot;] == str(TEST_PARAMETER_ID)&#10;      assert data[&quot;is_default&quot;] is True&#10;&#10;      # Verify service called&#10;      mock_llm_parameters_service.set_default_parameters.assert_called_once_with(&#10;          TEST_PARAMETER_ID&#10;      )&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_llm_parameters_router.py:208&quot;">file /app/backend/tests/api/test_llm_parameters_router.py, line 208
  @pytest.mark.asyncio
  async def test_set_default_llm_parameters(
      app: FastAPI,
      client: AsyncClient,
      mock_llm_parameters_service,
      mock_auth_user
  ):
      """Test PUT /api/users/{user_id}/llm-parameters/{parameter_id}/default endpoint."""
      # Mock auth user
      mock_auth_user(TEST_USER_ID)

      # Make request
      response = await client.put(
          f"/api/users/{TEST_USER_ID}/llm-parameters/{TEST_PARAMETER_ID}/default"
      )

      # Assert response
      assert response.status_code == 200
      data = response.json()
      assert data["id"] == str(TEST_PARAMETER_ID)
      assert data["is_default"] is True

      # Verify service called
      mock_llm_parameters_service.set_default_parameters.assert_called_once_with(
          TEST_PARAMETER_ID
      )
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_llm_parameters_router.py:208</error></testcase><testcase classname="tests.api.test_llm_parameters_router" name="test_get_llm_parameters_unauthorized" time="0.030"><error message="failed on setup with &quot;file /app/backend/tests/api/test_llm_parameters_router.py, line 235&#10;  @pytest.mark.asyncio&#10;  async def test_get_llm_parameters_unauthorized(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_llm_parameters_service&#10;  ):&#10;      &quot;&quot;&quot;Test unauthorized access to GET endpoint.&quot;&quot;&quot;&#10;      response = await client.get(f&quot;/api/users/{TEST_USER_ID}/llm-parameters&quot;)&#10;      assert response.status_code == 403&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_llm_parameters_router.py:235&quot;">file /app/backend/tests/api/test_llm_parameters_router.py, line 235
  @pytest.mark.asyncio
  async def test_get_llm_parameters_unauthorized(
      app: FastAPI,
      client: AsyncClient,
      mock_llm_parameters_service
  ):
      """Test unauthorized access to GET endpoint."""
      response = await client.get(f"/api/users/{TEST_USER_ID}/llm-parameters")
      assert response.status_code == 403
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_llm_parameters_router.py:235</error></testcase><testcase classname="tests.api.test_llm_parameters_router" name="test_get_llm_parameters_wrong_user" time="0.029"><error message="failed on setup with &quot;file /app/backend/tests/api/test_llm_parameters_router.py, line 245&#10;  @pytest.mark.asyncio&#10;  async def test_get_llm_parameters_wrong_user(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_llm_parameters_service,&#10;      mock_auth_user&#10;  ):&#10;      &quot;&quot;&quot;Test accessing parameters with wrong user ID.&quot;&quot;&quot;&#10;      # Mock auth user with different ID&#10;      different_user_id = uuid4()&#10;      mock_auth_user(different_user_id)&#10;&#10;      response = await client.get(f&quot;/api/users/{TEST_USER_ID}/llm-parameters&quot;)&#10;      assert response.status_code == 403&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_llm_parameters_router.py:245&quot;">file /app/backend/tests/api/test_llm_parameters_router.py, line 245
  @pytest.mark.asyncio
  async def test_get_llm_parameters_wrong_user(
      app: FastAPI,
      client: AsyncClient,
      mock_llm_parameters_service,
      mock_auth_user
  ):
      """Test accessing parameters with wrong user ID."""
      # Mock auth user with different ID
      different_user_id = uuid4()
      mock_auth_user(different_user_id)

      response = await client.get(f"/api/users/{TEST_USER_ID}/llm-parameters")
      assert response.status_code == 403
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_llm_parameters_router.py:245</error></testcase><testcase classname="tests.api.test_llm_parameters_router" name="test_create_llm_parameters_invalid_data" time="0.029"><error message="failed on setup with &quot;file /app/backend/tests/api/test_llm_parameters_router.py, line 260&#10;  @pytest.mark.asyncio&#10;  async def test_create_llm_parameters_invalid_data(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_llm_parameters_service,&#10;      mock_auth_user&#10;  ):&#10;      &quot;&quot;&quot;Test creating parameters with invalid data.&quot;&quot;&quot;&#10;      # Mock auth user&#10;      mock_auth_user(TEST_USER_ID)&#10;&#10;      # Invalid data (missing required fields)&#10;      invalid_data = {&#10;          &quot;name&quot;: &quot;Test Parameters&quot;&#10;      }&#10;&#10;      response = await client.post(&#10;          f&quot;/api/users/{TEST_USER_ID}/llm-parameters&quot;,&#10;          json=invalid_data&#10;      )&#10;      assert response.status_code == 422&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_llm_parameters_router.py:260&quot;">file /app/backend/tests/api/test_llm_parameters_router.py, line 260
  @pytest.mark.asyncio
  async def test_create_llm_parameters_invalid_data(
      app: FastAPI,
      client: AsyncClient,
      mock_llm_parameters_service,
      mock_auth_user
  ):
      """Test creating parameters with invalid data."""
      # Mock auth user
      mock_auth_user(TEST_USER_ID)

      # Invalid data (missing required fields)
      invalid_data = {
          "name": "Test Parameters"
      }

      response = await client.post(
          f"/api/users/{TEST_USER_ID}/llm-parameters",
          json=invalid_data
      )
      assert response.status_code == 422
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_llm_parameters_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_parameter_data, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_llm_parameters_router.py:260</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderRoutes" name="test_create_provider_success" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderRoutes" name="test_get_all_providers_success" time="0.008"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderRoutes" name="test_get_all_providers_with_filter" time="0.008"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderRoutes" name="test_get_provider_success" time="0.115"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderRoutes" name="test_get_provider_not_found" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderRoutes" name="test_update_provider_success" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderRoutes" name="test_update_provider_not_found" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderRoutes" name="test_delete_provider_success" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderRoutes" name="test_delete_provider_not_found" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderModelRoutes" name="test_create_model_success" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderModelRoutes" name="test_get_models_by_provider_success" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderModelRoutes" name="test_get_models_by_type_success" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderModelRoutes" name="test_get_model_by_id_success" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderModelRoutes" name="test_get_model_by_id_not_found" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderModelRoutes" name="test_update_model_success" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderModelRoutes" name="test_update_model_not_found" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderModelRoutes" name="test_delete_model_success" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderModelRoutes" name="test_delete_model_not_found" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderWithModels" name="test_get_provider_with_models_success" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_llm_provider_router.TestProviderWithModels" name="test_get_provider_with_models_not_found" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.api.test_prompt_templates_router" name="test_get_prompt_templates" time="0.032"><error message="failed on setup with &quot;file /app/backend/tests/api/test_prompt_templates_router.py, line 110&#10;  @pytest.mark.asyncio&#10;  async def test_get_prompt_templates(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_prompt_template_service,&#10;      mock_auth_user&#10;  ):&#10;      &quot;&quot;&quot;Test GET /api/users/{user_id}/prompt-templates endpoint.&quot;&quot;&quot;&#10;      # Mock auth user&#10;      mock_auth_user(TEST_USER_ID)&#10;&#10;      # Make request&#10;      response = await client.get(f&quot;/api/users/{TEST_USER_ID}/prompt-templates&quot;)&#10;&#10;      # Assert response&#10;      assert response.status_code == 200&#10;      data = response.json()&#10;      assert isinstance(data, list)&#10;      assert len(data) &gt; 0&#10;      assert data[0][&quot;id&quot;] == str(TEST_TEMPLATE_ID)&#10;      assert data[0][&quot;user_id&quot;] == str(TEST_USER_ID)&#10;&#10;      # Verify service called&#10;      mock_prompt_template_service.get_templates.assert_called_once_with(&#10;          TEST_USER_ID&#10;      )&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_prompt_templates_router.py:110&quot;">file /app/backend/tests/api/test_prompt_templates_router.py, line 110
  @pytest.mark.asyncio
  async def test_get_prompt_templates(
      app: FastAPI,
      client: AsyncClient,
      mock_prompt_template_service,
      mock_auth_user
  ):
      """Test GET /api/users/{user_id}/prompt-templates endpoint."""
      # Mock auth user
      mock_auth_user(TEST_USER_ID)

      # Make request
      response = await client.get(f"/api/users/{TEST_USER_ID}/prompt-templates")

      # Assert response
      assert response.status_code == 200
      data = response.json()
      assert isinstance(data, list)
      assert len(data) &gt; 0
      assert data[0]["id"] == str(TEST_TEMPLATE_ID)
      assert data[0]["user_id"] == str(TEST_USER_ID)

      # Verify service called
      mock_prompt_template_service.get_templates.assert_called_once_with(
          TEST_USER_ID
      )
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_prompt_templates_router.py:110</error></testcase><testcase classname="tests.api.test_prompt_templates_router" name="test_create_prompt_template" time="0.028"><error message="failed on setup with &quot;file /app/backend/tests/api/test_prompt_templates_router.py, line 137&#10;  @pytest.mark.asyncio&#10;  async def test_create_prompt_template(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_prompt_template_service,&#10;      mock_auth_user,&#10;      test_template_data&#10;  ):&#10;      &quot;&quot;&quot;Test POST /api/users/{user_id}/prompt-templates endpoint.&quot;&quot;&quot;&#10;      # Mock auth user&#10;      mock_auth_user(TEST_USER_ID)&#10;&#10;      # Make request&#10;      response = await client.post(&#10;          f&quot;/api/users/{TEST_USER_ID}/prompt-templates&quot;,&#10;          json=test_template_data&#10;      )&#10;&#10;      # Assert response&#10;      assert response.status_code == 201&#10;      data = response.json()&#10;      assert data[&quot;id&quot;] == str(TEST_TEMPLATE_ID)&#10;      assert data[&quot;user_id&quot;] == str(TEST_USER_ID)&#10;&#10;      # Verify service called&#10;      mock_prompt_template_service.create_template.assert_called_once()&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_prompt_templates_router.py:137&quot;">file /app/backend/tests/api/test_prompt_templates_router.py, line 137
  @pytest.mark.asyncio
  async def test_create_prompt_template(
      app: FastAPI,
      client: AsyncClient,
      mock_prompt_template_service,
      mock_auth_user,
      test_template_data
  ):
      """Test POST /api/users/{user_id}/prompt-templates endpoint."""
      # Mock auth user
      mock_auth_user(TEST_USER_ID)

      # Make request
      response = await client.post(
          f"/api/users/{TEST_USER_ID}/prompt-templates",
          json=test_template_data
      )

      # Assert response
      assert response.status_code == 201
      data = response.json()
      assert data["id"] == str(TEST_TEMPLATE_ID)
      assert data["user_id"] == str(TEST_USER_ID)

      # Verify service called
      mock_prompt_template_service.create_template.assert_called_once()
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_prompt_templates_router.py:137</error></testcase><testcase classname="tests.api.test_prompt_templates_router" name="test_update_prompt_template" time="0.035"><error message="failed on setup with &quot;file /app/backend/tests/api/test_prompt_templates_router.py, line 164&#10;  @pytest.mark.asyncio&#10;  async def test_update_prompt_template(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_prompt_template_service,&#10;      mock_auth_user,&#10;      test_template_data&#10;  ):&#10;      &quot;&quot;&quot;Test PUT /api/users/{user_id}/prompt-templates/{template_id} endpoint.&quot;&quot;&quot;&#10;      # Mock auth user&#10;      mock_auth_user(TEST_USER_ID)&#10;&#10;      # Update data&#10;      test_template_data[&quot;name&quot;] = &quot;Updated Template&quot;&#10;      test_template_data[&quot;description&quot;] = &quot;Updated description&quot;&#10;      test_template_data[&quot;input_variables&quot;] = [&quot;topic&quot;, &quot;aspect&quot;, &quot;depth&quot;]&#10;      test_template_data[&quot;template_format&quot;] = &quot;Explain {topic}, focusing on {aspect} with {depth} detail&quot;&#10;&#10;      # Make request&#10;      response = await client.put(&#10;          f&quot;/api/users/{TEST_USER_ID}/prompt-templates/{TEST_TEMPLATE_ID}&quot;,&#10;          json=test_template_data&#10;      )&#10;&#10;      # Assert response&#10;      assert response.status_code == 200&#10;      data = response.json()&#10;      assert data[&quot;id&quot;] == str(TEST_TEMPLATE_ID)&#10;      assert data[&quot;name&quot;] == &quot;Updated Template&quot;&#10;      assert data[&quot;description&quot;] == &quot;Updated description&quot;&#10;      assert &quot;depth&quot; in data[&quot;input_variables&quot;]&#10;&#10;      # Verify service called&#10;      mock_prompt_template_service.update_template.assert_called_once()&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_prompt_templates_router.py:164&quot;">file /app/backend/tests/api/test_prompt_templates_router.py, line 164
  @pytest.mark.asyncio
  async def test_update_prompt_template(
      app: FastAPI,
      client: AsyncClient,
      mock_prompt_template_service,
      mock_auth_user,
      test_template_data
  ):
      """Test PUT /api/users/{user_id}/prompt-templates/{template_id} endpoint."""
      # Mock auth user
      mock_auth_user(TEST_USER_ID)

      # Update data
      test_template_data["name"] = "Updated Template"
      test_template_data["description"] = "Updated description"
      test_template_data["input_variables"] = ["topic", "aspect", "depth"]
      test_template_data["template_format"] = "Explain {topic}, focusing on {aspect} with {depth} detail"

      # Make request
      response = await client.put(
          f"/api/users/{TEST_USER_ID}/prompt-templates/{TEST_TEMPLATE_ID}",
          json=test_template_data
      )

      # Assert response
      assert response.status_code == 200
      data = response.json()
      assert data["id"] == str(TEST_TEMPLATE_ID)
      assert data["name"] == "Updated Template"
      assert data["description"] == "Updated description"
      assert "depth" in data["input_variables"]

      # Verify service called
      mock_prompt_template_service.update_template.assert_called_once()
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_prompt_templates_router.py:164</error></testcase><testcase classname="tests.api.test_prompt_templates_router" name="test_delete_prompt_template" time="0.030"><error message="failed on setup with &quot;file /app/backend/tests/api/test_prompt_templates_router.py, line 199&#10;  @pytest.mark.asyncio&#10;  async def test_delete_prompt_template(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_prompt_template_service,&#10;      mock_auth_user&#10;  ):&#10;      &quot;&quot;&quot;Test DELETE /api/users/{user_id}/prompt-templates/{template_id} endpoint.&quot;&quot;&quot;&#10;      # Mock auth user&#10;      mock_auth_user(TEST_USER_ID)&#10;&#10;      # Make request&#10;      response = await client.delete(&#10;          f&quot;/api/users/{TEST_USER_ID}/prompt-templates/{TEST_TEMPLATE_ID}&quot;&#10;      )&#10;&#10;      # Assert response&#10;      assert response.status_code == 200&#10;      assert response.json() is True&#10;&#10;      # Verify service called&#10;      mock_prompt_template_service.delete_template.assert_called_once_with(&#10;          TEST_TEMPLATE_ID&#10;      )&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_prompt_templates_router.py:199&quot;">file /app/backend/tests/api/test_prompt_templates_router.py, line 199
  @pytest.mark.asyncio
  async def test_delete_prompt_template(
      app: FastAPI,
      client: AsyncClient,
      mock_prompt_template_service,
      mock_auth_user
  ):
      """Test DELETE /api/users/{user_id}/prompt-templates/{template_id} endpoint."""
      # Mock auth user
      mock_auth_user(TEST_USER_ID)

      # Make request
      response = await client.delete(
          f"/api/users/{TEST_USER_ID}/prompt-templates/{TEST_TEMPLATE_ID}"
      )

      # Assert response
      assert response.status_code == 200
      assert response.json() is True

      # Verify service called
      mock_prompt_template_service.delete_template.assert_called_once_with(
          TEST_TEMPLATE_ID
      )
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_prompt_templates_router.py:199</error></testcase><testcase classname="tests.api.test_prompt_templates_router" name="test_set_default_prompt_template" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/api/test_prompt_templates_router.py, line 224&#10;  @pytest.mark.asyncio&#10;  async def test_set_default_prompt_template(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_prompt_template_service,&#10;      mock_auth_user&#10;  ):&#10;      &quot;&quot;&quot;Test PUT /api/users/{user_id}/prompt-templates/{template_id}/default endpoint.&quot;&quot;&quot;&#10;      # Mock auth user&#10;      mock_auth_user(TEST_USER_ID)&#10;&#10;      # Make request&#10;      response = await client.put(&#10;          f&quot;/api/users/{TEST_USER_ID}/prompt-templates/{TEST_TEMPLATE_ID}/default&quot;&#10;      )&#10;&#10;      # Assert response&#10;      assert response.status_code == 200&#10;      data = response.json()&#10;      assert data[&quot;id&quot;] == str(TEST_TEMPLATE_ID)&#10;      assert data[&quot;is_default&quot;] is True&#10;&#10;      # Verify service called&#10;      mock_prompt_template_service.set_default_template.assert_called_once_with(&#10;          TEST_TEMPLATE_ID&#10;      )&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_prompt_templates_router.py:224&quot;">file /app/backend/tests/api/test_prompt_templates_router.py, line 224
  @pytest.mark.asyncio
  async def test_set_default_prompt_template(
      app: FastAPI,
      client: AsyncClient,
      mock_prompt_template_service,
      mock_auth_user
  ):
      """Test PUT /api/users/{user_id}/prompt-templates/{template_id}/default endpoint."""
      # Mock auth user
      mock_auth_user(TEST_USER_ID)

      # Make request
      response = await client.put(
          f"/api/users/{TEST_USER_ID}/prompt-templates/{TEST_TEMPLATE_ID}/default"
      )

      # Assert response
      assert response.status_code == 200
      data = response.json()
      assert data["id"] == str(TEST_TEMPLATE_ID)
      assert data["is_default"] is True

      # Verify service called
      mock_prompt_template_service.set_default_template.assert_called_once_with(
          TEST_TEMPLATE_ID
      )
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_prompt_templates_router.py:224</error></testcase><testcase classname="tests.api.test_prompt_templates_router" name="test_get_prompt_templates_unauthorized" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/api/test_prompt_templates_router.py, line 251&#10;  @pytest.mark.asyncio&#10;  async def test_get_prompt_templates_unauthorized(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_prompt_template_service&#10;  ):&#10;      &quot;&quot;&quot;Test unauthorized access to GET endpoint.&quot;&quot;&quot;&#10;      response = await client.get(f&quot;/api/users/{TEST_USER_ID}/prompt-templates&quot;)&#10;      assert response.status_code == 403&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_prompt_templates_router.py:251&quot;">file /app/backend/tests/api/test_prompt_templates_router.py, line 251
  @pytest.mark.asyncio
  async def test_get_prompt_templates_unauthorized(
      app: FastAPI,
      client: AsyncClient,
      mock_prompt_template_service
  ):
      """Test unauthorized access to GET endpoint."""
      response = await client.get(f"/api/users/{TEST_USER_ID}/prompt-templates")
      assert response.status_code == 403
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_prompt_templates_router.py:251</error></testcase><testcase classname="tests.api.test_prompt_templates_router" name="test_get_prompt_templates_wrong_user" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/api/test_prompt_templates_router.py, line 261&#10;  @pytest.mark.asyncio&#10;  async def test_get_prompt_templates_wrong_user(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_prompt_template_service,&#10;      mock_auth_user&#10;  ):&#10;      &quot;&quot;&quot;Test accessing templates with wrong user ID.&quot;&quot;&quot;&#10;      # Mock auth user with different ID&#10;      different_user_id = uuid4()&#10;      mock_auth_user(different_user_id)&#10;&#10;      response = await client.get(f&quot;/api/users/{TEST_USER_ID}/prompt-templates&quot;)&#10;      assert response.status_code == 403&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_prompt_templates_router.py:261&quot;">file /app/backend/tests/api/test_prompt_templates_router.py, line 261
  @pytest.mark.asyncio
  async def test_get_prompt_templates_wrong_user(
      app: FastAPI,
      client: AsyncClient,
      mock_prompt_template_service,
      mock_auth_user
  ):
      """Test accessing templates with wrong user ID."""
      # Mock auth user with different ID
      different_user_id = uuid4()
      mock_auth_user(different_user_id)

      response = await client.get(f"/api/users/{TEST_USER_ID}/prompt-templates")
      assert response.status_code == 403
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_prompt_templates_router.py:261</error></testcase><testcase classname="tests.api.test_prompt_templates_router" name="test_create_prompt_template_invalid_data" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/api/test_prompt_templates_router.py, line 276&#10;  @pytest.mark.asyncio&#10;  async def test_create_prompt_template_invalid_data(&#10;      app: FastAPI,&#10;      client: AsyncClient,&#10;      mock_prompt_template_service,&#10;      mock_auth_user&#10;  ):&#10;      &quot;&quot;&quot;Test creating template with invalid data.&quot;&quot;&quot;&#10;      # Mock auth user&#10;      mock_auth_user(TEST_USER_ID)&#10;&#10;      # Invalid data (missing required fields)&#10;      invalid_data = {&#10;          &quot;name&quot;: &quot;Test Template&quot;&#10;      }&#10;&#10;      response = await client.post(&#10;          f&quot;/api/users/{TEST_USER_ID}/prompt-templates&quot;,&#10;          json=invalid_data&#10;      )&#10;      assert response.status_code == 422&#10;E       fixture 'app' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_prompt_templates_router.py:276&quot;">file /app/backend/tests/api/test_prompt_templates_router.py, line 276
  @pytest.mark.asyncio
  async def test_create_prompt_template_invalid_data(
      app: FastAPI,
      client: AsyncClient,
      mock_prompt_template_service,
      mock_auth_user
  ):
      """Test creating template with invalid data."""
      # Mock auth user
      mock_auth_user(TEST_USER_ID)

      # Invalid data (missing required fields)
      invalid_data = {
          "name": "Test Template"
      }

      response = await client.post(
          f"/api/users/{TEST_USER_ID}/prompt-templates",
          json=invalid_data
      )
      assert response.status_code == 422
E       fixture 'app' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_prompt_template_service, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, test_template_data, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_prompt_templates_router.py:276</error></testcase><testcase classname="tests.api.test_search_router" name="test_search_endpoint_success" time="0.024"><error message="failed on setup with &quot;file /app/backend/tests/api/test_search_router.py, line 127&#10;  @pytest.mark.asyncio&#10;  async def test_search_endpoint_success(&#10;      client: TestClient,&#10;      test_collection: Collection,&#10;      test_file: File,&#10;      test_config: dict&#10;  ):&#10;      &quot;&quot;&quot;Test successful search request.&quot;&quot;&quot;&#10;      # Create search input&#10;      search_input = {&#10;          &quot;question&quot;: &quot;What is the capital of France?&quot;,&#10;          &quot;collection_id&quot;: str(test_collection.id)&#10;      }&#10;&#10;      # Make request&#10;      response = client.post(&quot;/api/search&quot;, json=search_input)&#10;&#10;      # Verify response&#10;      assert response.status_code == 200&#10;      data = response.json()&#10;      assert &quot;answer&quot; in data&#10;      assert &quot;documents&quot; in data&#10;      assert &quot;query_results&quot; in data&#10;      assert &quot;rewritten_query&quot; in data&#10;      assert len(data[&quot;documents&quot;]) &gt; 0&#10;      assert data[&quot;documents&quot;][0][&quot;document_name&quot;] == test_file.filename&#10;file /app/backend/tests/api/test_search_router.py, line 28&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_search_router.py, line 23&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_search_router.py:23&quot;">file /app/backend/tests/api/test_search_router.py, line 127
  @pytest.mark.asyncio
  async def test_search_endpoint_success(
      client: TestClient,
      test_collection: Collection,
      test_file: File,
      test_config: dict
  ):
      """Test successful search request."""
      # Create search input
      search_input = {
          "question": "What is the capital of France?",
          "collection_id": str(test_collection.id)
      }

      # Make request
      response = client.post("/api/search", json=search_input)

      # Verify response
      assert response.status_code == 200
      data = response.json()
      assert "answer" in data
      assert "documents" in data
      assert "query_results" in data
      assert "rewritten_query" in data
      assert len(data["documents"]) &gt; 0
      assert data["documents"][0]["document_name"] == test_file.filename
file /app/backend/tests/api/test_search_router.py, line 28
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_search_router.py, line 23
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_search_router.py:23</error></testcase><testcase classname="tests.api.test_search_router" name="test_search_endpoint_collection_not_found" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/api/test_search_router.py, line 154&#10;  @pytest.mark.asyncio&#10;  async def test_search_endpoint_collection_not_found(client: TestClient):&#10;      &quot;&quot;&quot;Test search with non-existent collection.&quot;&quot;&quot;&#10;      search_input = {&#10;          &quot;question&quot;: &quot;test query&quot;,&#10;          &quot;collection_id&quot;: str(uuid4())&#10;      }&#10;&#10;      response = client.post(&quot;/api/search&quot;, json=search_input)&#10;      assert response.status_code == 404&#10;      assert &quot;Collection not found&quot; in response.json()[&quot;detail&quot;]&#10;file /app/backend/tests/api/test_search_router.py, line 28&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_search_router.py, line 23&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_search_router.py:23&quot;">file /app/backend/tests/api/test_search_router.py, line 154
  @pytest.mark.asyncio
  async def test_search_endpoint_collection_not_found(client: TestClient):
      """Test search with non-existent collection."""
      search_input = {
          "question": "test query",
          "collection_id": str(uuid4())
      }

      response = client.post("/api/search", json=search_input)
      assert response.status_code == 404
      assert "Collection not found" in response.json()["detail"]
file /app/backend/tests/api/test_search_router.py, line 28
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_search_router.py, line 23
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_search_router.py:23</error></testcase><testcase classname="tests.api.test_search_router" name="test_search_endpoint_invalid_input" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/api/test_search_router.py, line 166&#10;  @pytest.mark.asyncio&#10;  async def test_search_endpoint_invalid_input(client: TestClient):&#10;      &quot;&quot;&quot;Test search with invalid input.&quot;&quot;&quot;&#10;      # Missing required field&#10;      search_input = {&#10;          &quot;collection_id&quot;: str(uuid4())&#10;          # Missing question field&#10;      }&#10;&#10;      response = client.post(&quot;/api/search&quot;, json=search_input)&#10;      assert response.status_code == 422  # Validation error&#10;file /app/backend/tests/api/test_search_router.py, line 28&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_search_router.py, line 23&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_search_router.py:23&quot;">file /app/backend/tests/api/test_search_router.py, line 166
  @pytest.mark.asyncio
  async def test_search_endpoint_invalid_input(client: TestClient):
      """Test search with invalid input."""
      # Missing required field
      search_input = {
          "collection_id": str(uuid4())
          # Missing question field
      }

      response = client.post("/api/search", json=search_input)
      assert response.status_code == 422  # Validation error
file /app/backend/tests/api/test_search_router.py, line 28
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_search_router.py, line 23
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_search_router.py:23</error></testcase><testcase classname="tests.api.test_search_router" name="test_search_endpoint_empty_query" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/api/test_search_router.py, line 178&#10;  @pytest.mark.asyncio&#10;  async def test_search_endpoint_empty_query(&#10;      client: TestClient,&#10;      test_collection: Collection&#10;  ):&#10;      &quot;&quot;&quot;Test search with empty query.&quot;&quot;&quot;&#10;      search_input = {&#10;          &quot;question&quot;: &quot;   &quot;,  # Empty after stripping&#10;          &quot;collection_id&quot;: str(test_collection.id)&#10;      }&#10;&#10;      response = client.post(&quot;/api/search&quot;, json=search_input)&#10;      assert response.status_code == 400&#10;      assert &quot;Query cannot be empty&quot; in response.json()[&quot;detail&quot;]&#10;file /app/backend/tests/api/test_search_router.py, line 28&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_search_router.py, line 23&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_search_router.py:23&quot;">file /app/backend/tests/api/test_search_router.py, line 178
  @pytest.mark.asyncio
  async def test_search_endpoint_empty_query(
      client: TestClient,
      test_collection: Collection
  ):
      """Test search with empty query."""
      search_input = {
          "question": "   ",  # Empty after stripping
          "collection_id": str(test_collection.id)
      }

      response = client.post("/api/search", json=search_input)
      assert response.status_code == 400
      assert "Query cannot be empty" in response.json()["detail"]
file /app/backend/tests/api/test_search_router.py, line 28
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_search_router.py, line 23
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_search_router.py:23</error></testcase><testcase classname="tests.api.test_search_router" name="test_search_endpoint_with_context" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/api/test_search_router.py, line 193&#10;  @pytest.mark.asyncio&#10;  async def test_search_endpoint_with_context(&#10;      client: TestClient,&#10;      test_collection: Collection,&#10;      test_file: File,&#10;      test_config: dict&#10;  ):&#10;      &quot;&quot;&quot;Test search with additional context.&quot;&quot;&quot;&#10;      search_input = {&#10;          &quot;question&quot;: &quot;What is the capital of France?&quot;,&#10;          &quot;collection_id&quot;: str(test_collection.id)&#10;      }&#10;&#10;      # Add context in query params&#10;      context = {&#10;          &quot;user_role&quot;: &quot;student&quot;,&#10;          &quot;language&quot;: &quot;en&quot;,&#10;          &quot;detail_level&quot;: &quot;high&quot;&#10;      }&#10;&#10;      response = client.post(&quot;/api/search&quot;, json=search_input, params=context)&#10;      assert response.status_code == 200&#10;      data = response.json()&#10;      assert data[&quot;rewritten_query&quot;] != search_input[&quot;question&quot;]&#10;      assert isinstance(data[&quot;rewritten_query&quot;], str)&#10;      assert len(data[&quot;rewritten_query&quot;]) &gt; 0&#10;file /app/backend/tests/api/test_search_router.py, line 28&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_search_router.py, line 23&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_search_router.py:23&quot;">file /app/backend/tests/api/test_search_router.py, line 193
  @pytest.mark.asyncio
  async def test_search_endpoint_with_context(
      client: TestClient,
      test_collection: Collection,
      test_file: File,
      test_config: dict
  ):
      """Test search with additional context."""
      search_input = {
          "question": "What is the capital of France?",
          "collection_id": str(test_collection.id)
      }

      # Add context in query params
      context = {
          "user_role": "student",
          "language": "en",
          "detail_level": "high"
      }

      response = client.post("/api/search", json=search_input, params=context)
      assert response.status_code == 200
      data = response.json()
      assert data["rewritten_query"] != search_input["question"]
      assert isinstance(data["rewritten_query"], str)
      assert len(data["rewritten_query"]) &gt; 0
file /app/backend/tests/api/test_search_router.py, line 28
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_search_router.py, line 23
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_search_router.py:23</error></testcase><testcase classname="tests.api.test_search_router" name="test_search_endpoint_large_query" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/api/test_search_router.py, line 220&#10;  @pytest.mark.asyncio&#10;  async def test_search_endpoint_large_query(&#10;      client: TestClient,&#10;      test_collection: Collection&#10;  ):&#10;      &quot;&quot;&quot;Test search with an extremely large query.&quot;&quot;&quot;&#10;      search_input = {&#10;          &quot;question&quot;: &quot;x&quot; * 10000,  # Very large query&#10;          &quot;collection_id&quot;: str(test_collection.id)&#10;      }&#10;&#10;      response = client.post(&quot;/api/search&quot;, json=search_input)&#10;      assert response.status_code == 400&#10;      assert &quot;Query too long&quot; in response.json()[&quot;detail&quot;]&#10;file /app/backend/tests/api/test_search_router.py, line 28&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_search_router.py, line 23&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_search_router.py:23&quot;">file /app/backend/tests/api/test_search_router.py, line 220
  @pytest.mark.asyncio
  async def test_search_endpoint_large_query(
      client: TestClient,
      test_collection: Collection
  ):
      """Test search with an extremely large query."""
      search_input = {
          "question": "x" * 10000,  # Very large query
          "collection_id": str(test_collection.id)
      }

      response = client.post("/api/search", json=search_input)
      assert response.status_code == 400
      assert "Query too long" in response.json()["detail"]
file /app/backend/tests/api/test_search_router.py, line 28
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_search_router.py, line 23
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_search_router.py:23</error></testcase><testcase classname="tests.api.test_search_router" name="test_search_endpoint_malformed_context" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/api/test_search_router.py, line 235&#10;  @pytest.mark.asyncio&#10;  async def test_search_endpoint_malformed_context(&#10;      client: TestClient,&#10;      test_collection: Collection&#10;  ):&#10;      &quot;&quot;&quot;Test search with malformed context data.&quot;&quot;&quot;&#10;      search_input = {&#10;          &quot;question&quot;: &quot;What is the capital of France?&quot;,&#10;          &quot;collection_id&quot;: str(test_collection.id)&#10;      }&#10;&#10;      # Send invalid context format&#10;      response = client.post(&#10;          &quot;/api/search&quot;,&#10;          json=search_input,&#10;          params={&quot;context&quot;: &quot;invalid-context-format&quot;}&#10;      )&#10;      assert response.status_code == 422&#10;file /app/backend/tests/api/test_search_router.py, line 28&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_search_router.py, line 23&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_search_router.py:23&quot;">file /app/backend/tests/api/test_search_router.py, line 235
  @pytest.mark.asyncio
  async def test_search_endpoint_malformed_context(
      client: TestClient,
      test_collection: Collection
  ):
      """Test search with malformed context data."""
      search_input = {
          "question": "What is the capital of France?",
          "collection_id": str(test_collection.id)
      }

      # Send invalid context format
      response = client.post(
          "/api/search",
          json=search_input,
          params={"context": "invalid-context-format"}
      )
      assert response.status_code == 422
file /app/backend/tests/api/test_search_router.py, line 28
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_search_router.py, line 23
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_search_router.py:23</error></testcase><testcase classname="tests.api.test_search_router" name="test_search_endpoint_invalid_collection_format" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/api/test_search_router.py, line 254&#10;  @pytest.mark.asyncio&#10;  async def test_search_endpoint_invalid_collection_format(&#10;      client: TestClient,&#10;      test_collection: Collection,&#10;      test_db: Session&#10;  ):&#10;      &quot;&quot;&quot;Test search with invalid collection data format.&quot;&quot;&quot;&#10;      # Create a collection with invalid format&#10;      invalid_collection = Collection(&#10;          name=&quot;invalid-collection&quot;,&#10;          description=&quot;Invalid collection&quot;,&#10;          vector_db_name=&quot;&quot;  # Invalid empty vector_db_name&#10;      )&#10;      test_db.add(invalid_collection)&#10;      test_db.commit()&#10;&#10;      search_input = {&#10;          &quot;question&quot;: &quot;What is the capital of France?&quot;,&#10;          &quot;collection_id&quot;: str(invalid_collection.id)&#10;      }&#10;&#10;      response = client.post(&quot;/api/search&quot;, json=search_input)&#10;      assert response.status_code == 400&#10;      assert &quot;Invalid collection configuration&quot; in response.json()[&quot;detail&quot;]&#10;file /app/backend/tests/api/test_search_router.py, line 28&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_search_router.py, line 23&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_search_router.py:23&quot;">file /app/backend/tests/api/test_search_router.py, line 254
  @pytest.mark.asyncio
  async def test_search_endpoint_invalid_collection_format(
      client: TestClient,
      test_collection: Collection,
      test_db: Session
  ):
      """Test search with invalid collection data format."""
      # Create a collection with invalid format
      invalid_collection = Collection(
          name="invalid-collection",
          description="Invalid collection",
          vector_db_name=""  # Invalid empty vector_db_name
      )
      test_db.add(invalid_collection)
      test_db.commit()

      search_input = {
          "question": "What is the capital of France?",
          "collection_id": str(invalid_collection.id)
      }

      response = client.post("/api/search", json=search_input)
      assert response.status_code == 400
      assert "Invalid collection configuration" in response.json()["detail"]
file /app/backend/tests/api/test_search_router.py, line 28
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_search_router.py, line 23
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_search_router.py:23</error></testcase><testcase classname="tests.api.test_search_router" name="test_search_endpoint_missing_template" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/api/test_search_router.py, line 279&#10;  @pytest.mark.asyncio&#10;  async def test_search_endpoint_missing_template(&#10;      client: TestClient,&#10;      test_collection: Collection,&#10;      test_db: Session&#10;  ):&#10;      &quot;&quot;&quot;Test search with missing prompt template configuration.&quot;&quot;&quot;&#10;      # Remove all prompt templates&#10;      test_db.query(PromptTemplate).delete()&#10;      test_db.commit()&#10;&#10;      search_input = {&#10;          &quot;question&quot;: &quot;What is the capital of France?&quot;,&#10;          &quot;collection_id&quot;: str(test_collection.id)&#10;      }&#10;&#10;      response = client.post(&quot;/api/search&quot;, json=search_input)&#10;      assert response.status_code == 500&#10;      assert &quot;No valid prompt template found&quot; in response.json()[&quot;detail&quot;]&#10;file /app/backend/tests/api/test_search_router.py, line 28&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_search_router.py, line 23&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_search_router.py:23&quot;">file /app/backend/tests/api/test_search_router.py, line 279
  @pytest.mark.asyncio
  async def test_search_endpoint_missing_template(
      client: TestClient,
      test_collection: Collection,
      test_db: Session
  ):
      """Test search with missing prompt template configuration."""
      # Remove all prompt templates
      test_db.query(PromptTemplate).delete()
      test_db.commit()

      search_input = {
          "question": "What is the capital of France?",
          "collection_id": str(test_collection.id)
      }

      response = client.post("/api/search", json=search_input)
      assert response.status_code == 500
      assert "No valid prompt template found" in response.json()["detail"]
file /app/backend/tests/api/test_search_router.py, line 28
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_search_router.py, line 23
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_search_router.py:23</error></testcase><testcase classname="tests.api.test_search_router" name="test_search_endpoint_no_config" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/api/test_search_router.py, line 299&#10;  @pytest.mark.asyncio&#10;  async def test_search_endpoint_no_config(&#10;      client: TestClient,&#10;      test_collection: Collection&#10;  ):&#10;      &quot;&quot;&quot;Test search with no provider configuration.&quot;&quot;&quot;&#10;      search_input = {&#10;          &quot;question&quot;: &quot;test query&quot;,&#10;          &quot;collection_id&quot;: str(test_collection.id)&#10;      }&#10;&#10;      response = client.post(&quot;/api/search&quot;, json=search_input)&#10;      assert response.status_code == 500&#10;      assert &quot;No valid provider configuration found&quot; in response.json()[&quot;detail&quot;]&#10;file /app/backend/tests/api/test_search_router.py, line 28&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_search_router.py, line 23&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_search_router.py:23&quot;">file /app/backend/tests/api/test_search_router.py, line 299
  @pytest.mark.asyncio
  async def test_search_endpoint_no_config(
      client: TestClient,
      test_collection: Collection
  ):
      """Test search with no provider configuration."""
      search_input = {
          "question": "test query",
          "collection_id": str(test_collection.id)
      }

      response = client.post("/api/search", json=search_input)
      assert response.status_code == 500
      assert "No valid provider configuration found" in response.json()["detail"]
file /app/backend/tests/api/test_search_router.py, line 28
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_search_router.py, line 23
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_config, test_db, test_documents, test_file, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_search_router.py:23</error></testcase><testcase classname="tests.api.test_team_router.TestTeamManagement" name="test_create_team_success" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/api/test_team_router.py, line 73&#10;      def test_create_team_success(self, client: TestClient):&#10;file /app/backend/tests/api/test_team_router.py, line 21&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_team_router.py, line 16&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_team_router.py:16&quot;">file /app/backend/tests/api/test_team_router.py, line 73
      def test_create_team_success(self, client: TestClient):
file /app/backend/tests/api/test_team_router.py, line 21
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_team_router.py, line 16
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_team_router.py:16</error></testcase><testcase classname="tests.api.test_team_router.TestTeamManagement" name="test_create_team_invalid_input" time="0.029"><error message="failed on setup with &quot;file /app/backend/tests/api/test_team_router.py, line 85&#10;      def test_create_team_invalid_input(self, client: TestClient):&#10;file /app/backend/tests/api/test_team_router.py, line 21&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_team_router.py, line 16&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_team_router.py:16&quot;">file /app/backend/tests/api/test_team_router.py, line 85
      def test_create_team_invalid_input(self, client: TestClient):
file /app/backend/tests/api/test_team_router.py, line 21
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_team_router.py, line 16
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_team_router.py:16</error></testcase><testcase classname="tests.api.test_team_router.TestTeamManagement" name="test_get_team_success" time="0.030"><error message="failed on setup with &quot;file /app/backend/tests/api/test_team_router.py, line 95&#10;      def test_get_team_success(self, client: TestClient, test_team: Team):&#10;file /app/backend/tests/api/test_team_router.py, line 21&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_team_router.py, line 16&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_team_router.py:16&quot;">file /app/backend/tests/api/test_team_router.py, line 95
      def test_get_team_success(self, client: TestClient, test_team: Team):
file /app/backend/tests/api/test_team_router.py, line 21
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_team_router.py, line 16
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_team_router.py:16</error></testcase><testcase classname="tests.api.test_team_router.TestTeamManagement" name="test_get_team_not_found" time="0.029"><error message="failed on setup with &quot;file /app/backend/tests/api/test_team_router.py, line 102&#10;      def test_get_team_not_found(self, client: TestClient):&#10;file /app/backend/tests/api/test_team_router.py, line 21&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_team_router.py, line 16&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_team_router.py:16&quot;">file /app/backend/tests/api/test_team_router.py, line 102
      def test_get_team_not_found(self, client: TestClient):
file /app/backend/tests/api/test_team_router.py, line 21
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_team_router.py, line 16
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_team_router.py:16</error></testcase><testcase classname="tests.api.test_team_router.TestTeamManagement" name="test_update_team_success" time="0.028"><error message="failed on setup with &quot;file /app/backend/tests/api/test_team_router.py, line 108&#10;      def test_update_team_success(self, client: TestClient, test_team: Team):&#10;file /app/backend/tests/api/test_team_router.py, line 21&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_team_router.py, line 16&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_team_router.py:16&quot;">file /app/backend/tests/api/test_team_router.py, line 108
      def test_update_team_success(self, client: TestClient, test_team: Team):
file /app/backend/tests/api/test_team_router.py, line 21
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_team_router.py, line 16
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_team_router.py:16</error></testcase><testcase classname="tests.api.test_team_router.TestTeamManagement" name="test_update_team_not_found" time="0.028"><error message="failed on setup with &quot;file /app/backend/tests/api/test_team_router.py, line 120&#10;      def test_update_team_not_found(self, client: TestClient):&#10;file /app/backend/tests/api/test_team_router.py, line 21&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_team_router.py, line 16&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_team_router.py:16&quot;">file /app/backend/tests/api/test_team_router.py, line 120
      def test_update_team_not_found(self, client: TestClient):
file /app/backend/tests/api/test_team_router.py, line 21
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_team_router.py, line 16
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_team_router.py:16</error></testcase><testcase classname="tests.api.test_team_router.TestTeamManagement" name="test_delete_team_success" time="0.024"><error message="failed on setup with &quot;file /app/backend/tests/api/test_team_router.py, line 131&#10;      def test_delete_team_success(self, client: TestClient, test_team: Team):&#10;file /app/backend/tests/api/test_team_router.py, line 21&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_team_router.py, line 16&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_team_router.py:16&quot;">file /app/backend/tests/api/test_team_router.py, line 131
      def test_delete_team_success(self, client: TestClient, test_team: Team):
file /app/backend/tests/api/test_team_router.py, line 21
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_team_router.py, line 16
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_team_router.py:16</error></testcase><testcase classname="tests.api.test_team_router.TestTeamManagement" name="test_delete_team_not_found" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/api/test_team_router.py, line 137&#10;      def test_delete_team_not_found(self, client: TestClient):&#10;file /app/backend/tests/api/test_team_router.py, line 21&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_team_router.py, line 16&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_team_router.py:16&quot;">file /app/backend/tests/api/test_team_router.py, line 137
      def test_delete_team_not_found(self, client: TestClient):
file /app/backend/tests/api/test_team_router.py, line 21
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_team_router.py, line 16
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_team_router.py:16</error></testcase><testcase classname="tests.api.test_team_router.TestTeamManagement" name="test_list_teams_success" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/api/test_team_router.py, line 143&#10;      def test_list_teams_success(&#10;file /app/backend/tests/api/test_team_router.py, line 21&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_team_router.py, line 16&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_team_router.py:16&quot;">file /app/backend/tests/api/test_team_router.py, line 143
      def test_list_teams_success(
file /app/backend/tests/api/test_team_router.py, line 21
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_team_router.py, line 16
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_team_router.py:16</error></testcase><testcase classname="tests.api.test_team_router.TestTeamManagement" name="test_list_teams_pagination" time="0.028"><error message="failed on setup with &quot;file /app/backend/tests/api/test_team_router.py, line 153&#10;      def test_list_teams_pagination(&#10;file /app/backend/tests/api/test_team_router.py, line 21&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_team_router.py, line 16&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_team_router.py:16&quot;">file /app/backend/tests/api/test_team_router.py, line 153
      def test_list_teams_pagination(
file /app/backend/tests/api/test_team_router.py, line 21
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_team_router.py, line 16
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_team_router.py:16</error></testcase><testcase classname="tests.api.test_team_router.TestTeamUsers" name="test_get_team_users_success" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/api/test_team_router.py, line 175&#10;      def test_get_team_users_success(&#10;file /app/backend/tests/api/test_team_router.py, line 21&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_team_router.py, line 16&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_team_router.py:16&quot;">file /app/backend/tests/api/test_team_router.py, line 175
      def test_get_team_users_success(
file /app/backend/tests/api/test_team_router.py, line 21
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_team_router.py, line 16
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_team_router.py:16</error></testcase><testcase classname="tests.api.test_team_router.TestTeamUsers" name="test_get_team_users_empty" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/api/test_team_router.py, line 185&#10;      def test_get_team_users_empty(&#10;file /app/backend/tests/api/test_team_router.py, line 21&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_team_router.py, line 16&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_team_router.py:16&quot;">file /app/backend/tests/api/test_team_router.py, line 185
      def test_get_team_users_empty(
file /app/backend/tests/api/test_team_router.py, line 21
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_team_router.py, line 16
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_team_router.py:16</error></testcase><testcase classname="tests.api.test_team_router.TestTeamUsers" name="test_get_team_users_team_not_found" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/api/test_team_router.py, line 201&#10;      def test_get_team_users_team_not_found(self, client: TestClient):&#10;file /app/backend/tests/api/test_team_router.py, line 21&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_team_router.py, line 16&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_team_router.py:16&quot;">file /app/backend/tests/api/test_team_router.py, line 201
      def test_get_team_users_team_not_found(self, client: TestClient):
file /app/backend/tests/api/test_team_router.py, line 21
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_team_router.py, line 16
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_db, test_documents, test_prompt_template_data, test_questions, test_team, test_user, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_team_router.py:16</error></testcase><testcase classname="tests.api.test_user_router.TestUserManagement" name="test_create_user_success" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 120&#10;      def test_create_user_success(self, client: TestClient):&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 120
      def test_create_user_success(self, client: TestClient):
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserManagement" name="test_create_user_invalid_input" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 132&#10;      def test_create_user_invalid_input(self, client: TestClient):&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 132
      def test_create_user_invalid_input(self, client: TestClient):
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserManagement" name="test_get_user_success" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 142&#10;      def test_get_user_success(self, client: TestClient, test_user: User):&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 142
      def test_get_user_success(self, client: TestClient, test_user: User):
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserManagement" name="test_get_user_not_found" time="0.028"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 148&#10;      def test_get_user_not_found(self, client: TestClient):&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 148
      def test_get_user_not_found(self, client: TestClient):
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserManagement" name="test_update_user_success" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 153&#10;      def test_update_user_success(self, client: TestClient, test_user: User):&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 153
      def test_update_user_success(self, client: TestClient, test_user: User):
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserManagement" name="test_delete_user_success" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 165&#10;      def test_delete_user_success(self, client: TestClient, test_user: User):&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 165
      def test_delete_user_success(self, client: TestClient, test_user: User):
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserManagement" name="test_list_users_success" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 171&#10;      def test_list_users_success(self, client: TestClient, test_user: User):&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 171
      def test_list_users_success(self, client: TestClient, test_user: User):
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserCollections" name="test_get_user_collections_success" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 180&#10;      def test_get_user_collections_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 180
      def test_get_user_collections_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserCollections" name="test_get_user_collections_unauthorized" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 192&#10;      def test_get_user_collections_unauthorized(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 192
      def test_get_user_collections_unauthorized(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserCollections" name="test_add_user_to_collection_success" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 199&#10;      def test_add_user_to_collection_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 199
      def test_add_user_to_collection_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserCollections" name="test_remove_user_from_collection_success" time="0.032"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 209&#10;      def test_remove_user_from_collection_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 209
      def test_remove_user_from_collection_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserTeams" name="test_get_user_teams_success" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 221&#10;      def test_get_user_teams_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 221
      def test_get_user_teams_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserTeams" name="test_add_user_to_team_success" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 231&#10;      def test_add_user_to_team_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 231
      def test_add_user_to_team_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserTeams" name="test_remove_user_from_team_success" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 241&#10;      def test_remove_user_from_team_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 241
      def test_remove_user_from_team_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserFiles" name="test_upload_file_success" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 253&#10;      def test_upload_file_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 253
      def test_upload_file_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserFiles" name="test_upload_file_with_metadata_success" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 270&#10;      def test_upload_file_with_metadata_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 270
      def test_upload_file_with_metadata_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserPipelines" name="test_get_pipelines_success" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 293&#10;      def test_get_pipelines_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 293
      def test_get_pipelines_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserPipelines" name="test_create_pipeline_success" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 306&#10;      def test_create_pipeline_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 306
      def test_create_pipeline_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserPipelines" name="test_update_pipeline_success" time="0.030"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 330&#10;      def test_update_pipeline_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 330
      def test_update_pipeline_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserPipelines" name="test_delete_pipeline_success" time="0.028"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 354&#10;      def test_delete_pipeline_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 354
      def test_delete_pipeline_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserPipelines" name="test_set_default_pipeline_success" time="0.032"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 367&#10;      def test_set_default_pipeline_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 367
      def test_set_default_pipeline_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserPipelines" name="test_validate_pipeline_success" time="0.030"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 380&#10;      def test_validate_pipeline_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 380
      def test_validate_pipeline_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.api.test_user_router.TestUserPipelines" name="test_test_pipeline_success" time="0.030"><error message="failed on setup with &quot;file /app/backend/tests/api/test_user_router.py, line 393&#10;      def test_test_pipeline_success(&#10;file /app/backend/tests/api/test_user_router.py, line 27&#10;  @pytest.fixture&#10;  def client(test_db: Session):&#10;file /app/backend/tests/api/test_user_router.py, line 22&#10;  @pytest.fixture&#10;  def test_db(db: Session):&#10;E       fixture 'db' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/api/test_user_router.py:22&quot;">file /app/backend/tests/api/test_user_router.py, line 393
      def test_test_pipeline_success(
file /app/backend/tests/api/test_user_router.py, line 27
  @pytest.fixture
  def client(test_db: Session):
file /app/backend/tests/api/test_user_router.py, line 22
  @pytest.fixture
  def test_db(db: Session):
E       fixture 'db' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, client, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_collection, test_db, test_documents, test_pipeline, test_prompt_template_data, test_questions, test_team, test_user, test_user_collection, test_user_team, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/api/test_user_router.py:22</error></testcase><testcase classname="tests.data_ingestion.test_chunking" name="test_split_sentences" time="0.028"><failure message="AssertionError: assert 'This is sentence one.' == 'This is sentence one'&#10;  - This is sentence one&#10;  + This is sentence one.&#10;  ?                     +">backend/tests/data_ingestion/test_chunking.py:23: in test_split_sentences
    assert sentences[0] == "This is sentence one"
E   AssertionError: assert 'This is sentence one.' == 'This is sentence one'
E     - This is sentence one
E     + This is sentence one.
E     ?                     +</failure></testcase><testcase classname="tests.data_ingestion.test_chunking" name="test_combine_sentences" time="0.027" /><testcase classname="tests.data_ingestion.test_chunking" name="test_simple_chunking" time="0.026" /><testcase classname="tests.data_ingestion.test_chunking" name="test_semantic_chunking" time="0.036" /><testcase classname="tests.data_ingestion.test_chunking" name="test_token_based_chunking" time="0.024"><failure message="AssertionError: assert [''] == []&#10;  Left contains one more item: ''&#10;  Full diff:&#10;  - []&#10;  + ['']">backend/tests/data_ingestion/test_chunking.py:136: in test_token_based_chunking
    assert token_based_chunking("") == []
E   AssertionError: assert [''] == []
E     Left contains one more item: ''
E     Full diff:
E     - []
E     + ['']</failure></testcase><testcase classname="tests.data_ingestion.test_chunking" name="test_calculate_cosine_distances" time="0.027" /><testcase classname="tests.data_ingestion.test_chunking" name="test_get_chunking_method" time="0.026" /><testcase classname="tests.data_ingestion.test_chunking" name="test_chunker_integration" time="0.029" /><testcase classname="tests.data_ingestion.test_chunking" name="test_edge_cases" time="0.027"><failure message="AssertionError: assert 4 == 3&#10; +  where 4 = len(['1.', 'First item.', '• Second item.', '* Third item.'])">backend/tests/data_ingestion/test_chunking.py:231: in test_edge_cases
    assert len(sentences) == 3
E   AssertionError: assert 4 == 3
E    +  where 4 = len(['1.', 'First item.', '• Second item.', '* Third item.'])</failure></testcase><testcase classname="tests.data_ingestion.test_data_ingestion" name="test_base_processor" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.data_ingestion.test_data_ingestion" name="test_simple_chunking" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.data_ingestion.test_data_ingestion" name="test_semantic_chunking" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.data_ingestion.test_data_ingestion" name="test_token_based_chunking" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.data_ingestion.test_data_ingestion" name="test_document_processor" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.data_ingestion.test_data_ingestion" name="test_excel_processor" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.data_ingestion.test_data_ingestion" name="test_pdf_processor" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.data_ingestion.test_data_ingestion" name="test_txt_processor" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.data_ingestion.test_data_ingestion" name="test_word_processor" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.data_ingestion.test_data_ingestion" name="test_document_store" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.data_ingestion.test_document_processor" name="test_process_document[test_txt_path]" time="0.034"><failure message="file /app/backend/tests/data_ingestion/test_document_processor.py, line 8&#10;  @pytest.mark.asyncio&#10;  @pytest.mark.parametrize(&#10;      &quot;fixture_name&quot;,&#10;      [&quot;test_txt_path&quot;, &quot;test_pdf_path&quot;, &quot;test_word_path&quot;, &quot;test_excel_path&quot;],&#10;  )&#10;  async def test_process_document(request, fixture_name):&#10;      test_file = request.getfixturevalue(fixture_name)&#10;      print(&quot;*** Fixture name: &quot;, fixture_name)&#10;      processor = DocumentProcessor()&#10;      docs = []&#10;      async for document in processor.process_document(test_file):&#10;          docs.append(document)&#10;&#10;      assert len(docs) &gt; 0&#10;      # assert all(isinstance(doc, Document) for doc in docs)&#10;      # assert docs[0].name == str(test_file)&#10;      # assert len(docs[0].chunks) &gt; 0&#10;E       fixture 'test_txt_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/data_ingestion/test_document_processor.py:8">file /app/backend/tests/data_ingestion/test_document_processor.py, line 8
  @pytest.mark.asyncio
  @pytest.mark.parametrize(
      "fixture_name",
      ["test_txt_path", "test_pdf_path", "test_word_path", "test_excel_path"],
  )
  async def test_process_document(request, fixture_name):
      test_file = request.getfixturevalue(fixture_name)
      print("*** Fixture name: ", fixture_name)
      processor = DocumentProcessor()
      docs = []
      async for document in processor.process_document(test_file):
          docs.append(document)

      assert len(docs) &gt; 0
      # assert all(isinstance(doc, Document) for doc in docs)
      # assert docs[0].name == str(test_file)
      # assert len(docs[0].chunks) &gt; 0
E       fixture 'test_txt_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/data_ingestion/test_document_processor.py:8</failure></testcase><testcase classname="tests.data_ingestion.test_document_processor" name="test_process_document[test_pdf_path]" time="0.028"><failure message="file /app/backend/tests/data_ingestion/test_document_processor.py, line 8&#10;  @pytest.mark.asyncio&#10;  @pytest.mark.parametrize(&#10;      &quot;fixture_name&quot;,&#10;      [&quot;test_txt_path&quot;, &quot;test_pdf_path&quot;, &quot;test_word_path&quot;, &quot;test_excel_path&quot;],&#10;  )&#10;  async def test_process_document(request, fixture_name):&#10;      test_file = request.getfixturevalue(fixture_name)&#10;      print(&quot;*** Fixture name: &quot;, fixture_name)&#10;      processor = DocumentProcessor()&#10;      docs = []&#10;      async for document in processor.process_document(test_file):&#10;          docs.append(document)&#10;&#10;      assert len(docs) &gt; 0&#10;      # assert all(isinstance(doc, Document) for doc in docs)&#10;      # assert docs[0].name == str(test_file)&#10;      # assert len(docs[0].chunks) &gt; 0&#10;E       fixture 'test_pdf_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/data_ingestion/test_document_processor.py:8">file /app/backend/tests/data_ingestion/test_document_processor.py, line 8
  @pytest.mark.asyncio
  @pytest.mark.parametrize(
      "fixture_name",
      ["test_txt_path", "test_pdf_path", "test_word_path", "test_excel_path"],
  )
  async def test_process_document(request, fixture_name):
      test_file = request.getfixturevalue(fixture_name)
      print("*** Fixture name: ", fixture_name)
      processor = DocumentProcessor()
      docs = []
      async for document in processor.process_document(test_file):
          docs.append(document)

      assert len(docs) &gt; 0
      # assert all(isinstance(doc, Document) for doc in docs)
      # assert docs[0].name == str(test_file)
      # assert len(docs[0].chunks) &gt; 0
E       fixture 'test_pdf_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/data_ingestion/test_document_processor.py:8</failure></testcase><testcase classname="tests.data_ingestion.test_document_processor" name="test_process_document[test_word_path]" time="0.028"><failure message="file /app/backend/tests/data_ingestion/test_document_processor.py, line 8&#10;  @pytest.mark.asyncio&#10;  @pytest.mark.parametrize(&#10;      &quot;fixture_name&quot;,&#10;      [&quot;test_txt_path&quot;, &quot;test_pdf_path&quot;, &quot;test_word_path&quot;, &quot;test_excel_path&quot;],&#10;  )&#10;  async def test_process_document(request, fixture_name):&#10;      test_file = request.getfixturevalue(fixture_name)&#10;      print(&quot;*** Fixture name: &quot;, fixture_name)&#10;      processor = DocumentProcessor()&#10;      docs = []&#10;      async for document in processor.process_document(test_file):&#10;          docs.append(document)&#10;&#10;      assert len(docs) &gt; 0&#10;      # assert all(isinstance(doc, Document) for doc in docs)&#10;      # assert docs[0].name == str(test_file)&#10;      # assert len(docs[0].chunks) &gt; 0&#10;E       fixture 'test_word_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/data_ingestion/test_document_processor.py:8">file /app/backend/tests/data_ingestion/test_document_processor.py, line 8
  @pytest.mark.asyncio
  @pytest.mark.parametrize(
      "fixture_name",
      ["test_txt_path", "test_pdf_path", "test_word_path", "test_excel_path"],
  )
  async def test_process_document(request, fixture_name):
      test_file = request.getfixturevalue(fixture_name)
      print("*** Fixture name: ", fixture_name)
      processor = DocumentProcessor()
      docs = []
      async for document in processor.process_document(test_file):
          docs.append(document)

      assert len(docs) &gt; 0
      # assert all(isinstance(doc, Document) for doc in docs)
      # assert docs[0].name == str(test_file)
      # assert len(docs[0].chunks) &gt; 0
E       fixture 'test_word_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/data_ingestion/test_document_processor.py:8</failure></testcase><testcase classname="tests.data_ingestion.test_document_processor" name="test_process_document[test_excel_path]" time="0.027"><failure message="file /app/backend/tests/data_ingestion/test_document_processor.py, line 8&#10;  @pytest.mark.asyncio&#10;  @pytest.mark.parametrize(&#10;      &quot;fixture_name&quot;,&#10;      [&quot;test_txt_path&quot;, &quot;test_pdf_path&quot;, &quot;test_word_path&quot;, &quot;test_excel_path&quot;],&#10;  )&#10;  async def test_process_document(request, fixture_name):&#10;      test_file = request.getfixturevalue(fixture_name)&#10;      print(&quot;*** Fixture name: &quot;, fixture_name)&#10;      processor = DocumentProcessor()&#10;      docs = []&#10;      async for document in processor.process_document(test_file):&#10;          docs.append(document)&#10;&#10;      assert len(docs) &gt; 0&#10;      # assert all(isinstance(doc, Document) for doc in docs)&#10;      # assert docs[0].name == str(test_file)&#10;      # assert len(docs[0].chunks) &gt; 0&#10;E       fixture 'test_excel_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/data_ingestion/test_document_processor.py:8">file /app/backend/tests/data_ingestion/test_document_processor.py, line 8
  @pytest.mark.asyncio
  @pytest.mark.parametrize(
      "fixture_name",
      ["test_txt_path", "test_pdf_path", "test_word_path", "test_excel_path"],
  )
  async def test_process_document(request, fixture_name):
      test_file = request.getfixturevalue(fixture_name)
      print("*** Fixture name: ", fixture_name)
      processor = DocumentProcessor()
      docs = []
      async for document in processor.process_document(test_file):
          docs.append(document)

      assert len(docs) &gt; 0
      # assert all(isinstance(doc, Document) for doc in docs)
      # assert docs[0].name == str(test_file)
      # assert len(docs[0].chunks) &gt; 0
E       fixture 'test_excel_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/data_ingestion/test_document_processor.py:8</failure></testcase><testcase classname="tests.data_ingestion.test_document_processor" name="test_process_document_error" time="0.029"><failure message="file /app/backend/tests/data_ingestion/test_document_processor.py, line 27&#10;  @pytest.mark.asyncio&#10;  async def test_process_document_error(request):&#10;      test_non_existent_pdf_path = request.getfixturevalue(&quot;test_non_existent_pdf_path&quot;)&#10;      processor = DocumentProcessor()&#10;      with pytest.raises(DocumentProcessingError):&#10;          async for _ in processor.process_document(test_non_existent_pdf_path):&#10;              pass&#10;E       fixture 'test_non_existent_pdf_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/data_ingestion/test_document_processor.py:27">file /app/backend/tests/data_ingestion/test_document_processor.py, line 27
  @pytest.mark.asyncio
  async def test_process_document_error(request):
      test_non_existent_pdf_path = request.getfixturevalue("test_non_existent_pdf_path")
      processor = DocumentProcessor()
      with pytest.raises(DocumentProcessingError):
          async for _ in processor.process_document(test_non_existent_pdf_path):
              pass
E       fixture 'test_non_existent_pdf_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/data_ingestion/test_document_processor.py:27</failure></testcase><testcase classname="tests.data_ingestion.test_excel_processor" name="test_process_excel_file" time="0.033"><error message="failed on setup with &quot;ModuleNotFoundError: No module named 'openpyxl'&quot;">backend/tests/data_ingestion/test_excel_processor.py:35: in sample_excel_path
    with pd.ExcelWriter(file_path) as writer:
.venv/lib/python3.12/site-packages/pandas/io/excel/_openpyxl.py:57: in __init__
    from openpyxl.workbook import Workbook
E   ModuleNotFoundError: No module named 'openpyxl'</error></testcase><testcase classname="tests.data_ingestion.test_excel_processor" name="test_process_empty_excel" time="0.052"><failure message="ModuleNotFoundError: No module named 'openpyxl'">backend/tests/data_ingestion/test_excel_processor.py:69: in test_process_empty_excel
    df.to_excel(empty_file, index=False)
.venv/lib/python3.12/site-packages/pandas/core/generic.py:2345: in to_excel
    formatter.write(
.venv/lib/python3.12/site-packages/pandas/io/formats/excel.py:946: in write
    writer = ExcelWriter(  # type: ignore[abstract]
.venv/lib/python3.12/site-packages/pandas/io/excel/_openpyxl.py:57: in __init__
    from openpyxl.workbook import Workbook
E   ModuleNotFoundError: No module named 'openpyxl'</failure></testcase><testcase classname="tests.data_ingestion.test_excel_processor" name="test_process_large_excel" time="0.032"><failure message="ModuleNotFoundError: No module named 'openpyxl'">backend/tests/data_ingestion/test_excel_processor.py:91: in test_process_large_excel
    large_df.to_excel(large_file, index=False)
.venv/lib/python3.12/site-packages/pandas/core/generic.py:2345: in to_excel
    formatter.write(
.venv/lib/python3.12/site-packages/pandas/io/formats/excel.py:946: in write
    writer = ExcelWriter(  # type: ignore[abstract]
.venv/lib/python3.12/site-packages/pandas/io/excel/_openpyxl.py:57: in __init__
    from openpyxl.workbook import Workbook
E   ModuleNotFoundError: No module named 'openpyxl'</failure></testcase><testcase classname="tests.data_ingestion.test_excel_processor" name="test_process_multiple_sheets" time="0.029"><error message="failed on setup with &quot;ModuleNotFoundError: No module named 'openpyxl'&quot;">backend/tests/data_ingestion/test_excel_processor.py:35: in sample_excel_path
    with pd.ExcelWriter(file_path) as writer:
.venv/lib/python3.12/site-packages/pandas/io/excel/_openpyxl.py:57: in __init__
    from openpyxl.workbook import Workbook
E   ModuleNotFoundError: No module named 'openpyxl'</error></testcase><testcase classname="tests.data_ingestion.test_excel_processor" name="test_process_invalid_file" time="0.030"><failure message="TypeError: DocumentProcessingError.__init__() missing 2 required positional arguments: 'error_type' and 'message'">backend/rag_solution/data_ingestion/excel_processor.py:39: in process
    sheets_data = pd.read_excel(file_path, sheet_name=None)
.venv/lib/python3.12/site-packages/pandas/io/excel/_base.py:504: in read_excel
    io = ExcelFile(
.venv/lib/python3.12/site-packages/pandas/io/excel/_base.py:1567: in __init__
    raise ValueError(
E   ValueError: Excel file format cannot be determined, you must specify an engine manually.

During handling of the above exception, another exception occurred:
backend/tests/data_ingestion/test_excel_processor.py:128: in test_process_invalid_file
    async for _ in excel_processor.process(invalid_file):
backend/rag_solution/data_ingestion/excel_processor.py:58: in process
    raise DocumentProcessingError(
E   TypeError: DocumentProcessingError.__init__() missing 2 required positional arguments: 'error_type' and 'message'</failure></testcase><testcase classname="tests.data_ingestion.test_excel_processor" name="test_process_nonexistent_file" time="0.029"><failure message="TypeError: DocumentProcessingError.__init__() missing 2 required positional arguments: 'error_type' and 'message'">backend/rag_solution/data_ingestion/excel_processor.py:39: in process
    sheets_data = pd.read_excel(file_path, sheet_name=None)
.venv/lib/python3.12/site-packages/pandas/io/excel/_base.py:504: in read_excel
    io = ExcelFile(
.venv/lib/python3.12/site-packages/pandas/io/excel/_base.py:1563: in __init__
    ext = inspect_excel_format(
.venv/lib/python3.12/site-packages/pandas/io/excel/_base.py:1419: in inspect_excel_format
    with get_handle(
.venv/lib/python3.12/site-packages/pandas/io/common.py:872: in get_handle
    handle = open(handle, ioargs.mode)
E   FileNotFoundError: [Errno 2] No such file or directory: '/tmp/nonexistent.xlsx'

During handling of the above exception, another exception occurred:
backend/tests/data_ingestion/test_excel_processor.py:137: in test_process_nonexistent_file
    async for _ in excel_processor.process("/tmp/nonexistent.xlsx"):
backend/rag_solution/data_ingestion/excel_processor.py:58: in process
    raise DocumentProcessingError(
E   TypeError: DocumentProcessingError.__init__() missing 2 required positional arguments: 'error_type' and 'message'</failure></testcase><testcase classname="tests.data_ingestion.test_excel_processor" name="test_document_metadata" time="0.028"><error message="failed on setup with &quot;ModuleNotFoundError: No module named 'openpyxl'&quot;">backend/tests/data_ingestion/test_excel_processor.py:35: in sample_excel_path
    with pd.ExcelWriter(file_path) as writer:
.venv/lib/python3.12/site-packages/pandas/io/excel/_openpyxl.py:57: in __init__
    from openpyxl.workbook import Workbook
E   ModuleNotFoundError: No module named 'openpyxl'</error></testcase><testcase classname="tests.data_ingestion.test_excel_processor" name="test_chunking_integration" time="0.027"><error message="failed on setup with &quot;ModuleNotFoundError: No module named 'openpyxl'&quot;">backend/tests/data_ingestion/test_excel_processor.py:35: in sample_excel_path
    with pd.ExcelWriter(file_path) as writer:
.venv/lib/python3.12/site-packages/pandas/io/excel/_openpyxl.py:57: in __init__
    from openpyxl.workbook import Workbook
E   ModuleNotFoundError: No module named 'openpyxl'</error></testcase><testcase classname="tests.data_ingestion.test_excel_processor" name="test_special_characters" time="0.030"><failure message="ModuleNotFoundError: No module named 'openpyxl'">backend/tests/data_ingestion/test_excel_processor.py:176: in test_special_characters
    df.to_excel(special_file, index=False)
.venv/lib/python3.12/site-packages/pandas/core/generic.py:2345: in to_excel
    formatter.write(
.venv/lib/python3.12/site-packages/pandas/io/formats/excel.py:946: in write
    writer = ExcelWriter(  # type: ignore[abstract]
.venv/lib/python3.12/site-packages/pandas/io/excel/_openpyxl.py:57: in __init__
    from openpyxl.workbook import Workbook
E   ModuleNotFoundError: No module named 'openpyxl'</failure></testcase><testcase classname="tests.data_ingestion.test_ingestion" name="test_document_store" time="2.895"><failure message="AttributeError: 'DocumentStore' object has no attribute 'add_document'. Did you mean: 'get_documents'?">backend/tests/data_ingestion/test_ingestion.py:52: in test_document_store
    await store.add_document(sample_document)
E   AttributeError: 'DocumentStore' object has no attribute 'add_document'. Did you mean: 'get_documents'?</failure></testcase><testcase classname="tests.data_ingestion.test_pdf_processor" name="test_pdf_processor_initialization" time="0.052" /><testcase classname="tests.data_ingestion.test_pdf_processor" name="test_pdf_text_extraction" time="0.071"><error message="failed on setup with &quot;FileNotFoundError: No such file: 'backend/tests/test_files/test_image.png'&quot;">backend/tests/data_ingestion/test_pdf_processor.py:53: in complex_test_pdf_path
    page3.insert_image(img_rect, filename="backend/tests/test_files/test_image.png")
.venv/lib/python3.12/site-packages/pymupdf/utils.py:336: in insert_image
    raise FileNotFoundError("No such file: '%s'" % filename)
E   FileNotFoundError: No such file: 'backend/tests/test_files/test_image.png'</error></testcase><testcase classname="tests.data_ingestion.test_pdf_processor" name="test_pdf_table_extraction_methods" time="0.058"><error message="failed on setup with &quot;FileNotFoundError: No such file: 'backend/tests/test_files/test_image.png'&quot;">backend/tests/data_ingestion/test_pdf_processor.py:53: in complex_test_pdf_path
    page3.insert_image(img_rect, filename="backend/tests/test_files/test_image.png")
.venv/lib/python3.12/site-packages/pymupdf/utils.py:336: in insert_image
    raise FileNotFoundError("No such file: '%s'" % filename)
E   FileNotFoundError: No such file: 'backend/tests/test_files/test_image.png'</error></testcase><testcase classname="tests.data_ingestion.test_pdf_processor" name="test_table_validation" time="0.046" /><testcase classname="tests.data_ingestion.test_pdf_processor" name="test_document_chunk_creation" time="0.047" /><testcase classname="tests.data_ingestion.test_pdf_processor" name="test_metadata_inheritance" time="0.057"><error message="failed on setup with &quot;FileNotFoundError: No such file: 'backend/tests/test_files/test_image.png'&quot;">backend/tests/data_ingestion/test_pdf_processor.py:53: in complex_test_pdf_path
    page3.insert_image(img_rect, filename="backend/tests/test_files/test_image.png")
.venv/lib/python3.12/site-packages/pymupdf/utils.py:336: in insert_image
    raise FileNotFoundError("No such file: '%s'" % filename)
E   FileNotFoundError: No such file: 'backend/tests/test_files/test_image.png'</error></testcase><testcase classname="tests.data_ingestion.test_pdf_processor" name="test_error_handling_scenarios" time="0.060"><failure message="TypeError: DocumentProcessingError.__init__() missing 2 required positional arguments: 'error_type' and 'message'">backend/rag_solution/data_ingestion/pdf_processor.py:41: in process
    with pymupdf.open(file_path) as doc:
.venv/lib/python3.12/site-packages/pymupdf/__init__.py:2955: in __init__
    raise FileNotFoundError(msg)
E   pymupdf.FileNotFoundError: no such file: '/tmp/nonexistent.pdf'

During handling of the above exception, another exception occurred:
backend/tests/data_ingestion/test_pdf_processor.py:255: in test_error_handling_scenarios
    async for _ in pdf_processor.process("/tmp/nonexistent.pdf", "test_id"):
backend/rag_solution/data_ingestion/pdf_processor.py:70: in process
    raise DocumentProcessingError(f"Error processing PDF file {file_path}") from e
E   TypeError: DocumentProcessingError.__init__() missing 2 required positional arguments: 'error_type' and 'message'</failure></testcase><testcase classname="tests.data_ingestion.test_pdf_processor" name="test_concurrent_processing" time="0.065"><error message="failed on setup with &quot;FileNotFoundError: No such file: 'backend/tests/test_files/test_image.png'&quot;">backend/tests/data_ingestion/test_pdf_processor.py:53: in complex_test_pdf_path
    page3.insert_image(img_rect, filename="backend/tests/test_files/test_image.png")
.venv/lib/python3.12/site-packages/pymupdf/utils.py:336: in insert_image
    raise FileNotFoundError("No such file: '%s'" % filename)
E   FileNotFoundError: No such file: 'backend/tests/test_files/test_image.png'</error></testcase><testcase classname="tests.data_ingestion.test_pdf_processor" name="test_pdf_processing_ibm_annual_report" time="0.051"><failure message="TypeError: 'async_generator' object is not iterable">backend/tests/data_ingestion/test_pdf_processor.py:334: in test_pdf_processing_ibm_annual_report
    for doc in pdf_processor.process(str(ibm_annual_report_path), "test_id"):
E   TypeError: 'async_generator' object is not iterable</failure></testcase><testcase classname="tests.data_ingestion.test_txt_processor" name="test_process_txt" time="0.036"><error message="failed on setup with &quot;file /app/backend/tests/data_ingestion/test_txt_processor.py, line 8&#10;  @pytest.mark.asyncio&#10;  async def test_process_txt(test_txt_path):&#10;      processor = TxtProcessor()&#10;      docs = []&#10;      async for document in processor.process(test_txt_path):&#10;          docs.append(document)&#10;&#10;      assert len(docs) &gt; 0&#10;      assert all(isinstance(doc, Document) for doc in docs)&#10;      assert docs[0].name == str(test_txt_path)&#10;      assert len(docs[0].chunks) &gt; 0&#10;E       fixture 'test_txt_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/data_ingestion/test_txt_processor.py:8&quot;">file /app/backend/tests/data_ingestion/test_txt_processor.py, line 8
  @pytest.mark.asyncio
  async def test_process_txt(test_txt_path):
      processor = TxtProcessor()
      docs = []
      async for document in processor.process(test_txt_path):
          docs.append(document)

      assert len(docs) &gt; 0
      assert all(isinstance(doc, Document) for doc in docs)
      assert docs[0].name == str(test_txt_path)
      assert len(docs[0].chunks) &gt; 0
E       fixture 'test_txt_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/data_ingestion/test_txt_processor.py:8</error></testcase><testcase classname="tests.data_ingestion.test_txt_processor" name="test_process_txt_error" time="0.029"><error message="failed on setup with &quot;file /app/backend/tests/data_ingestion/test_txt_processor.py, line 21&#10;  @pytest.mark.asyncio&#10;  async def test_process_txt_error(test_non_existent_pdf_path):&#10;      processor = TxtProcessor()&#10;      with pytest.raises(DocumentProcessingError):&#10;          async for _ in processor.process(test_non_existent_pdf_path):&#10;              pass&#10;E       fixture 'test_non_existent_pdf_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/data_ingestion/test_txt_processor.py:21&quot;">file /app/backend/tests/data_ingestion/test_txt_processor.py, line 21
  @pytest.mark.asyncio
  async def test_process_txt_error(test_non_existent_pdf_path):
      processor = TxtProcessor()
      with pytest.raises(DocumentProcessingError):
          async for _ in processor.process(test_non_existent_pdf_path):
              pass
E       fixture 'test_non_existent_pdf_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/data_ingestion/test_txt_processor.py:21</error></testcase><testcase classname="tests.data_ingestion.test_word_processor" name="test_process_word" time="0.030"><error message="failed on setup with &quot;file /app/backend/tests/data_ingestion/test_word_processor.py, line 10&#10;  @pytest.mark.asyncio&#10;  async def test_process_word(test_word_path):&#10;      processor = WordProcessor()&#10;      docs = []&#10;      async for document in processor.process(test_word_path):&#10;          docs.append(document)&#10;&#10;      assert len(docs) &gt; 0&#10;      assert all(isinstance(doc, Document) for doc in docs)&#10;      assert docs[0].name == os.path.basename(str(test_word_path))&#10;      assert len(docs[0].chunks) &gt; 0&#10;E       fixture 'test_word_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/data_ingestion/test_word_processor.py:10&quot;">file /app/backend/tests/data_ingestion/test_word_processor.py, line 10
  @pytest.mark.asyncio
  async def test_process_word(test_word_path):
      processor = WordProcessor()
      docs = []
      async for document in processor.process(test_word_path):
          docs.append(document)

      assert len(docs) &gt; 0
      assert all(isinstance(doc, Document) for doc in docs)
      assert docs[0].name == os.path.basename(str(test_word_path))
      assert len(docs[0].chunks) &gt; 0
E       fixture 'test_word_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/data_ingestion/test_word_processor.py:10</error></testcase><testcase classname="tests.data_ingestion.test_word_processor" name="test_process_word_error" time="0.029"><error message="failed on setup with &quot;file /app/backend/tests/data_ingestion/test_word_processor.py, line 23&#10;  @pytest.mark.asyncio&#10;  async def test_process_word_error(test_non_existent_pdf_path):&#10;      processor = WordProcessor()&#10;      with pytest.raises(DocumentProcessingError):&#10;          async for _ in processor.process(test_non_existent_pdf_path):&#10;              pass&#10;E       fixture 'test_non_existent_pdf_path' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/data_ingestion/test_word_processor.py:23&quot;">file /app/backend/tests/data_ingestion/test_word_processor.py, line 23
  @pytest.mark.asyncio
  async def test_process_word_error(test_non_existent_pdf_path):
      processor = WordProcessor()
      with pytest.raises(DocumentProcessingError):
          async for _ in processor.process(test_non_existent_pdf_path):
              pass
E       fixture 'test_non_existent_pdf_path' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/data_ingestion/test_word_processor.py:23</error></testcase><testcase classname="tests.evaluation.test_evaluation" name="test_rag_evaluator" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.evaluation.test_evaluation" name="test_calculate_relevance_score" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.evaluation.test_evaluation" name="test_calculate_coherence_score" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.evaluation.test_evaluation" name="test_calculate_faithfulness_score" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.evaluation.test_evaluation" name="test_evaluate" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.evaluation.test_evaluator" name="test_evaluator_initialization" time="11.079" /><testcase classname="tests.evaluation.test_evaluator" name="test_evaluate_cosine" time="4.615"><error message="failed on setup with &quot;pydantic_core._pydantic_core.ValidationError: 3 validation errors for QueryResult&#10;chunk&#10;  Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;score&#10;  Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;embeddings&#10;  Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&quot;">backend/tests/evaluation/test_evaluator.py:21: in sample_query_result
    QueryResult(data=[
E   pydantic_core._pydantic_core.ValidationError: 3 validation errors for QueryResult
E   chunk
E     Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   score
E     Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   embeddings
E     Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing</error></testcase><testcase classname="tests.evaluation.test_evaluator" name="test_calculate_relevance_score" time="4.395"><error message="failed on setup with &quot;pydantic_core._pydantic_core.ValidationError: 3 validation errors for QueryResult&#10;chunk&#10;  Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;score&#10;  Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;embeddings&#10;  Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&quot;">backend/tests/evaluation/test_evaluator.py:21: in sample_query_result
    QueryResult(data=[
E   pydantic_core._pydantic_core.ValidationError: 3 validation errors for QueryResult
E   chunk
E     Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   score
E     Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   embeddings
E     Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing</error></testcase><testcase classname="tests.evaluation.test_evaluator" name="test_calculate_coherence_score" time="3.570" /><testcase classname="tests.evaluation.test_evaluator" name="test_calculate_faithfulness_score" time="3.655"><error message="failed on setup with &quot;pydantic_core._pydantic_core.ValidationError: 3 validation errors for QueryResult&#10;chunk&#10;  Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;score&#10;  Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;embeddings&#10;  Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&quot;">backend/tests/evaluation/test_evaluator.py:21: in sample_query_result
    QueryResult(data=[
E   pydantic_core._pydantic_core.ValidationError: 3 validation errors for QueryResult
E   chunk
E     Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   score
E     Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   embeddings
E     Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing</error></testcase><testcase classname="tests.evaluation.test_evaluator" name="test_evaluate_async" time="3.740" /><testcase classname="tests.evaluation.test_evaluator" name="test_evaluate_async_error_handling" time="3.669"><failure message="Failed: DID NOT RAISE &lt;class 'RuntimeError'&gt;">backend/tests/evaluation/test_evaluator.py:150: in test_evaluate_async_error_handling
    with pytest.raises(RuntimeError):
E   Failed: DID NOT RAISE &lt;class 'RuntimeError'&gt;</failure></testcase><testcase classname="tests.evaluation.test_evaluator" name="test_edge_cases" time="3.911"><failure message="pydantic_core._pydantic_core.ValidationError: 3 validation errors for QueryResult&#10;chunk&#10;  Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;score&#10;  Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;embeddings&#10;  Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing">backend/tests/evaluation/test_evaluator.py:163: in test_edge_cases
    single_doc = [QueryResult(data=[DocumentChunk(chunk_id='1', text="Test", score=1.0)])]
E   pydantic_core._pydantic_core.ValidationError: 3 validation errors for QueryResult
E   chunk
E     Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   score
E     Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   embeddings
E     Field required [type=missing, input_value={'data': [DocumentChunk(c...one, document_id=None)]}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing</failure></testcase><testcase classname="tests.evaluation.test_evaluator" name="test_numerical_stability" time="3.468"><failure message="TypeError: only length-1 arrays can be converted to Python scalars">backend/tests/evaluation/test_evaluator.py:179: in test_numerical_stability
    score = evaluator._calculate_coherence_score("test", "test")
backend/rag_solution/evaluation/evaluator.py:78: in _calculate_coherence_score
    return float(coherence)
E   TypeError: only length-1 arrays can be converted to Python scalars</failure></testcase><testcase classname="tests.generation.test_generation" name="test_generator_factory_watsonx" time="0.006"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.generation.test_generation" name="test_generator_factory_openai" time="0.298"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.generation.test_generation" name="test_generator_factory_anthropic" time="0.006"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.generation.test_generation" name="test_generator_factory_invalid" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.generation.test_generation" name="test_generator_default_type" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.integration.test_chromadb_store.TestChromaDBStore" name="test_chroma_store_integration" time="0.029"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_chromadb_store.py, line 44&#10;      def test_chroma_store_integration(self, store):&#10;file /app/backend/tests/integration/test_chromadb_store.py, line 9&#10;      @pytest.fixture&#10;      @contextmanager&#10;      def store(self, chroma_store):&#10;E       fixture 'chroma_store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_chromadb_store.py:9&quot;">file /app/backend/tests/integration/test_chromadb_store.py, line 44
      def test_chroma_store_integration(self, store):
file /app/backend/tests/integration/test_chromadb_store.py, line 9
      @pytest.fixture
      @contextmanager
      def store(self, chroma_store):
E       fixture 'chroma_store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_chromadb_store.py:9</error></testcase><testcase classname="tests.integration.test_chromadb_store.TestChromaDBStore" name="test_chroma_store_errors" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_chromadb_store.py, line 66&#10;      def test_chroma_store_errors(self, store):&#10;file /app/backend/tests/integration/test_chromadb_store.py, line 9&#10;      @pytest.fixture&#10;      @contextmanager&#10;      def store(self, chroma_store):&#10;E       fixture 'chroma_store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_chromadb_store.py:9&quot;">file /app/backend/tests/integration/test_chromadb_store.py, line 66
      def test_chroma_store_errors(self, store):
file /app/backend/tests/integration/test_chromadb_store.py, line 9
      @pytest.fixture
      @contextmanager
      def store(self, chroma_store):
E       fixture 'chroma_store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_chromadb_store.py:9</error></testcase><testcase classname="tests.integration.test_configuration_errors" name="test_invalid_template_variables" time="0.031"><failure message="core.custom_exceptions.LLMProviderError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;llm_providers_name_key&quot;&#10;DETAIL:  Key (name)=(watsonx) already exists.&#10;&#10;[SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]&#10;[parameters: {'id': UUID('571bd124-8ed4-42ab-96bc-e61cb718c3b9'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:105: in create_provider
    raise e
backend/rag_solution/repository/llm_provider_repository.py:98: in create_provider
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.
E   
E   [SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]
E   [parameters: {'id': UUID('571bd124-8ed4-42ab-96bc-e61cb718c3b9'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/tests/integration/test_configuration_errors.py:29: in test_invalid_template_variables
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:85: in create_provider
    raise LLMProviderError(
E   core.custom_exceptions.LLMProviderError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.
E   
E   [SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]
E   [parameters: {'id': UUID('571bd124-8ed4-42ab-96bc-e61cb718c3b9'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</failure></testcase><testcase classname="tests.integration.test_configuration_errors" name="test_invalid_provider_configuration" time="0.029"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderInput&#10;base_url&#10;  String should match pattern '^https?://' [type=string_pattern_mismatch, input_value='invalid-url', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/string_pattern_mismatch">backend/tests/integration/test_configuration_errors.py:70: in test_invalid_provider_configuration
    provider_input = LLMProviderInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderInput
E   base_url
E     String should match pattern '^https?://' [type=string_pattern_mismatch, input_value='invalid-url', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.10/v/string_pattern_mismatch</failure></testcase><testcase classname="tests.integration.test_configuration_errors" name="test_invalid_model_configuration" time="0.031"><failure message="core.custom_exceptions.LLMProviderError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;llm_providers_name_key&quot;&#10;DETAIL:  Key (name)=(watsonx) already exists.&#10;&#10;[SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]&#10;[parameters: {'id': UUID('5407a471-8645-43b6-9128-657700415d9e'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:105: in create_provider
    raise e
backend/rag_solution/repository/llm_provider_repository.py:98: in create_provider
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.
E   
E   [SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]
E   [parameters: {'id': UUID('5407a471-8645-43b6-9128-657700415d9e'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/tests/integration/test_configuration_errors.py:106: in test_invalid_model_configuration
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:85: in create_provider
    raise LLMProviderError(
E   core.custom_exceptions.LLMProviderError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.
E   
E   [SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]
E   [parameters: {'id': UUID('5407a471-8645-43b6-9128-657700415d9e'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</failure></testcase><testcase classname="tests.integration.test_configuration_flow" name="test_complete_configuration_flow" time="0.032"><failure message="core.custom_exceptions.LLMProviderError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;llm_providers_name_key&quot;&#10;DETAIL:  Key (name)=(watsonx) already exists.&#10;&#10;[SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]&#10;[parameters: {'id': UUID('1b833082-0f79-4e54-ba2f-87218a236deb'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:105: in create_provider
    raise e
backend/rag_solution/repository/llm_provider_repository.py:98: in create_provider
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.
E   
E   [SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]
E   [parameters: {'id': UUID('1b833082-0f79-4e54-ba2f-87218a236deb'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/tests/integration/test_configuration_flow.py:29: in test_complete_configuration_flow
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:85: in create_provider
    raise LLMProviderError(
E   core.custom_exceptions.LLMProviderError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.
E   
E   [SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]
E   [parameters: {'id': UUID('1b833082-0f79-4e54-ba2f-87218a236deb'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</failure></testcase><testcase classname="tests.integration.test_configuration_flow" name="test_update_template_flow" time="0.041"><failure message="core.custom_exceptions.LLMProviderError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;llm_providers_name_key&quot;&#10;DETAIL:  Key (name)=(watsonx) already exists.&#10;&#10;[SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]&#10;[parameters: {'id': UUID('b39941f1-6669-4060-8990-1c404c8acd83'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:105: in create_provider
    raise e
backend/rag_solution/repository/llm_provider_repository.py:98: in create_provider
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.
E   
E   [SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]
E   [parameters: {'id': UUID('b39941f1-6669-4060-8990-1c404c8acd83'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/tests/integration/test_configuration_flow.py:141: in test_update_template_flow
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:85: in create_provider
    raise LLMProviderError(
E   core.custom_exceptions.LLMProviderError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.
E   
E   [SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]
E   [parameters: {'id': UUID('b39941f1-6669-4060-8990-1c404c8acd83'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</failure></testcase><testcase classname="tests.integration.test_elasticsearch_store.TestElasticsearchStore" name="test_elasticsearch_store_integration" time="0.029"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_elasticsearch_store.py, line 17&#10;      def test_elasticsearch_store_integration(self, store):&#10;file /app/backend/tests/integration/test_elasticsearch_store.py, line 12&#10;      @pytest.fixture&#10;      @contextmanager&#10;      def store(self, elasticsearch_store):&#10;E       fixture 'elasticsearch_store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_elasticsearch_store.py:12&quot;">file /app/backend/tests/integration/test_elasticsearch_store.py, line 17
      def test_elasticsearch_store_integration(self, store):
file /app/backend/tests/integration/test_elasticsearch_store.py, line 12
      @pytest.fixture
      @contextmanager
      def store(self, elasticsearch_store):
E       fixture 'elasticsearch_store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_elasticsearch_store.py:12</error></testcase><testcase classname="tests.integration.test_elasticsearch_store.TestElasticsearchStore" name="test_elasticsearch_store_errors" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_elasticsearch_store.py, line 39&#10;      def test_elasticsearch_store_errors(self, store):&#10;file /app/backend/tests/integration/test_elasticsearch_store.py, line 12&#10;      @pytest.fixture&#10;      @contextmanager&#10;      def store(self, elasticsearch_store):&#10;E       fixture 'elasticsearch_store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_elasticsearch_store.py:12&quot;">file /app/backend/tests/integration/test_elasticsearch_store.py, line 39
      def test_elasticsearch_store_errors(self, store):
file /app/backend/tests/integration/test_elasticsearch_store.py, line 12
      @pytest.fixture
      @contextmanager
      def store(self, elasticsearch_store):
E       fixture 'elasticsearch_store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_elasticsearch_store.py:12</error></testcase><testcase classname="tests.integration.test_milvus_store.TestMilvusStore" name="test_milvus_store_integration" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_milvus_store.py, line 15&#10;      def test_milvus_store_integration(self, store):&#10;file /app/backend/tests/integration/test_milvus_store.py, line 10&#10;      @pytest.fixture&#10;      @contextmanager&#10;      def store(self, milvus_store):&#10;E       fixture 'milvus_store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_milvus_store.py:10&quot;">file /app/backend/tests/integration/test_milvus_store.py, line 15
      def test_milvus_store_integration(self, store):
file /app/backend/tests/integration/test_milvus_store.py, line 10
      @pytest.fixture
      @contextmanager
      def store(self, milvus_store):
E       fixture 'milvus_store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_milvus_store.py:10</error></testcase><testcase classname="tests.integration.test_milvus_store.TestMilvusStore" name="test_milvus_store_errors" time="0.029"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_milvus_store.py, line 37&#10;      def test_milvus_store_errors(self, store):&#10;file /app/backend/tests/integration/test_milvus_store.py, line 10&#10;      @pytest.fixture&#10;      @contextmanager&#10;      def store(self, milvus_store):&#10;E       fixture 'milvus_store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_milvus_store.py:10&quot;">file /app/backend/tests/integration/test_milvus_store.py, line 37
      def test_milvus_store_errors(self, store):
file /app/backend/tests/integration/test_milvus_store.py, line 10
      @pytest.fixture
      @contextmanager
      def store(self, milvus_store):
E       fixture 'milvus_store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_milvus_store.py:10</error></testcase><testcase classname="tests.integration.test_pinecone_store.TestPineconeStore" name="test_pinecone_store_integration" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_pinecone_store.py, line 17&#10;      def test_pinecone_store_integration(self, store):&#10;file /app/backend/tests/integration/test_pinecone_store.py, line 12&#10;      @pytest.fixture&#10;      @contextmanager&#10;      def store(self, pinecone_store):&#10;E       fixture 'pinecone_store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_pinecone_store.py:12&quot;">file /app/backend/tests/integration/test_pinecone_store.py, line 17
      def test_pinecone_store_integration(self, store):
file /app/backend/tests/integration/test_pinecone_store.py, line 12
      @pytest.fixture
      @contextmanager
      def store(self, pinecone_store):
E       fixture 'pinecone_store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_pinecone_store.py:12</error></testcase><testcase classname="tests.integration.test_pinecone_store.TestPineconeStore" name="test_pinecone_store_errors" time="0.031"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_pinecone_store.py, line 39&#10;      def test_pinecone_store_errors(self, store):&#10;file /app/backend/tests/integration/test_pinecone_store.py, line 12&#10;      @pytest.fixture&#10;      @contextmanager&#10;      def store(self, pinecone_store):&#10;E       fixture 'pinecone_store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_pinecone_store.py:12&quot;">file /app/backend/tests/integration/test_pinecone_store.py, line 39
      def test_pinecone_store_errors(self, store):
file /app/backend/tests/integration/test_pinecone_store.py, line 12
      @pytest.fixture
      @contextmanager
      def store(self, pinecone_store):
E       fixture 'pinecone_store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_pinecone_store.py:12</error></testcase><testcase classname="tests.integration.test_pipeline_errors" name="test_provider_initialization_error" time="0.033"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_pipeline_errors.py, line 93&#10;  @pytest.mark.asyncio&#10;  async def test_provider_initialization_error(pipeline_setup):&#10;      &quot;&quot;&quot;Test handling provider initialization errors.&quot;&quot;&quot;&#10;      # Break provider initialization&#10;      with patch('rag_solution.generation.providers.watsonx.WatsonXProvider.initialize') as mock_init:&#10;          mock_init.side_effect = ConfigurationError(&quot;Failed to initialize provider&quot;)&#10;&#10;          # Initialize pipeline&#10;          with pytest.raises(ConfigurationError) as exc_info:&#10;              await pipeline_setup['pipeline_service'].initialize(&#10;                  collection_name=pipeline_setup['collection'].vector_db_name,&#10;                  config=PipelineConfigInput(&#10;                      name=&quot;test-pipeline&quot;,&#10;                      description=&quot;Test pipeline&quot;,&#10;                      chunking_strategy=&quot;fixed&quot;,&#10;                      embedding_model=&quot;sentence-transformers/all-mpnet-base-v2&quot;,&#10;                      retriever=&quot;vector&quot;,&#10;                      context_strategy=&quot;priority&quot;,&#10;                      provider_id=pipeline_setup['provider_service'].get_default_provider().id,&#10;                      enable_logging=True,&#10;                      max_context_length=2048,&#10;                      timeout=30.0,&#10;                      is_default=False&#10;                  )&#10;              )&#10;&#10;          assert &quot;Failed to initialize provider&quot; in str(exc_info.value)&#10;file /app/backend/tests/integration/test_pipeline_errors.py, line 28&#10;  @pytest.fixture&#10;  def pipeline_setup(db_session: Session, test_user, test_collection):&#10;E       fixture 'test_user' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_pipeline_errors.py:28&quot;">file /app/backend/tests/integration/test_pipeline_errors.py, line 93
  @pytest.mark.asyncio
  async def test_provider_initialization_error(pipeline_setup):
      """Test handling provider initialization errors."""
      # Break provider initialization
      with patch('rag_solution.generation.providers.watsonx.WatsonXProvider.initialize') as mock_init:
          mock_init.side_effect = ConfigurationError("Failed to initialize provider")

          # Initialize pipeline
          with pytest.raises(ConfigurationError) as exc_info:
              await pipeline_setup['pipeline_service'].initialize(
                  collection_name=pipeline_setup['collection'].vector_db_name,
                  config=PipelineConfigInput(
                      name="test-pipeline",
                      description="Test pipeline",
                      chunking_strategy="fixed",
                      embedding_model="sentence-transformers/all-mpnet-base-v2",
                      retriever="vector",
                      context_strategy="priority",
                      provider_id=pipeline_setup['provider_service'].get_default_provider().id,
                      enable_logging=True,
                      max_context_length=2048,
                      timeout=30.0,
                      is_default=False
                  )
              )

          assert "Failed to initialize provider" in str(exc_info.value)
file /app/backend/tests/integration/test_pipeline_errors.py, line 28
  @pytest.fixture
  def pipeline_setup(db_session: Session, test_user, test_collection):
E       fixture 'test_user' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_pipeline_errors.py:28</error></testcase><testcase classname="tests.integration.test_pipeline_errors" name="test_provider_authentication_error" time="0.031"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_pipeline_errors.py, line 121&#10;  @pytest.mark.asyncio&#10;  async def test_provider_authentication_error(pipeline_setup):&#10;      &quot;&quot;&quot;Test handling provider authentication errors.&quot;&quot;&quot;&#10;      # Break provider authentication&#10;      with patch('rag_solution.generation.providers.watsonx.WatsonXProvider.authenticate') as mock_auth:&#10;          mock_auth.side_effect = LLMProviderError(&quot;watsonx&quot;, &quot;authentication&quot;, &quot;Authentication failed&quot;)&#10;&#10;          search_input = SearchInput(&#10;              question=&quot;Test query&quot;,&#10;              collection_id=pipeline_setup['collection'].id,&#10;              pipeline_id=UUID(&quot;87654321-4321-8765-4321-876543210987&quot;)&#10;          )&#10;&#10;          # Execute pipeline&#10;          result = await pipeline_setup['pipeline_service'].execute_pipeline(&#10;              search_input,&#10;              pipeline_setup['user'].id&#10;          )&#10;          assert result.evaluation is not None&#10;          assert &quot;error&quot; in result.evaluation&#10;          assert &quot;Authentication failed&quot; in str(result.evaluation['error'])&#10;file /app/backend/tests/integration/test_pipeline_errors.py, line 28&#10;  @pytest.fixture&#10;  def pipeline_setup(db_session: Session, test_user, test_collection):&#10;E       fixture 'test_user' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_pipeline_errors.py:28&quot;">file /app/backend/tests/integration/test_pipeline_errors.py, line 121
  @pytest.mark.asyncio
  async def test_provider_authentication_error(pipeline_setup):
      """Test handling provider authentication errors."""
      # Break provider authentication
      with patch('rag_solution.generation.providers.watsonx.WatsonXProvider.authenticate') as mock_auth:
          mock_auth.side_effect = LLMProviderError("watsonx", "authentication", "Authentication failed")

          search_input = SearchInput(
              question="Test query",
              collection_id=pipeline_setup['collection'].id,
              pipeline_id=UUID("87654321-4321-8765-4321-876543210987")
          )

          # Execute pipeline
          result = await pipeline_setup['pipeline_service'].execute_pipeline(
              search_input,
              pipeline_setup['user'].id
          )
          assert result.evaluation is not None
          assert "error" in result.evaluation
          assert "Authentication failed" in str(result.evaluation['error'])
file /app/backend/tests/integration/test_pipeline_errors.py, line 28
  @pytest.fixture
  def pipeline_setup(db_session: Session, test_user, test_collection):
E       fixture 'test_user' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_pipeline_errors.py:28</error></testcase><testcase classname="tests.integration.test_pipeline_errors" name="test_template_formatting_error" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_pipeline_errors.py, line 143&#10;  @pytest.mark.asyncio&#10;  async def test_template_formatting_error(pipeline_setup):&#10;      &quot;&quot;&quot;Test handling template formatting errors.&quot;&quot;&quot;&#10;      # Create invalid template&#10;      template_input = PromptTemplateInput(&#10;          name=&quot;invalid-template&quot;,&#10;          provider=&quot;watsonx&quot;,&#10;          template_type=PromptTemplateType.RAG_QUERY,&#10;          template_format=&quot;Invalid {missing}&quot;,  # Missing required placeholder&#10;          input_variables={&quot;missing&quot;: &quot;str&quot;},  # Invalid variables&#10;          validation_schema={&#10;              &quot;model&quot;: &quot;PromptVariables&quot;,&#10;              &quot;fields&quot;: {&#10;                  &quot;missing&quot;: {&quot;type&quot;: &quot;str&quot;, &quot;min_length&quot;: 1}&#10;              },&#10;              &quot;required&quot;: [&quot;missing&quot;]&#10;          },&#10;          example_inputs={&#10;              &quot;missing&quot;: &quot;Example value&quot;&#10;          },&#10;          is_default=True&#10;      )&#10;      template = pipeline_setup['template_service'].create_or_update_template(&#10;          pipeline_setup['user'].id,&#10;          template_input&#10;      )&#10;&#10;      search_input = SearchInput(&#10;          question=&quot;Test query&quot;,&#10;          collection_id=pipeline_setup['collection'].id,&#10;          pipeline_id=UUID(&quot;87654321-4321-8765-4321-876543210987&quot;)&#10;      )&#10;&#10;      # Execute pipeline&#10;      result = await pipeline_setup['pipeline_service'].execute_pipeline(&#10;          search_input,&#10;          pipeline_setup['user'].id&#10;      )&#10;      assert result.generated_answer != &quot;&quot;  # Should use fallback template&#10;      assert result.evaluation is not None&#10;file /app/backend/tests/integration/test_pipeline_errors.py, line 28&#10;  @pytest.fixture&#10;  def pipeline_setup(db_session: Session, test_user, test_collection):&#10;E       fixture 'test_user' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_pipeline_errors.py:28&quot;">file /app/backend/tests/integration/test_pipeline_errors.py, line 143
  @pytest.mark.asyncio
  async def test_template_formatting_error(pipeline_setup):
      """Test handling template formatting errors."""
      # Create invalid template
      template_input = PromptTemplateInput(
          name="invalid-template",
          provider="watsonx",
          template_type=PromptTemplateType.RAG_QUERY,
          template_format="Invalid {missing}",  # Missing required placeholder
          input_variables={"missing": "str"},  # Invalid variables
          validation_schema={
              "model": "PromptVariables",
              "fields": {
                  "missing": {"type": "str", "min_length": 1}
              },
              "required": ["missing"]
          },
          example_inputs={
              "missing": "Example value"
          },
          is_default=True
      )
      template = pipeline_setup['template_service'].create_or_update_template(
          pipeline_setup['user'].id,
          template_input
      )

      search_input = SearchInput(
          question="Test query",
          collection_id=pipeline_setup['collection'].id,
          pipeline_id=UUID("87654321-4321-8765-4321-876543210987")
      )

      # Execute pipeline
      result = await pipeline_setup['pipeline_service'].execute_pipeline(
          search_input,
          pipeline_setup['user'].id
      )
      assert result.generated_answer != ""  # Should use fallback template
      assert result.evaluation is not None
file /app/backend/tests/integration/test_pipeline_errors.py, line 28
  @pytest.fixture
  def pipeline_setup(db_session: Session, test_user, test_collection):
E       fixture 'test_user' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_pipeline_errors.py:28</error></testcase><testcase classname="tests.integration.test_pipeline_errors" name="test_retrieval_error" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_pipeline_errors.py, line 184&#10;  @pytest.mark.asyncio&#10;  async def test_retrieval_error(pipeline_setup):&#10;      &quot;&quot;&quot;Test handling retrieval errors.&quot;&quot;&quot;&#10;      # Break vector store connection&#10;      with patch('vectordbs.milvus_store.MilvusStore.search') as mock_search:&#10;          mock_search.side_effect = Exception(&quot;Vector store error&quot;)&#10;&#10;          search_input = SearchInput(&#10;              question=&quot;Test query&quot;,&#10;              collection_id=pipeline_setup['collection'].id,&#10;              pipeline_id=UUID(&quot;87654321-4321-8765-4321-876543210987&quot;)&#10;          )&#10;&#10;          # Execute pipeline&#10;          result = await pipeline_setup['pipeline_service'].execute_pipeline(&#10;              search_input,&#10;              pipeline_setup['user'].id&#10;          )&#10;          assert &quot;couldn't find any relevant documents&quot; in result.generated_answer&#10;file /app/backend/tests/integration/test_pipeline_errors.py, line 28&#10;  @pytest.fixture&#10;  def pipeline_setup(db_session: Session, test_user, test_collection):&#10;E       fixture 'test_user' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_pipeline_errors.py:28&quot;">file /app/backend/tests/integration/test_pipeline_errors.py, line 184
  @pytest.mark.asyncio
  async def test_retrieval_error(pipeline_setup):
      """Test handling retrieval errors."""
      # Break vector store connection
      with patch('vectordbs.milvus_store.MilvusStore.search') as mock_search:
          mock_search.side_effect = Exception("Vector store error")

          search_input = SearchInput(
              question="Test query",
              collection_id=pipeline_setup['collection'].id,
              pipeline_id=UUID("87654321-4321-8765-4321-876543210987")
          )

          # Execute pipeline
          result = await pipeline_setup['pipeline_service'].execute_pipeline(
              search_input,
              pipeline_setup['user'].id
          )
          assert "couldn't find any relevant documents" in result.generated_answer
file /app/backend/tests/integration/test_pipeline_errors.py, line 28
  @pytest.fixture
  def pipeline_setup(db_session: Session, test_user, test_collection):
E       fixture 'test_user' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_pipeline_errors.py:28</error></testcase><testcase classname="tests.integration.test_pipeline_errors" name="test_generation_error" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_pipeline_errors.py, line 204&#10;  @pytest.mark.asyncio&#10;  async def test_generation_error(pipeline_setup):&#10;      &quot;&quot;&quot;Test handling text generation errors.&quot;&quot;&quot;&#10;      # Break text generation&#10;      with patch('rag_solution.generation.providers.watsonx.WatsonXProvider.generate_text') as mock_generate:&#10;          mock_generate.side_effect = LLMProviderError(&quot;watsonx&quot;, &quot;generation&quot;, &quot;Generation failed&quot;)&#10;&#10;          search_input = SearchInput(&#10;              question=&quot;Test query&quot;,&#10;              collection_id=pipeline_setup['collection'].id,&#10;              pipeline_id=UUID(&quot;87654321-4321-8765-4321-876543210987&quot;)&#10;          )&#10;&#10;          # Execute pipeline&#10;          result = await pipeline_setup['pipeline_service'].execute_pipeline(&#10;              search_input,&#10;              pipeline_setup['user'].id&#10;          )&#10;          assert result.generated_answer == &quot;&quot;&#10;          assert result.evaluation is not None&#10;          assert &quot;error&quot; in result.evaluation&#10;file /app/backend/tests/integration/test_pipeline_errors.py, line 28&#10;  @pytest.fixture&#10;  def pipeline_setup(db_session: Session, test_user, test_collection):&#10;E       fixture 'test_user' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_pipeline_errors.py:28&quot;">file /app/backend/tests/integration/test_pipeline_errors.py, line 204
  @pytest.mark.asyncio
  async def test_generation_error(pipeline_setup):
      """Test handling text generation errors."""
      # Break text generation
      with patch('rag_solution.generation.providers.watsonx.WatsonXProvider.generate_text') as mock_generate:
          mock_generate.side_effect = LLMProviderError("watsonx", "generation", "Generation failed")

          search_input = SearchInput(
              question="Test query",
              collection_id=pipeline_setup['collection'].id,
              pipeline_id=UUID("87654321-4321-8765-4321-876543210987")
          )

          # Execute pipeline
          result = await pipeline_setup['pipeline_service'].execute_pipeline(
              search_input,
              pipeline_setup['user'].id
          )
          assert result.generated_answer == ""
          assert result.evaluation is not None
          assert "error" in result.evaluation
file /app/backend/tests/integration/test_pipeline_errors.py, line 28
  @pytest.fixture
  def pipeline_setup(db_session: Session, test_user, test_collection):
E       fixture 'test_user' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_pipeline_errors.py:28</error></testcase><testcase classname="tests.integration.test_pipeline_errors" name="test_evaluation_error" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_pipeline_errors.py, line 226&#10;  @pytest.mark.asyncio&#10;  async def test_evaluation_error(pipeline_setup):&#10;      &quot;&quot;&quot;Test handling evaluation errors.&quot;&quot;&quot;&#10;      # Break evaluation&#10;      with patch('rag_solution.evaluation.evaluator.RAGEvaluator.evaluate') as mock_evaluate:&#10;          mock_evaluate.side_effect = Exception(&quot;Evaluation failed&quot;)&#10;&#10;          search_input = SearchInput(&#10;              question=&quot;Test query&quot;,&#10;              collection_id=pipeline_setup['collection'].id,&#10;              pipeline_id=UUID(&quot;87654321-4321-8765-4321-876543210987&quot;)&#10;          )&#10;&#10;          # Execute pipeline&#10;          result = await pipeline_setup['pipeline_service'].execute_pipeline(&#10;              search_input,&#10;              pipeline_setup['user'].id&#10;          )&#10;          assert result.generated_answer != &quot;&quot;  # Generation should still work&#10;          assert result.evaluation is not None&#10;          assert &quot;error&quot; in result.evaluation&#10;file /app/backend/tests/integration/test_pipeline_errors.py, line 28&#10;  @pytest.fixture&#10;  def pipeline_setup(db_session: Session, test_user, test_collection):&#10;E       fixture 'test_user' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_pipeline_errors.py:28&quot;">file /app/backend/tests/integration/test_pipeline_errors.py, line 226
  @pytest.mark.asyncio
  async def test_evaluation_error(pipeline_setup):
      """Test handling evaluation errors."""
      # Break evaluation
      with patch('rag_solution.evaluation.evaluator.RAGEvaluator.evaluate') as mock_evaluate:
          mock_evaluate.side_effect = Exception("Evaluation failed")

          search_input = SearchInput(
              question="Test query",
              collection_id=pipeline_setup['collection'].id,
              pipeline_id=UUID("87654321-4321-8765-4321-876543210987")
          )

          # Execute pipeline
          result = await pipeline_setup['pipeline_service'].execute_pipeline(
              search_input,
              pipeline_setup['user'].id
          )
          assert result.generated_answer != ""  # Generation should still work
          assert result.evaluation is not None
          assert "error" in result.evaluation
file /app/backend/tests/integration/test_pipeline_errors.py, line 28
  @pytest.fixture
  def pipeline_setup(db_session: Session, test_user, test_collection):
E       fixture 'test_user' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_pipeline_errors.py:28</error></testcase><testcase classname="tests.integration.test_pipeline_errors" name="test_invalid_configuration" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_pipeline_errors.py, line 248&#10;  @pytest.mark.asyncio&#10;  async def test_invalid_configuration(pipeline_setup):&#10;      &quot;&quot;&quot;Test handling invalid configuration.&quot;&quot;&quot;&#10;      # Create invalid parameters&#10;      parameters_input = LLMParametersInput(&#10;          name=&quot;invalid-params&quot;,&#10;          user_id=pipeline_setup['user'].id,&#10;          temperature=2.0,  # Invalid value&#10;          is_default=True&#10;      )&#10;&#10;      with pytest.raises(ValidationError):&#10;          pipeline_setup['parameters_service'].create_or_update_parameters(&#10;              pipeline_setup['user'].id,&#10;              parameters_input&#10;          )&#10;file /app/backend/tests/integration/test_pipeline_errors.py, line 28&#10;  @pytest.fixture&#10;  def pipeline_setup(db_session: Session, test_user, test_collection):&#10;E       fixture 'test_user' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_pipeline_errors.py:28&quot;">file /app/backend/tests/integration/test_pipeline_errors.py, line 248
  @pytest.mark.asyncio
  async def test_invalid_configuration(pipeline_setup):
      """Test handling invalid configuration."""
      # Create invalid parameters
      parameters_input = LLMParametersInput(
          name="invalid-params",
          user_id=pipeline_setup['user'].id,
          temperature=2.0,  # Invalid value
          is_default=True
      )

      with pytest.raises(ValidationError):
          pipeline_setup['parameters_service'].create_or_update_parameters(
              pipeline_setup['user'].id,
              parameters_input
          )
file /app/backend/tests/integration/test_pipeline_errors.py, line 28
  @pytest.fixture
  def pipeline_setup(db_session: Session, test_user, test_collection):
E       fixture 'test_user' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_pipeline_errors.py:28</error></testcase><testcase classname="tests.integration.test_pipeline_errors" name="test_missing_configuration" time="0.030"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_pipeline_errors.py, line 265&#10;  @pytest.mark.asyncio&#10;  async def test_missing_configuration(pipeline_setup):&#10;      &quot;&quot;&quot;Test handling missing configuration.&quot;&quot;&quot;&#10;      # Try to execute without initialization&#10;      search_input = SearchInput(&#10;          question=&quot;Test query&quot;,&#10;          collection_id=pipeline_setup['collection'].id,&#10;          pipeline_id=UUID(&quot;87654321-4321-8765-4321-876543210987&quot;)&#10;      )&#10;&#10;      with pytest.raises(ConfigurationError):&#10;          await pipeline_setup['pipeline_service'].execute_pipeline(&#10;              search_input,&#10;              pipeline_setup['user'].id&#10;          )&#10;file /app/backend/tests/integration/test_pipeline_errors.py, line 28&#10;  @pytest.fixture&#10;  def pipeline_setup(db_session: Session, test_user, test_collection):&#10;E       fixture 'test_user' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_pipeline_errors.py:28&quot;">file /app/backend/tests/integration/test_pipeline_errors.py, line 265
  @pytest.mark.asyncio
  async def test_missing_configuration(pipeline_setup):
      """Test handling missing configuration."""
      # Try to execute without initialization
      search_input = SearchInput(
          question="Test query",
          collection_id=pipeline_setup['collection'].id,
          pipeline_id=UUID("87654321-4321-8765-4321-876543210987")
      )

      with pytest.raises(ConfigurationError):
          await pipeline_setup['pipeline_service'].execute_pipeline(
              search_input,
              pipeline_setup['user'].id
          )
file /app/backend/tests/integration/test_pipeline_errors.py, line 28
  @pytest.fixture
  def pipeline_setup(db_session: Session, test_user, test_collection):
E       fixture 'test_user' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_pipeline_errors.py:28</error></testcase><testcase classname="tests.integration.test_pipeline_errors" name="test_concurrent_error_handling" time="0.033"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_pipeline_errors.py, line 281&#10;  @pytest.mark.asyncio&#10;  async def test_concurrent_error_handling(pipeline_setup):&#10;      &quot;&quot;&quot;Test handling errors in concurrent operations.&quot;&quot;&quot;&#10;      # Break provider randomly&#10;      def random_error(*args, **kwargs):&#10;file /app/backend/tests/integration/test_pipeline_errors.py, line 28&#10;  @pytest.fixture&#10;  def pipeline_setup(db_session: Session, test_user, test_collection):&#10;E       fixture 'test_user' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_pipeline_errors.py:28&quot;">file /app/backend/tests/integration/test_pipeline_errors.py, line 281
  @pytest.mark.asyncio
  async def test_concurrent_error_handling(pipeline_setup):
      """Test handling errors in concurrent operations."""
      # Break provider randomly
      def random_error(*args, **kwargs):
file /app/backend/tests/integration/test_pipeline_errors.py, line 28
  @pytest.fixture
  def pipeline_setup(db_session: Session, test_user, test_collection):
E       fixture 'test_user' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_pipeline_errors.py:28</error></testcase><testcase classname="tests.integration.test_pipeline_errors" name="test_missing_user_defaults" time="0.036"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_pipeline_errors.py, line 318&#10;  @pytest.mark.asyncio&#10;  async def test_missing_user_defaults(pipeline_setup):&#10;      &quot;&quot;&quot;Test handling missing user defaults.&quot;&quot;&quot;&#10;      # Remove user's default parameters and templates&#10;      pipeline_setup['parameters_service'].delete_parameters(pipeline_setup['user'].id)&#10;      pipeline_setup['template_service'].delete_template(pipeline_setup['user'].id)&#10;&#10;      search_input = SearchInput(&#10;          question=&quot;Test query&quot;,&#10;          collection_id=pipeline_setup['collection'].id,&#10;          pipeline_id=UUID(&quot;87654321-4321-8765-4321-876543210987&quot;)&#10;      )&#10;&#10;      # Execute pipeline - should fail gracefully&#10;      with pytest.raises(NotFoundError) as exc_info:&#10;          await pipeline_setup['pipeline_service'].execute_pipeline(&#10;              search_input,&#10;              pipeline_setup['user'].id&#10;          )&#10;      assert &quot;User's default parameters not found&quot; in str(exc_info.value)&#10;file /app/backend/tests/integration/test_pipeline_errors.py, line 28&#10;  @pytest.fixture&#10;  def pipeline_setup(db_session: Session, test_user, test_collection):&#10;E       fixture 'test_user' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_pipeline_errors.py:28&quot;">file /app/backend/tests/integration/test_pipeline_errors.py, line 318
  @pytest.mark.asyncio
  async def test_missing_user_defaults(pipeline_setup):
      """Test handling missing user defaults."""
      # Remove user's default parameters and templates
      pipeline_setup['parameters_service'].delete_parameters(pipeline_setup['user'].id)
      pipeline_setup['template_service'].delete_template(pipeline_setup['user'].id)

      search_input = SearchInput(
          question="Test query",
          collection_id=pipeline_setup['collection'].id,
          pipeline_id=UUID("87654321-4321-8765-4321-876543210987")
      )

      # Execute pipeline - should fail gracefully
      with pytest.raises(NotFoundError) as exc_info:
          await pipeline_setup['pipeline_service'].execute_pipeline(
              search_input,
              pipeline_setup['user'].id
          )
      assert "User's default parameters not found" in str(exc_info.value)
file /app/backend/tests/integration/test_pipeline_errors.py, line 28
  @pytest.fixture
  def pipeline_setup(db_session: Session, test_user, test_collection):
E       fixture 'test_user' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_setup, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_pipeline_errors.py:28</error></testcase><testcase classname="tests.integration.test_pipeline_flow" name="test_complete_pipeline_flow" time="0.046"><failure message="core.custom_exceptions.LLMProviderError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;llm_providers_name_key&quot;&#10;DETAIL:  Key (name)=(watsonx) already exists.&#10;&#10;[SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]&#10;[parameters: {'id': UUID('14c752ee-2f54-425f-8c35-84ae16b24923'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:105: in create_provider
    raise e
backend/rag_solution/repository/llm_provider_repository.py:98: in create_provider
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.
E   
E   [SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]
E   [parameters: {'id': UUID('14c752ee-2f54-425f-8c35-84ae16b24923'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/tests/integration/test_pipeline_flow.py:23: in test_complete_pipeline_flow
    provider = provider_service.create_provider(
backend/rag_solution/services/llm_provider_service.py:85: in create_provider
    raise LLMProviderError(
E   core.custom_exceptions.LLMProviderError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.
E   
E   [SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]
E   [parameters: {'id': UUID('14c752ee-2f54-425f-8c35-84ae16b24923'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</failure></testcase><testcase classname="tests.integration.test_pipeline_flow" name="test_pipeline_update_flow" time="0.029"><failure message="core.custom_exceptions.LLMProviderError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;llm_providers_name_key&quot;&#10;DETAIL:  Key (name)=(watsonx) already exists.&#10;&#10;[SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]&#10;[parameters: {'id': UUID('de9310c3-8251-4640-b021-534e8083908b'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:105: in create_provider
    raise e
backend/rag_solution/repository/llm_provider_repository.py:98: in create_provider
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.
E   
E   [SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]
E   [parameters: {'id': UUID('de9310c3-8251-4640-b021-534e8083908b'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/tests/integration/test_pipeline_flow.py:152: in test_pipeline_update_flow
    provider = provider_service.create_provider(
backend/rag_solution/services/llm_provider_service.py:85: in create_provider
    raise LLMProviderError(
E   core.custom_exceptions.LLMProviderError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.
E   
E   [SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]
E   [parameters: {'id': UUID('de9310c3-8251-4640-b021-534e8083908b'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</failure></testcase><testcase classname="tests.integration.test_provider_initialization" name="test_provider_initialization[WatsonXLLM-watsonx]" time="1.362"><failure message="AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'">backend/tests/integration/test_provider_initialization.py:104: in test_provider_initialization
    assert provider.llm_parameters_service.get_user_default(base_user.id) is not None
E   AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'</failure></testcase><testcase classname="tests.integration.test_provider_initialization" name="test_provider_initialization[OpenAILLM-openai]" time="0.074"><failure message="AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'">backend/tests/integration/test_provider_initialization.py:104: in test_provider_initialization
    assert provider.llm_parameters_service.get_user_default(base_user.id) is not None
E   AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'</failure></testcase><testcase classname="tests.integration.test_provider_initialization" name="test_provider_initialization[AnthropicLLM-anthropic]" time="0.061"><failure message="AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'">backend/tests/integration/test_provider_initialization.py:104: in test_provider_initialization
    assert provider.llm_parameters_service.get_user_default(base_user.id) is not None
E   AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'</failure></testcase><testcase classname="tests.integration.test_user_flow" name="test_login_redirect" time="0.033"><failure message="assert 500 == 302&#10; +  where 500 = &lt;Response [500 Internal Server Error]&gt;.status_code">backend/tests/integration/test_user_flow.py:21: in test_login_redirect
    assert response.status_code == 302
E   assert 500 == 302
E    +  where 500 = &lt;Response [500 Internal Server Error]&gt;.status_code</failure></testcase><testcase classname="tests.integration.test_user_flow" name="test_callback_success" time="0.034"><failure message="assert 404 == 302&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">backend/tests/integration/test_user_flow.py:37: in test_callback_success
    assert response.status_code == 302
E   assert 404 == 302
E    +  where 404 = &lt;Response [404 Not Found]&gt;.status_code</failure></testcase><testcase classname="tests.integration.test_user_flow" name="test_get_user_info" time="0.032"><failure message="assert 401 == 200&#10; +  where 401 = &lt;Response [401 Unauthorized]&gt;.status_code">backend/tests/integration/test_user_flow.py:50: in test_get_user_info
    assert response.status_code == 200
E   assert 401 == 200
E    +  where 401 = &lt;Response [401 Unauthorized]&gt;.status_code</failure></testcase><testcase classname="tests.integration.test_user_flow" name="test_logout" time="0.031"><failure message="assert 401 == 200&#10; +  where 401 = &lt;Response [401 Unauthorized]&gt;.status_code">backend/tests/integration/test_user_flow.py:59: in test_logout
    assert response.status_code == 200
E   assert 401 == 200
E    +  where 401 = &lt;Response [401 Unauthorized]&gt;.status_code</failure></testcase><testcase classname="tests.integration.test_user_flow" name="test_get_user_uuid" time="0.030"><failure message="assert 401 == 200&#10; +  where 401 = &lt;Response [401 Unauthorized]&gt;.status_code">backend/tests/integration/test_user_flow.py:64: in test_get_user_uuid
    assert response.status_code == 200
E   assert 401 == 200
E    +  where 401 = &lt;Response [401 Unauthorized]&gt;.status_code</failure></testcase><testcase classname="tests.integration.test_user_flow" name="test_protected_route" time="0.031"><failure message="assert 404 == 200&#10; +  where 404 = &lt;Response [404 Not Found]&gt;.status_code">backend/tests/integration/test_user_flow.py:75: in test_protected_route
    assert response.status_code == 200
E   assert 404 == 200
E    +  where 404 = &lt;Response [404 Not Found]&gt;.status_code</failure></testcase><testcase classname="tests.integration.test_watsonx_integration" name="test_watsonx_provider_setup" time="0.149"><failure message="core.custom_exceptions.LLMProviderError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;llm_providers_name_key&quot;&#10;DETAIL:  Key (name)=(watsonx) already exists.&#10;&#10;[SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]&#10;[parameters: {'id': UUID('018a6c66-79ac-460e-8d63-6bda6f411b20'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:105: in create_provider
    raise e
backend/rag_solution/repository/llm_provider_repository.py:98: in create_provider
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.
E   
E   [SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]
E   [parameters: {'id': UUID('018a6c66-79ac-460e-8d63-6bda6f411b20'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/tests/integration/test_watsonx_integration.py:29: in test_watsonx_provider_setup
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:85: in create_provider
    raise LLMProviderError(
E   core.custom_exceptions.LLMProviderError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "llm_providers_name_key"
E   DETAIL:  Key (name)=(watsonx) already exists.
E   
E   [SQL: INSERT INTO llm_providers (id, name, base_url, api_key, org_id, project_id, is_active, is_default) VALUES (%(id)s::UUID, %(name)s, %(base_url)s, %(api_key)s, %(org_id)s, %(project_id)s, %(is_active)s, %(is_default)s) RETURNING llm_providers.created_at, llm_providers.updated_at]
E   [parameters: {'id': UUID('018a6c66-79ac-460e-8d63-6bda6f411b20'), 'name': 'watsonx', 'base_url': 'https://us-south.ml.cloud.ibm.com', 'api_key': 'test-api-key', 'org_id': None, 'project_id': 'test-project-id', 'is_active': True, 'is_default': False}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</failure></testcase><testcase classname="tests.integration.test_watsonx_integration" name="test_watsonx_provider_invalid_setup" time="0.026"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderInput&#10;base_url&#10;  String should match pattern '^https?://' [type=string_pattern_mismatch, input_value='invalid-url', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/string_pattern_mismatch">backend/tests/integration/test_watsonx_integration.py:124: in test_watsonx_provider_invalid_setup
    provider_input = LLMProviderInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderInput
E   base_url
E     String should match pattern '^https?://' [type=string_pattern_mismatch, input_value='invalid-url', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.10/v/string_pattern_mismatch</failure></testcase><testcase classname="tests.integration.test_weaviate_store.TestWeaviateStore" name="test_weaviate_store_integration" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_weaviate_store.py, line 17&#10;      def test_weaviate_store_integration(self, store):&#10;file /app/backend/tests/integration/test_weaviate_store.py, line 12&#10;      @pytest.fixture&#10;      @contextmanager&#10;      def store(self, weaviate_store):&#10;E       fixture 'weaviate_store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_weaviate_store.py:12&quot;">file /app/backend/tests/integration/test_weaviate_store.py, line 17
      def test_weaviate_store_integration(self, store):
file /app/backend/tests/integration/test_weaviate_store.py, line 12
      @pytest.fixture
      @contextmanager
      def store(self, weaviate_store):
E       fixture 'weaviate_store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_weaviate_store.py:12</error></testcase><testcase classname="tests.integration.test_weaviate_store.TestWeaviateStore" name="test_weaviate_store_errors" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/integration/test_weaviate_store.py, line 39&#10;      def test_weaviate_store_errors(self, store):&#10;file /app/backend/tests/integration/test_weaviate_store.py, line 12&#10;      @pytest.fixture&#10;      @contextmanager&#10;      def store(self, weaviate_store):&#10;E       fixture 'weaviate_store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/integration/test_weaviate_store.py:12&quot;">file /app/backend/tests/integration/test_weaviate_store.py, line 39
      def test_weaviate_store_errors(self, store):
file /app/backend/tests/integration/test_weaviate_store.py, line 12
      @pytest.fixture
      @contextmanager
      def store(self, weaviate_store):
E       fixture 'weaviate_store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, store, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/integration/test_weaviate_store.py:12</error></testcase><testcase classname="tests.model.test_collection" name="test_create_collection" time="2.268" /><testcase classname="tests.model.test_collection" name="test_get_collection" time="0.039"><error message="failed on setup with &quot;file /app/backend/tests/model/test_collection.py, line 72&#10;  def test_get_collection(user_service: UserService, collection_service: CollectionService, collection_input: CollectionInput):&#10;file /app/backend/tests/model/test_collection.py, line 23&#10;  @pytest.fixture&#10;  def collection_input(user_input):&#10;E       fixture 'user_input' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_input, collection_repository, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, file_management_service, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_collection_service, user_repository, user_service, user_team_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/model/test_collection.py:23&quot;">file /app/backend/tests/model/test_collection.py, line 72
  def test_get_collection(user_service: UserService, collection_service: CollectionService, collection_input: CollectionInput):
file /app/backend/tests/model/test_collection.py, line 23
  @pytest.fixture
  def collection_input(user_input):
E       fixture 'user_input' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_input, collection_repository, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, file_management_service, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_collection_service, user_repository, user_service, user_team_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/model/test_collection.py:23</error></testcase><testcase classname="tests.model.test_collection" name="test_update_collection" time="0.030"><error message="failed on setup with &quot;file /app/backend/tests/model/test_collection.py, line 82&#10;  def test_update_collection(collection_service: CollectionService, collection_input: CollectionInput,&#10;file /app/backend/tests/model/test_collection.py, line 23&#10;  @pytest.fixture&#10;  def collection_input(user_input):&#10;E       fixture 'user_input' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_input, collection_repository, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, file_management_service, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_collection_service, user_repository, user_service, user_team_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/model/test_collection.py:23&quot;">file /app/backend/tests/model/test_collection.py, line 82
  def test_update_collection(collection_service: CollectionService, collection_input: CollectionInput,
file /app/backend/tests/model/test_collection.py, line 23
  @pytest.fixture
  def collection_input(user_input):
E       fixture 'user_input' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_input, collection_repository, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, file_management_service, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_collection_service, user_repository, user_service, user_team_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/model/test_collection.py:23</error></testcase><testcase classname="tests.model.test_collection" name="test_delete_collection" time="0.028"><error message="failed on setup with &quot;file /app/backend/tests/model/test_collection.py, line 98&#10;  def test_delete_collection(collection_service: CollectionService, collection_input: CollectionInput,&#10;file /app/backend/tests/model/test_collection.py, line 23&#10;  @pytest.fixture&#10;  def collection_input(user_input):&#10;E       fixture 'user_input' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_input, collection_repository, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, file_management_service, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_collection_service, user_repository, user_service, user_team_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/model/test_collection.py:23&quot;">file /app/backend/tests/model/test_collection.py, line 98
  def test_delete_collection(collection_service: CollectionService, collection_input: CollectionInput,
file /app/backend/tests/model/test_collection.py, line 23
  @pytest.fixture
  def collection_input(user_input):
E       fixture 'user_input' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_input, collection_repository, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, file_management_service, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_collection_service, user_repository, user_service, user_team_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/model/test_collection.py:23</error></testcase><testcase classname="tests.model.test_collection" name="test_create_collection_with_documents" time="0.028"><error message="failed on setup with &quot;file /app/backend/tests/model/test_collection.py, line 117&#10;  def test_create_collection_with_documents(&#10;file /app/backend/tests/model/test_collection.py, line 23&#10;  @pytest.fixture&#10;  def collection_input(user_input):&#10;E       fixture 'user_input' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_input, collection_repository, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, file_management_service, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_collection_service, user_repository, user_service, user_team_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/model/test_collection.py:23&quot;">file /app/backend/tests/model/test_collection.py, line 117
  def test_create_collection_with_documents(
file /app/backend/tests/model/test_collection.py, line 23
  @pytest.fixture
  def collection_input(user_input):
E       fixture 'user_input' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_input, collection_repository, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, file_management_service, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_collection_service, user_repository, user_service, user_team_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/model/test_collection.py:23</error></testcase><testcase classname="tests.model.test_collection" name="test_get_user_collections" time="0.028"><error message="failed on setup with &quot;file /app/backend/tests/model/test_collection.py, line 162&#10;  def test_get_user_collections(collection_service: CollectionService,&#10;file /app/backend/tests/model/test_collection.py, line 23&#10;  @pytest.fixture&#10;  def collection_input(user_input):&#10;E       fixture 'user_input' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_input, collection_repository, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, file_management_service, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_collection_service, user_repository, user_service, user_team_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/model/test_collection.py:23&quot;">file /app/backend/tests/model/test_collection.py, line 162
  def test_get_user_collections(collection_service: CollectionService,
file /app/backend/tests/model/test_collection.py, line 23
  @pytest.fixture
  def collection_input(user_input):
E       fixture 'user_input' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_input, collection_repository, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, file_management_service, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_collection_service, user_repository, user_service, user_team_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/model/test_collection.py:23</error></testcase><testcase classname="tests.model.test_file" name="test_create_file_record" time="0.031"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('d82545af-3021-4fb7-bd80-509f9af1178e'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 0, 421955), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 0, 421956)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_file.py:50: in collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.model.test_file" name="test_get_file_by_id" time="0.037"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('d8b40d95-dfbe-40b2-b7b9-90bd3af7398b'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 0, 853270), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 0, 853273)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_file.py:50: in collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.model.test_file" name="test_get_file_by_name" time="0.032"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('2df51168-472c-4b27-bd67-ec4724a704d2'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 1, 305357), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 1, 305359)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_file.py:50: in collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.model.test_file" name="test_update_file" time="0.042"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('5acd12c8-bafd-4a38-befb-2b46935d8072'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 1, 746655), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 1, 746659)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_file.py:50: in collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.model.test_file" name="test_get_files" time="0.036"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('8feaaa74-87ec-4b00-8416-517651149860'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 2, 202992), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 2, 202993)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_file.py:50: in collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.model.test_file" name="test_get_file_path" time="0.032"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('090e7447-935f-4a82-9a7c-08aad8cccfe7'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 2, 626743), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 2, 626745)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_file.py:50: in collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.model.test_file" name="test_delete_file" time="0.032"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('a63abe3a-eac7-4c76-9879-e8cadd572ee6'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 3, 58886), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 3, 58887)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_file.py:50: in collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.model.test_file" name="test_delete_files" time="0.147"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('58e9271c-9ff8-4e55-a938-8f08378c8bb6'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 3, 662937), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 3, 662938)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_file.py:50: in collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.model.test_file" name="test_get_files_by_collection" time="0.038"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('e68055bf-5d66-4a71-8983-4d5f094e7369'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 4, 138175), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 4, 138177)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_file.py:50: in collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.model.test_file" name="test_create_file_record_with_metadata" time="0.036"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('7e12cb1f-d299-416b-a9fb-aa6622a6b24e'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 4, 573442), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 4, 573443)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_file.py:50: in collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.model.test_file" name="test_get_file_by_id_with_metadata" time="0.045"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('8f9415cc-778e-425a-9f57-4190f7671781'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 5, 146546), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 5, 146548)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_file.py:50: in collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.model.test_file" name="test_update_file_metadata" time="0.042"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('f581106c-c0a5-4909-97b6-e76c45f4b521'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 5, 659201), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 5, 659203)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_file.py:50: in collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.model.test_file" name="test_get_files_by_collection_with_metadata" time="0.036"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('dff33af0-96b3-45d8-bb3c-58e9538ecc1c'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 6, 169913), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 6, 169915)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_file.py:50: in collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.model.test_file" name="test_delete_file_with_metadata" time="0.033"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('a30332c6-0f30-47a4-9513-75ca81c83924'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 6, 594520), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 6, 594522)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_file.py:50: in collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.model.test_team" name="test_create_team" time="0.040" /><testcase classname="tests.model.test_team" name="test_get_team" time="0.037" /><testcase classname="tests.model.test_team" name="test_get_non_existent_team" time="0.037" /><testcase classname="tests.model.test_team" name="test_update_team" time="0.042" /><testcase classname="tests.model.test_team" name="test_delete_team" time="0.038" /><testcase classname="tests.model.test_user" name="test_create_user" time="0.031"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('a31345a7-4451-4bf4-95c3-eb0e7607775a'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 7, 242062), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 7, 242063)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user.py:40: in test_create_user
    user_output = user_service.create_user(user_input)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user" name="test_get_user" time="0.031"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('e1a592ca-a346-4d0f-8444-dc844ea7a537'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 7, 686523), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 7, 686524)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user.py:48: in test_get_user
    created_user = user_service.create_user(user_input)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user" name="test_get_non_existent_user" time="0.038" /><testcase classname="tests.model.test_user" name="test_update_user" time="0.032"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('39a989b8-a90c-4950-8d4e-b932f0dd02a6'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 8, 183556), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 8, 183558)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user.py:61: in test_update_user
    created_user = user_service.create_user(user_input)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user" name="test_delete_user" time="0.029"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('cec9e696-fa47-4002-9de7-9729efbe6748'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 8, 707080), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 8, 707082)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user.py:71: in test_delete_user
    created_user = user_service.create_user(user_input)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user" name="test_get_user_by_ibm_id" time="0.030"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('e280ef59-8976-405f-b89b-77a236477092'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 9, 129757), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 9, 129759)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user.py:79: in test_get_user_by_ibm_id
    created_user = user_service.create_user(user_input)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user" name="test_get_non_existent_user_by_ibm_id" time="0.029" /><testcase classname="tests.model.test_user" name="test_update_non_existent_user" time="0.028" /><testcase classname="tests.model.test_user" name="test_delete_non_existent_user" time="0.028" /><testcase classname="tests.model.test_user" name="test_create_user_with_invalid_input[invalid_input0-ibm_id]" time="0.029" /><testcase classname="tests.model.test_user" name="test_create_user_with_invalid_input[invalid_input1-email]" time="0.027" /><testcase classname="tests.model.test_user" name="test_create_user_with_invalid_input[invalid_input2-name]" time="0.027" /><testcase classname="tests.model.test_user" name="test_create_duplicate_user" time="0.031"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('42a83999-03de-4027-9c49-b01002aade50'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 9, 737727), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 9, 737728)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user.py:114: in test_create_duplicate_user
    user_service.create_user(user_input)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user" name="test_update_user_email" time="0.033"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('3a71c4b9-3be0-4571-b1a4-cc3d23be9c89'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 10, 180030), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 10, 180032)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user.py:120: in test_update_user_email
    created_user = user_service.create_user(user_input)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user" name="test_update_user_name" time="0.035"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('0e42ba21-9350-4de7-bd29-4f685625a2f5'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 10, 619598), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 10, 619599)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user.py:127: in test_update_user_name
    created_user = user_service.create_user(user_input)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user_collection" name="test_add_user_to_collection" time="0.026"><error message="failed on setup with &quot;TypeError: CollectionService.__init__() takes 2 positional arguments but 4 were given&quot;">backend/tests/model/test_user_collection.py:36: in collection_service
    return CollectionService(db_session, file_management_service, user_collection_service)
E   TypeError: CollectionService.__init__() takes 2 positional arguments but 4 were given</error></testcase><testcase classname="tests.model.test_user_collection" name="test_remove_user_from_collection" time="0.026"><error message="failed on setup with &quot;TypeError: CollectionService.__init__() takes 2 positional arguments but 4 were given&quot;">backend/tests/model/test_user_collection.py:36: in collection_service
    return CollectionService(db_session, file_management_service, user_collection_service)
E   TypeError: CollectionService.__init__() takes 2 positional arguments but 4 were given</error></testcase><testcase classname="tests.model.test_user_collection" name="test_get_user_collections" time="0.025"><error message="failed on setup with &quot;TypeError: CollectionService.__init__() takes 2 positional arguments but 4 were given&quot;">backend/tests/model/test_user_collection.py:36: in collection_service
    return CollectionService(db_session, file_management_service, user_collection_service)
E   TypeError: CollectionService.__init__() takes 2 positional arguments but 4 were given</error></testcase><testcase classname="tests.model.test_user_collection" name="test_get_collection_users" time="0.024"><error message="failed on setup with &quot;TypeError: CollectionService.__init__() takes 2 positional arguments but 4 were given&quot;">backend/tests/model/test_user_collection.py:36: in collection_service
    return CollectionService(db_session, file_management_service, user_collection_service)
E   TypeError: CollectionService.__init__() takes 2 positional arguments but 4 were given</error></testcase><testcase classname="tests.model.test_user_collection" name="test_add_user_to_nonexistent_collection" time="0.028"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('c5d0d70f-4f38-496a-8aec-176f38f7c01e'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 11, 165103), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 11, 165104)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user_collection.py:85: in test_add_user_to_nonexistent_collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user_collection" name="test_remove_user_from_nonexistent_collection" time="0.030"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('79ed9271-64d5-4aec-b456-0c3d008873ac'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 11, 584743), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 11, 584744)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user_collection.py:91: in test_remove_user_from_nonexistent_collection
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user_collection" name="test_get_collections_for_nonexistent_user" time="0.026" /><testcase classname="tests.model.test_user_collection" name="test_get_users_for_nonexistent_collection" time="0.026" /><testcase classname="tests.model.test_user_team" name="test_add_user_to_team" time="0.033"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('50e3ec4e-1508-4342-8f2c-ca319687e575'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 12, 88389), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 12, 88391)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user_team.py:30: in test_add_user_to_team
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user_team" name="test_remove_user_from_team" time="0.033"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('b9ffe0bb-8c14-4e9e-b78f-7fb6ecd76c22'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 12, 543799), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 12, 543801)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user_team.py:41: in test_remove_user_from_team
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user_team" name="test_get_user_teams" time="0.031"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('03810754-ae43-4006-9dc5-63a094271956'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 12, 991290), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 12, 991291)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user_team.py:52: in test_get_user_teams
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user_team" name="test_get_team_users" time="0.036"><failure message="fastapi.exceptions.HTTPException: 500: Internal server error">backend/rag_solution/repository/user_team_repository.py:22: in add_user_to_team
    self.db.add(db_user_team)  # Add user-team association
E   AttributeError: 'UserTeamRepository' object has no attribute 'add'

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_team_service.py:24: in add_user_to_team
    result = self.user_team_repository.add_user_to_team(UserTeamInput(user_id=user_id, team_id=team_id))
backend/rag_solution/repository/user_team_repository.py:28: in add_user_to_team
    self.db.rollback()  # Rollback transaction on failure
E   AttributeError: 'UserTeamRepository' object has no attribute 'rollback'

During handling of the above exception, another exception occurred:
backend/tests/model/test_user_team.py:68: in test_get_team_users
    user_team_service.add_user_to_team(user1.id, team.id)
backend/rag_solution/services/user_team_service.py:34: in add_user_to_team
    raise HTTPException(status_code=500, detail="Internal server error")
E   fastapi.exceptions.HTTPException: 500: Internal server error</failure></testcase><testcase classname="tests.model.test_user_team" name="test_add_user_to_nonexistent_team" time="0.030"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('590ccc37-fe60-4a9a-a3ad-90ca933db2c4'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 13, 573621), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 13, 573623)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user_team.py:76: in test_add_user_to_nonexistent_team
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user_team" name="test_remove_user_from_nonexistent_team" time="0.034"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('d10ef38a-5b53-4f90-aeab-8297f6d8168d'), 'ibm_id': 'test_ibm_id', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 54, 14, 23818), 'updated_at': datetime.datetime(2025, 1, 19, 3, 54, 14, 23820)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/model/test_user_team.py:82: in test_remove_user_from_nonexistent_team
    user = user_service.create_user(UserInput(ibm_id="test_ibm_id", email="test@example.com", name="Test User"))
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.model.test_user_team" name="test_get_teams_for_nonexistent_user" time="0.027"><failure message="fastapi.exceptions.HTTPException: 500: Internal server error">backend/rag_solution/services/user_team_service.py:54: in get_user_teams
    user_teams = self.user_team_repository.get_user_teams(user_id)
backend/rag_solution/repository/user_team_repository.py:54: in get_user_teams
    user_teams = self.db.query(UserTeam).filter(UserTeam.user_id == user_id).all()
E   AttributeError: 'UserTeamRepository' object has no attribute 'query'

During handling of the above exception, another exception occurred:
backend/tests/model/test_user_team.py:88: in test_get_teams_for_nonexistent_user
    teams = user_team_service.get_user_teams(UUID('00000000-0000-0000-0000-000000000000'))
backend/rag_solution/services/user_team_service.py:59: in get_user_teams
    raise HTTPException(status_code=500, detail="Internal server error")
E   fastapi.exceptions.HTTPException: 500: Internal server error</failure></testcase><testcase classname="tests.model.test_user_team" name="test_get_users_for_nonexistent_team" time="0.025"><failure message="fastapi.exceptions.HTTPException: 500: Internal server error">backend/rag_solution/services/user_team_service.py:64: in get_team_users
    user_teams = self.user_team_repository.get_team_users(team_id)
backend/rag_solution/repository/user_team_repository.py:62: in get_team_users
    user_teams = self.db.query(UserTeam).filter(UserTeam.team_id == team_id).all()
E   AttributeError: 'UserTeamRepository' object has no attribute 'query'

During handling of the above exception, another exception occurred:
backend/tests/model/test_user_team.py:92: in test_get_users_for_nonexistent_team
    users = user_team_service.get_team_users(UUID('00000000-0000-0000-0000-000000000000'))
backend/rag_solution/services/user_team_service.py:69: in get_team_users
    raise HTTPException(status_code=500, detail="Internal server error")
E   fastapi.exceptions.HTTPException: 500: Internal server error</failure></testcase><testcase classname="tests.retrieval.test_retrieval.TestRetrievers" name="test_vector_retriever_success" time="0.027" /><testcase classname="tests.retrieval.test_retrieval.TestRetrievers" name="test_vector_retriever_error" time="0.025" /><testcase classname="tests.retrieval.test_retrieval.TestRetrievers" name="test_keyword_retriever_success" time="0.025" /><testcase classname="tests.retrieval.test_retrieval.TestRetrievers" name="test_keyword_retriever_error" time="0.028" /><testcase classname="tests.retrieval.test_retrieval.TestRetrievers" name="test_hybrid_retriever_success" time="0.027"><failure message="AssertionError: assert False&#10; +  where False = &lt;Mock name='mock.get_documents' id='281472727996400'&gt;.called&#10; +    where &lt;Mock name='mock.get_documents' id='281472727996400'&gt; = &lt;Mock id='281472727684912'&gt;.get_documents">backend/tests/retrieval/test_retrieval.py:74: in test_hybrid_retriever_success
    assert document_store.get_documents.called
E   AssertionError: assert False
E    +  where False = &lt;Mock name='mock.get_documents' id='281472727996400'&gt;.called
E    +    where &lt;Mock name='mock.get_documents' id='281472727996400'&gt; = &lt;Mock id='281472727684912'&gt;.get_documents</failure></testcase><testcase classname="tests.retrieval.test_retrieval.TestRetrievers" name="test_hybrid_retriever_partial_failure" time="0.027" /><testcase classname="tests.retrieval.test_retrieval.TestRetrievers" name="test_hybrid_retriever_custom_weight" time="0.025" /><testcase classname="tests.retrieval.test_retrieval.TestRetrieverFactory" name="test_vector_retriever_creation" time="0.026" /><testcase classname="tests.retrieval.test_retrieval.TestRetrieverFactory" name="test_keyword_retriever_creation" time="0.025" /><testcase classname="tests.retrieval.test_retrieval.TestRetrieverFactory" name="test_hybrid_retriever_creation" time="0.026" /><testcase classname="tests.retrieval.test_retrieval.TestRetrieverFactory" name="test_default_retriever_type" time="0.026" /><testcase classname="tests.retrieval.test_retrieval.TestRetrieverFactory" name="test_invalid_retriever_type" time="0.025" /><testcase classname="tests.retrieval.test_retrieval.TestRetrieverFactory" name="test_hybrid_retriever_custom_weight" time="0.025" /><testcase classname="tests.router.test_collection_router" name="test_create_collection" time="2.275" /><testcase classname="tests.router.test_collection_router" name="test_get_collection" time="3.135" /><testcase classname="tests.router.test_collection_router" name="test_delete_collection" time="2.955" /><testcase classname="tests.router.test_collection_router" name="test_llm_parameters_crud" time="2.939" /><testcase classname="tests.router.test_collection_router" name="test_file_operations" time="3.101" /><testcase classname="tests.router.test_collection_router" name="test_question_operations" time="2.889" /><testcase classname="tests.router.test_collection_router" name="test_validation_errors" time="0.045" /><testcase classname="tests.router.test_collection_router" name="test_not_found_errors" time="0.045" /><testcase classname="tests.router.test_user_router" name="test_list_users" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_create_user" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_get_user" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_update_user" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_delete_user" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_get_user_collections" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_add_user_to_collection" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_remove_user_from_collection" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_get_user_teams" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_add_user_to_team" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_remove_user_from_team" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_get_pipelines" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_create_pipeline" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_update_pipeline" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_delete_pipeline" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_set_default_pipeline" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_validate_pipeline" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.router.test_user_router" name="test_test_pipeline" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.service.test_collection_service" name="test_create_collection_success" time="2.435" /><testcase classname="tests.service.test_collection_service" name="test_create_collection_duplicate_name" time="5.933"><failure message="Failed: DID NOT RAISE &lt;class 'fastapi.exceptions.HTTPException'&gt;">backend/tests/service/test_collection_service.py:84: in test_create_collection_duplicate_name
    with pytest.raises(HTTPException) as exc_info:
E   Failed: DID NOT RAISE &lt;class 'fastapi.exceptions.HTTPException'&gt;</failure></testcase><testcase classname="tests.service.test_collection_service" name="test_get_collection_success" time="3.091" /><testcase classname="tests.service.test_collection_service" name="test_get_collection_not_found" time="0.049"><failure message="AssertionError: assert 'Collection not found' in 'Collection with ID c72ceea2-ed4c-4a2e-90fe-f839676ea8f6 not found.'&#10; +  where 'Collection with ID c72ceea2-ed4c-4a2e-90fe-f839676ea8f6 not found.' = str('Collection with ID c72ceea2-ed4c-4a2e-90fe-f839676ea8f6 not found.')&#10; +    where 'Collection with ID c72ceea2-ed4c-4a2e-90fe-f839676ea8f6 not found.' = HTTPException(status_code=404, detail='Collection with ID c72ceea2-ed4c-4a2e-90fe-f839676ea8f6 not found.').detail&#10; +      where HTTPException(status_code=404, detail='Collection with ID c72ceea2-ed4c-4a2e-90fe-f839676ea8f6 not found.') = &lt;ExceptionInfo HTTPException(status_code=404, detail='Collection with ID c72ceea2-ed4c-4a2e-90fe-f839676ea8f6 not found.') tblen=2&gt;.value">backend/tests/service/test_collection_service.py:111: in test_get_collection_not_found
    assert "Collection not found" in str(exc_info.value.detail)
E   AssertionError: assert 'Collection not found' in 'Collection with ID c72ceea2-ed4c-4a2e-90fe-f839676ea8f6 not found.'
E    +  where 'Collection with ID c72ceea2-ed4c-4a2e-90fe-f839676ea8f6 not found.' = str('Collection with ID c72ceea2-ed4c-4a2e-90fe-f839676ea8f6 not found.')
E    +    where 'Collection with ID c72ceea2-ed4c-4a2e-90fe-f839676ea8f6 not found.' = HTTPException(status_code=404, detail='Collection with ID c72ceea2-ed4c-4a2e-90fe-f839676ea8f6 not found.').detail
E    +      where HTTPException(status_code=404, detail='Collection with ID c72ceea2-ed4c-4a2e-90fe-f839676ea8f6 not found.') = &lt;ExceptionInfo HTTPException(status_code=404, detail='Collection with ID c72ceea2-ed4c-4a2e-90fe-f839676ea8f6 not found.') tblen=2&gt;.value</failure></testcase><testcase classname="tests.service.test_collection_service" name="test_update_collection_success" time="2.900" /><testcase classname="tests.service.test_collection_service" name="test_delete_collection_success" time="2.928"><failure message="core.custom_exceptions.NotFoundException: Collection with ID 97e5c863-f30b-4908-9eec-cc5e8b7d9941 not found.">backend/tests/service/test_collection_service.py:146: in test_delete_collection_success
    assert collection_service.collection_repository.get(base_collection.id) is None
backend/rag_solution/repository/collection_repository.py:106: in get
    raise NotFoundException(
E   core.custom_exceptions.NotFoundException: Collection with ID 97e5c863-f30b-4908-9eec-cc5e8b7d9941 not found.</failure></testcase><testcase classname="tests.service.test_collection_service" name="test_get_user_collections" time="3.100" /><testcase classname="tests.service.test_collection_service" name="test_create_collection_with_documents" time="2.917" /><testcase classname="tests.service.test_collection_service" name="test_process_documents" time="3.157"><failure message="AssertionError: assert &lt;CollectionStatus.ERROR: 'error'&gt; == &lt;CollectionStatus.COMPLETED: 'completed'&gt;&#10;  - completed&#10;  + error">backend/tests/service/test_collection_service.py:210: in test_process_documents
    assert updated_collection.status == CollectionStatus.COMPLETED
E   AssertionError: assert &lt;CollectionStatus.ERROR: 'error'&gt; == &lt;CollectionStatus.COMPLETED: 'completed'&gt;
E     - completed
E     + error</failure></testcase><testcase classname="tests.service.test_collection_service" name="test_update_collection_status" time="2.897" /><testcase classname="tests.service.test_collection_service" name="test_generate_valid_collection_name" time="0.036" /><testcase classname="tests.service.test_collection_service" name="test_store_documents_success" time="2.862"><failure message="TypeError: DocumentStorageError.__init__() missing 3 required positional arguments: 'storage_path', 'error_type', and 'message'">backend/vectordbs/milvus_store.py:200: in add_documents
    collection.insert(data)
.venv/lib/python3.12/site-packages/pymilvus/orm/collection.py:507: in insert
    return conn.insert_rows(
.venv/lib/python3.12/site-packages/pymilvus/decorators.py:148: in handler
    raise e from e
.venv/lib/python3.12/site-packages/pymilvus/decorators.py:144: in handler
    return func(*args, **kwargs)
.venv/lib/python3.12/site-packages/pymilvus/decorators.py:183: in handler
    return func(self, *args, **kwargs)
.venv/lib/python3.12/site-packages/pymilvus/decorators.py:123: in handler
    raise e from e
.venv/lib/python3.12/site-packages/pymilvus/decorators.py:87: in handler
    return func(*args, **kwargs)
.venv/lib/python3.12/site-packages/pymilvus/client/grpc_handler.py:492: in insert_rows
    request = self._prepare_row_insert_request(
.venv/lib/python3.12/site-packages/pymilvus/client/grpc_handler.py:518: in _prepare_row_insert_request
    return Prepare.row_insert_param(
.venv/lib/python3.12/site-packages/pymilvus/client/prepare.py:515: in row_insert_param
    return cls._parse_row_request(request, fields_info, enable_dynamic, entities)
.venv/lib/python3.12/site-packages/pymilvus/client/prepare.py:398: in _parse_row_request
    entity_helper.pack_field_value_to_field_data(v, field_data, field_info)
.venv/lib/python3.12/site-packages/pymilvus/client/entity_helper.py:297: in pack_field_value_to_field_data
    raise DataNotMatchException(
E   pymilvus.exceptions.DataNotMatchException: &lt;DataNotMatchException: (code=1, message=The Input data type is inconsistent with defined schema, {embedding} field should be a float_vector, but got a {&lt;class 'NoneType'&gt;} instead.)&gt;

During handling of the above exception, another exception occurred:
backend/rag_solution/services/collection_service.py:268: in store_documents_in_vector_store
    self.vector_store.add_documents(collection_name, documents)
backend/vectordbs/milvus_store.py:206: in add_documents
    raise DocumentError(f"Failed to add documents to collection {collection_name}: {e}")
E   vectordbs.error_types.DocumentError: Failed to add documents to collection collection_9ed2068b33b7446aa5ba6a8aa620f998: &lt;DataNotMatchException: (code=1, message=The Input data type is inconsistent with defined schema, {embedding} field should be a float_vector, but got a {&lt;class 'NoneType'&gt;} instead.)&gt;

During handling of the above exception, another exception occurred:
backend/tests/service/test_collection_service.py:254: in test_store_documents_success
    collection_service.store_documents_in_vector_store(
backend/rag_solution/services/collection_service.py:272: in store_documents_in_vector_store
    raise DocumentStorageError(f"Error: {e}")
E   TypeError: DocumentStorageError.__init__() missing 3 required positional arguments: 'storage_path', 'error_type', and 'message'</failure></testcase><testcase classname="tests.service.test_configuration_service" name="test_create_provider" time="0.035" /><testcase classname="tests.service.test_configuration_service" name="test_create_provider_model" time="0.033"><error message="failed on setup with &quot;pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput&#10;provider_id&#10;  UUID version 4 expected [type=uuid_version, input_value=UUID('00000000-0000-0000-0000-000000000000'), input_type=UUID]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_version&quot;">backend/tests/service/test_configuration_service.py:39: in test_model_input
    return LLMProviderModelInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput
E   provider_id
E     UUID version 4 expected [type=uuid_version, input_value=UUID('00000000-0000-0000-0000-000000000000'), input_type=UUID]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_version</error></testcase><testcase classname="tests.service.test_configuration_service" name="test_create_llm_parameters" time="0.030"><error message="failed on setup with &quot;pydantic_core._pydantic_core.ValidationError: 1 validation error for LLM Parameters Input&#10;user_id&#10;  Extra inputs are not permitted [type=extra_forbidden, input_value=UUID('59f2a433-ed18-4c12-9ec2-958de6d7093d'), input_type=UUID]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden&quot;">backend/tests/service/test_configuration_service.py:58: in test_llm_parameters
    return LLMParametersInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLM Parameters Input
E   user_id
E     Extra inputs are not permitted [type=extra_forbidden, input_value=UUID('59f2a433-ed18-4c12-9ec2-958de6d7093d'), input_type=UUID]
E       For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden</error></testcase><testcase classname="tests.service.test_configuration_service" name="test_create_prompt_template" time="0.029" /><testcase classname="tests.service.test_configuration_service" name="test_configuration_flow" time="0.025"><error message="failed on setup with &quot;pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput&#10;provider_id&#10;  UUID version 4 expected [type=uuid_version, input_value=UUID('00000000-0000-0000-0000-000000000000'), input_type=UUID]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_version&quot;">backend/tests/service/test_configuration_service.py:39: in test_model_input
    return LLMProviderModelInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput
E   provider_id
E     UUID version 4 expected [type=uuid_version, input_value=UUID('00000000-0000-0000-0000-000000000000'), input_type=UUID]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_version</error></testcase><testcase classname="tests.service.test_configuration_service" name="test_provider_validation_errors" time="0.025"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderInput&#10;name&#10;  String should match pattern '^[a-zA-Z0-9_-]+$' [type=string_pattern_mismatch, input_value='test@invalid', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/string_pattern_mismatch">backend/tests/service/test_configuration_service.py:195: in test_provider_validation_errors
    service.create_provider(LLMProviderInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderInput
E   name
E     String should match pattern '^[a-zA-Z0-9_-]+$' [type=string_pattern_mismatch, input_value='test@invalid', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.10/v/string_pattern_mismatch</failure></testcase><testcase classname="tests.service.test_configuration_service" name="test_model_validation_errors" time="0.026"><error message="failed on setup with &quot;pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput&#10;provider_id&#10;  UUID version 4 expected [type=uuid_version, input_value=UUID('00000000-0000-0000-0000-000000000000'), input_type=UUID]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_version&quot;">backend/tests/service/test_configuration_service.py:39: in test_model_input
    return LLMProviderModelInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput
E   provider_id
E     UUID version 4 expected [type=uuid_version, input_value=UUID('00000000-0000-0000-0000-000000000000'), input_type=UUID]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_version</error></testcase><testcase classname="tests.service.test_configuration_service" name="test_not_found_errors" time="0.025"><error message="failed on setup with &quot;pydantic_core._pydantic_core.ValidationError: 1 validation error for LLM Parameters Input&#10;user_id&#10;  Extra inputs are not permitted [type=extra_forbidden, input_value=UUID('4ecfb5a9-7f9c-41e5-90b1-aa2b49e8f6e7'), input_type=UUID]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden&quot;">backend/tests/service/test_configuration_service.py:58: in test_llm_parameters
    return LLMParametersInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLM Parameters Input
E   user_id
E     Extra inputs are not permitted [type=extra_forbidden, input_value=UUID('4ecfb5a9-7f9c-41e5-90b1-aa2b49e8f6e7'), input_type=UUID]
E       For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden</error></testcase><testcase classname="tests.service.test_factories.TestRetrieverFactory" name="test_create_hybrid_retriever" time="0.027" /><testcase classname="tests.service.test_factories.TestRetrieverFactory" name="test_create_keyword_retriever" time="0.028" /><testcase classname="tests.service.test_factories.TestRetrieverFactory" name="test_create_vector_retriever" time="0.024" /><testcase classname="tests.service.test_factories.TestRetrieverFactory" name="test_default_to_hybrid_retriever" time="0.025"><failure message="AssertionError: &lt;rag_solution.retrieval.retriever.VectorRetriever object at 0xffff79fc0c80&gt; is not an instance of &lt;class 'rag_solution.retrieval.retriever.HybridRetriever'&gt;">backend/tests/service/test_factories.py:42: in test_default_to_hybrid_retriever
    self.assertIsInstance(retriever, HybridRetriever)
E   AssertionError: &lt;rag_solution.retrieval.retriever.VectorRetriever object at 0xffff79fc0c80&gt; is not an instance of &lt;class 'rag_solution.retrieval.retriever.HybridRetriever'&gt;</failure></testcase><testcase classname="tests.service.test_factories.TestRetrieverFactory" name="test_invalid_retriever_type" time="0.025" /><testcase classname="tests.service.test_llm_parameters_service.TestLLMParametersSchema" name="test_valid_parameters" time="0.026" /><testcase classname="tests.service.test_llm_parameters_service.TestLLMParametersSchema" name="test_invalid_max_new_tokens_high" time="0.031" /><testcase classname="tests.service.test_llm_parameters_service.TestLLMParametersSchema" name="test_invalid_temperature_high" time="0.038" /><testcase classname="tests.service.test_llm_parameters_service.TestLLMParametersSchema" name="test_invalid_top_p" time="0.030" /><testcase classname="tests.service.test_llm_parameters_service.TestLLMParametersSchema" name="test_invalid_repetition_penalty" time="0.031" /><testcase classname="tests.service.test_llm_parameters_service" name="test_create_parameters" time="0.036" /><testcase classname="tests.service.test_llm_parameters_service" name="test_create_duplicate_name" time="0.037"><failure message="AttributeError: 'list' object has no attribute 'id'">backend/tests/service/test_llm_parameters_service.py:137: in test_create_duplicate_name
    updated = test_parameters_service.create_or_update_parameters(
backend/rag_solution/services/llm_parameters_service.py:66: in create_or_update_parameters
    updated_params = self.repository.update(existing_params.id, parameters_input)
E   AttributeError: 'list' object has no attribute 'id'</failure></testcase><testcase classname="tests.service.test_llm_parameters_service" name="test_get_parameters" time="0.028"><failure message="AttributeError: 'LLMParametersInput' object has no attribute 'user_id'">backend/tests/service/test_llm_parameters_service.py:155: in test_get_parameters
    retrieved = test_parameters_service.get_parameters(test_llm_parameters.user_id)
.venv/lib/python3.12/site-packages/pydantic/main.py:892: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'LLMParametersInput' object has no attribute 'user_id'</failure></testcase><testcase classname="tests.service.test_llm_parameters_service" name="test_get_nonexistent_user_parameters" time="0.026" /><testcase classname="tests.service.test_llm_parameters_service" name="test_update_parameters" time="0.032" /><testcase classname="tests.service.test_llm_parameters_service" name="test_delete_parameters" time="0.033"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for LLM Parameters Output&#10;  Input should be a valid dictionary or object to extract fields from [type=model_attributes_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/model_attributes_type">backend/tests/service/test_llm_parameters_service.py:206: in test_delete_parameters
    test_parameters_service.update_parameters(created.id, test_llm_parameters)
backend/rag_solution/services/llm_parameters_service.py:50: in update_parameters
    return LLMParametersOutput.model_validate(updated_params)
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLM Parameters Output
E     Input should be a valid dictionary or object to extract fields from [type=model_attributes_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/model_attributes_type</failure></testcase><testcase classname="tests.service.test_llm_parameters_service" name="test_user_default_parameters_management" time="0.030"><failure message="AttributeError: 'list' object has no attribute 'id'">backend/tests/service/test_llm_parameters_service.py:242: in test_user_default_parameters_management
    created2 = test_parameters_service.create_or_update_parameters(base_user.id, params2)
backend/rag_solution/services/llm_parameters_service.py:66: in create_or_update_parameters
    updated_params = self.repository.update(existing_params.id, parameters_input)
E   AttributeError: 'list' object has no attribute 'id'</failure></testcase><testcase classname="tests.service.test_llm_parameters_service" name="test_multiple_users_default_parameters" time="0.031"><failure message="AttributeError: 'LLMParametersService' object has no attribute 'c'">backend/tests/service/test_llm_parameters_service.py:276: in test_multiple_users_default_parameters
    created1 = test_parameters_service.c(base_user.id, params1)
E   AttributeError: 'LLMParametersService' object has no attribute 'c'</failure></testcase><testcase classname="tests.service.test_llm_parameters_service" name="test_set_default_parameters" time="0.032"><failure message="pydantic_core._pydantic_core.ValidationError: 2 validation errors for LLM Parameters Input&#10;name&#10;  Field required [type=missing, input_value={'_sa_instance_state': &lt;s...70&gt;, 'is_default': True}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;_sa_instance_state&#10;  Extra inputs are not permitted [type=extra_forbidden, input_value=&lt;sqlalchemy.orm.state.Ins...bject at 0xffff67597470&gt;, input_type=InstanceState]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden">backend/tests/service/test_llm_parameters_service.py:315: in test_set_default_parameters
    updated = test_parameters_service.set_default_parameters(created.id)
backend/rag_solution/services/llm_parameters_service.py:103: in set_default_parameters
    default_input = LLMParametersInput(
E   pydantic_core._pydantic_core.ValidationError: 2 validation errors for LLM Parameters Input
E   name
E     Field required [type=missing, input_value={'_sa_instance_state': &lt;s...70&gt;, 'is_default': True}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   _sa_instance_state
E     Extra inputs are not permitted [type=extra_forbidden, input_value=&lt;sqlalchemy.orm.state.Ins...bject at 0xffff67597470&gt;, input_type=InstanceState]
E       For further information visit https://errors.pydantic.dev/2.10/v/extra_forbidden</failure></testcase><testcase classname="tests.service.test_llm_provider_service" name="test_create_provider" time="0.026" /><testcase classname="tests.service.test_llm_provider_service" name="test_create_provider_validation_error" time="0.024"><failure message="pydantic_core._pydantic_core.ValidationError: 2 validation errors for LLMProviderInput&#10;name&#10;  String should have at least 1 character [type=string_too_short, input_value='', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/string_too_short&#10;base_url&#10;  String should match pattern '^https?://' [type=string_pattern_mismatch, input_value='not-a-url', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/string_pattern_mismatch">backend/tests/service/test_llm_provider_service.py:64: in test_create_provider_validation_error
    invalid_input = LLMProviderInput(
E   pydantic_core._pydantic_core.ValidationError: 2 validation errors for LLMProviderInput
E   name
E     String should have at least 1 character [type=string_too_short, input_value='', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.10/v/string_too_short
E   base_url
E     String should match pattern '^https?://' [type=string_pattern_mismatch, input_value='not-a-url', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.10/v/string_pattern_mismatch</failure></testcase><testcase classname="tests.service.test_llm_provider_service" name="test_get_provider_by_name" time="0.028" /><testcase classname="tests.service.test_llm_provider_service" name="test_get_provider_by_id" time="0.029" /><testcase classname="tests.service.test_llm_provider_service" name="test_update_provider" time="0.028" /><testcase classname="tests.service.test_llm_provider_service" name="test_delete_provider" time="0.029"><failure message="AssertionError: assert LLMProviderOutput(id=UUID('07632446-268d-44e8-8096-fe1efc28c487'), name='test-provider', base_url='https://api.test.com', api_key='test-key', org_id=None, project_id='test-project', is_active=False, created_at=datetime.datetime(2025, 1, 19, 3, 55, 6, 369057, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 3, 55, 6, 372252, tzinfo=datetime.timezone.utc)) is None">backend/tests/service/test_llm_provider_service.py:124: in test_delete_provider
    assert provider is None
E   AssertionError: assert LLMProviderOutput(id=UUID('07632446-268d-44e8-8096-fe1efc28c487'), name='test-provider', base_url='https://api.test.com', api_key='test-key', org_id=None, project_id='test-project', is_active=False, created_at=datetime.datetime(2025, 1, 19, 3, 55, 6, 369057, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 3, 55, 6, 372252, tzinfo=datetime.timezone.utc)) is None</failure></testcase><testcase classname="tests.service.test_llm_provider_service" name="test_create_provider_model" time="0.025"><error message="failed on setup with &quot;pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput&#10;default_model_id&#10;  Field required [type=missing, input_value={'provider_id': UUID('91f...000, 'temperature': 0.7}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&quot;">backend/tests/service/test_llm_provider_service.py:43: in sample_model_input
    return LLMProviderModelInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput
E   default_model_id
E     Field required [type=missing, input_value={'provider_id': UUID('91f...000, 'temperature': 0.7}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing</error></testcase><testcase classname="tests.service.test_llm_provider_service" name="test_create_model_without_provider" time="0.027"><error message="failed on setup with &quot;pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput&#10;default_model_id&#10;  Field required [type=missing, input_value={'provider_id': UUID('e05...000, 'temperature': 0.7}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&quot;">backend/tests/service/test_llm_provider_service.py:43: in sample_model_input
    return LLMProviderModelInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput
E   default_model_id
E     Field required [type=missing, input_value={'provider_id': UUID('e05...000, 'temperature': 0.7}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing</error></testcase><testcase classname="tests.service.test_llm_provider_service" name="test_get_model_by_id" time="0.026"><error message="failed on setup with &quot;pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput&#10;default_model_id&#10;  Field required [type=missing, input_value={'provider_id': UUID('0ee...000, 'temperature': 0.7}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&quot;">backend/tests/service/test_llm_provider_service.py:43: in sample_model_input
    return LLMProviderModelInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput
E   default_model_id
E     Field required [type=missing, input_value={'provider_id': UUID('0ee...000, 'temperature': 0.7}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing</error></testcase><testcase classname="tests.service.test_llm_provider_service" name="test_update_model" time="0.025"><error message="failed on setup with &quot;pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput&#10;default_model_id&#10;  Field required [type=missing, input_value={'provider_id': UUID('6e5...000, 'temperature': 0.7}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&quot;">backend/tests/service/test_llm_provider_service.py:43: in sample_model_input
    return LLMProviderModelInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput
E   default_model_id
E     Field required [type=missing, input_value={'provider_id': UUID('6e5...000, 'temperature': 0.7}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing</error></testcase><testcase classname="tests.service.test_llm_provider_service" name="test_delete_model" time="0.024"><error message="failed on setup with &quot;pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput&#10;default_model_id&#10;  Field required [type=missing, input_value={'provider_id': UUID('481...000, 'temperature': 0.7}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&quot;">backend/tests/service/test_llm_provider_service.py:43: in sample_model_input
    return LLMProviderModelInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput
E   default_model_id
E     Field required [type=missing, input_value={'provider_id': UUID('481...000, 'temperature': 0.7}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing</error></testcase><testcase classname="tests.service.test_llm_provider_service" name="test_get_provider_with_models" time="0.025"><error message="failed on setup with &quot;pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput&#10;default_model_id&#10;  Field required [type=missing, input_value={'provider_id': UUID('4f5...000, 'temperature': 0.7}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&quot;">backend/tests/service/test_llm_provider_service.py:43: in sample_model_input
    return LLMProviderModelInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput
E   default_model_id
E     Field required [type=missing, input_value={'provider_id': UUID('4f5...000, 'temperature': 0.7}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing</error></testcase><testcase classname="tests.service.test_llm_provider_service" name="test_convert_provider_data" time="0.025"><failure message="AttributeError: 'LLMProviderService' object has no attribute '_convert_provider_data'">backend/tests/service/test_llm_provider_service.py:212: in test_convert_provider_data
    converted = provider_service._convert_provider_data(data)
E   AttributeError: 'LLMProviderService' object has no attribute '_convert_provider_data'</failure></testcase><testcase classname="tests.service.test_llm_provider_service" name="test_initialize_providers_creates_templates" time="0.032"><failure message="assert None is not None">backend/tests/service/test_llm_provider_service.py:235: in test_initialize_providers_creates_templates
    assert question_template is not None
E   assert None is not None</failure></testcase><testcase classname="tests.service.test_llm_provider_service" name="test_initialize_providers_updates_existing_templates" time="0.031"><failure message="assert None is not None">backend/tests/service/test_llm_provider_service.py:271: in test_initialize_providers_updates_existing_templates
    assert initial_question_template is not None
E   assert None is not None</failure></testcase><testcase classname="tests.service.test_llm_provider_service" name="test_get_user_provider_with_templates" time="0.027"><failure message="assert None is not None">backend/tests/service/test_llm_provider_service.py:311: in test_get_user_provider_with_templates
    assert rag_template is not None
E   assert None is not None</failure></testcase><testcase classname="tests.service.test_llm_provider_service" name="test_initialize_providers_template_error_handling" time="0.032"><failure message="sqlalchemy.exc.ArgumentError: Textual SQL expression 'DELETE FROM prompt_templa...' should be explicitly declared as text('DELETE FROM prompt_templa...')">backend/tests/service/test_llm_provider_service.py:328: in test_initialize_providers_template_error_handling
    db_session.execute("DELETE FROM prompt_templates")
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2362: in execute
    return self._execute_internal(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2145: in _execute_internal
    statement = coercions.expect(roles.StatementRole, statement)
.venv/lib/python3.12/site-packages/sqlalchemy/sql/coercions.py:395: in expect
    resolved = impl._literal_coercion(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/coercions.py:621: in _literal_coercion
    return self._text_coercion(element, argname, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/sql/coercions.py:614: in _text_coercion
    return _no_text_coercion(element, argname)
.venv/lib/python3.12/site-packages/sqlalchemy/sql/coercions.py:584: in _no_text_coercion
    raise exc_cls(
E   sqlalchemy.exc.ArgumentError: Textual SQL expression 'DELETE FROM prompt_templa...' should be explicitly declared as text('DELETE FROM prompt_templa...')</failure></testcase><testcase classname="tests.service.test_llm_provider_service" name="test_get_provider_models" time="0.028" /><testcase classname="tests.service.test_pipeline_service" name="test_service_initialization" time="4.274" /><testcase classname="tests.service.test_pipeline_service" name="test_pipeline_initialization" time="3.742" /><testcase classname="tests.service.test_pipeline_service" name="test_execute_pipeline" time="3.652"><error message="failed on setup with &quot;TypeError: 'description' is an invalid keyword argument for PromptTemplate&quot;">backend/tests/service/test_pipeline_service.py:77: in test_templates
    template = PromptTemplate(
&lt;string&gt;:4: in __init__
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:571: in _initialize_instance
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:569: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2177: in _declarative_constructor
    raise TypeError(
E   TypeError: 'description' is an invalid keyword argument for PromptTemplate</error></testcase><testcase classname="tests.service.test_pipeline_service" name="test_pipeline_configuration_error" time="3.542"><error message="failed on setup with &quot;sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;ix_users_ibm_id&quot;&#10;DETAIL:  Key (ibm_id)=(test_user) already exists.&#10;&#10;[SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]&#10;[parameters: {'id': UUID('c23d8398-d89b-488c-95c1-21783b4e181e'), 'ibm_id': 'test_user', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 55, 22, 206131), 'updated_at': datetime.datetime(2025, 1, 19, 3, 55, 22, 206135)}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_user) already exists.

The above exception was the direct cause of the following exception:
backend/tests/service/test_pipeline_service.py:33: in test_user
    db_session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1048: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_user) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('c23d8398-d89b-488c-95c1-21783b4e181e'), 'ibm_id': 'test_user', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 55, 22, 206131), 'updated_at': datetime.datetime(2025, 1, 19, 3, 55, 22, 206135)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</error></testcase><testcase classname="tests.service.test_pipeline_service" name="test_pipeline_validation_error" time="9.808"><error message="failed on setup with &quot;sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;ix_users_ibm_id&quot;&#10;DETAIL:  Key (ibm_id)=(test_user) already exists.&#10;&#10;[SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]&#10;[parameters: {'id': UUID('83d1f421-6dee-4d06-aa06-21b74396ea72'), 'ibm_id': 'test_user', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 55, 32, 420272), 'updated_at': datetime.datetime(2025, 1, 19, 3, 55, 32, 420274)}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_user) already exists.

The above exception was the direct cause of the following exception:
backend/tests/service/test_pipeline_service.py:33: in test_user
    db_session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1048: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_user) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('83d1f421-6dee-4d06-aa06-21b74396ea72'), 'ibm_id': 'test_user', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 3, 55, 32, 420272), 'updated_at': datetime.datetime(2025, 1, 19, 3, 55, 32, 420274)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</error></testcase><testcase classname="tests.service.test_pipeline_service" name="test_pipeline_template_error" time="12.153"><error message="failed on setup with &quot;sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;ix_users_ibm_id&quot;&#10;DETAIL:  Key (ibm_id)=(test_user) already exists.&#10;&#10;[SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]&#10;[parameters: {'id': UUID('5bb0b5f1-7051-4e8c-8d37-13179e8ab869'), 'ibm_id': 'test_user', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 0, 20, 60049), 'updated_at': datetime.datetime(2025, 1, 19, 4, 0, 20, 60053)}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_user) already exists.

The above exception was the direct cause of the following exception:
backend/tests/service/test_pipeline_service.py:33: in test_user
    db_session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1048: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_user) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('5bb0b5f1-7051-4e8c-8d37-13179e8ab869'), 'ibm_id': 'test_user', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 0, 20, 60049), 'updated_at': datetime.datetime(2025, 1, 19, 4, 0, 20, 60053)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</error></testcase><testcase classname="tests.service.test_pipeline_service" name="test_pipeline_provider_error" time="11.096"><error message="failed on setup with &quot;sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;ix_users_ibm_id&quot;&#10;DETAIL:  Key (ibm_id)=(test_user) already exists.&#10;&#10;[SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]&#10;[parameters: {'id': UUID('622e486e-5d01-4779-a399-4ceb18e5cff0'), 'ibm_id': 'test_user', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 0, 31, 560242), 'updated_at': datetime.datetime(2025, 1, 19, 4, 0, 31, 560247)}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_user) already exists.

The above exception was the direct cause of the following exception:
backend/tests/service/test_pipeline_service.py:33: in test_user
    db_session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1048: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_user) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('622e486e-5d01-4779-a399-4ceb18e5cff0'), 'ibm_id': 'test_user', 'email': 'test@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 0, 31, 560242), 'updated_at': datetime.datetime(2025, 1, 19, 4, 0, 31, 560247)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</error></testcase><testcase classname="tests.service.test_pipeline_service" name="test_pipeline_result_methods" time="0.029"><error message="failed on setup with &quot;AttributeError: 'LLMProviderOutput' object has no attribute 'generate_embeddings'&quot;">backend/tests/service/test_pipeline_service.py:113: in mock_query_results
    embeddings = provider.generate_embeddings([text1, text2])
.venv/lib/python3.12/site-packages/pydantic/main.py:892: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'LLMProviderOutput' object has no attribute 'generate_embeddings'</error></testcase><testcase classname="tests.service.test_pipeline_service" name="test_get_collection_default_pipeline" time="8.425"><error message="failed on setup with &quot;file /app/backend/tests/service/test_pipeline_service.py, line 295&#10;  def test_get_collection_default_pipeline(&#10;E       fixture 'test_collection' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_query_results, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_service, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, search_input, session_mocker, test_client, test_documents, test_llm_parameters, test_prompt_template_data, test_questions, test_templates, test_user, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/service/test_pipeline_service.py:295&quot;">file /app/backend/tests/service/test_pipeline_service.py, line 295
  def test_get_collection_default_pipeline(
E       fixture 'test_collection' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_query_results, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_service, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, search_input, session_mocker, test_client, test_documents, test_llm_parameters, test_prompt_template_data, test_questions, test_templates, test_user, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/service/test_pipeline_service.py:295</error></testcase><testcase classname="tests.service.test_pipeline_service" name="test_validate_collection_default_rules" time="6.616"><error message="failed on setup with &quot;file /app/backend/tests/service/test_pipeline_service.py, line 312&#10;  def test_validate_collection_default_rules(&#10;E       fixture 'test_config' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_query_results, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_service, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, search_input, session_mocker, test_client, test_documents, test_llm_parameters, test_prompt_template_data, test_questions, test_templates, test_user, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/service/test_pipeline_service.py:312&quot;">file /app/backend/tests/service/test_pipeline_service.py, line 312
  def test_validate_collection_default_rules(
E       fixture 'test_config' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mock_query_results, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pipeline_service, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, search_input, session_mocker, test_client, test_documents, test_llm_parameters, test_prompt_template_data, test_questions, test_templates, test_user, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/service/test_pipeline_service.py:312</error></testcase><testcase classname="tests.service.test_prompt_template_service" name="test_initialize_default_templates" time="0.007"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.service.test_prompt_template_service" name="test_create_or_update_template" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.service.test_prompt_template_service" name="test_get_by_id" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.service.test_prompt_template_service" name="test_get_user_templates" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.service.test_prompt_template_service" name="test_get_by_type" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.service.test_prompt_template_service" name="test_delete_template" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.service.test_prompt_template_service" name="test_format_prompt" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.service.test_prompt_template_service" name="test_apply_context_strategy" time="0.004"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.service.test_prompt_template_service" name="test_template_to_dict" time="0.005"><error message="failed on setup with &quot;core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput&#10;id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type&#10;is_active&#10;  Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/bool_type&#10;created_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&#10;updated_at&#10;  Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/datetime_type&quot;">backend/rag_solution/services/llm_provider_service.py:77: in create_provider
    provider = self.repository.create_provider(provider_input)
backend/rag_solution/repository/llm_provider_repository.py:102: in create_provider
    return LLMProviderOutput.model_validate(provider, from_attributes=True, context={"session": self.db})
E   pydantic_core._pydantic_core.ValidationError: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type

During handling of the above exception, another exception occurred:
backend/tests/conftest.py:393: in ensure_watsonx_provider
    provider = provider_service.create_provider(provider_input)
backend/rag_solution/services/llm_provider_service.py:80: in create_provider
    raise ProviderValidationError(
E   core.custom_exceptions.ProviderValidationError: Provider validation failed for watsonx: 4 validation errors for LLMProviderOutput
E   id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type
E   is_active
E     Input should be a valid boolean [type=bool_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/bool_type
E   created_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type
E   updated_at
E     Input should be a valid datetime [type=datetime_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/datetime_type</error></testcase><testcase classname="tests.service.test_provider_factory" name="test_list_providers" time="0.031" /><testcase classname="tests.service.test_provider_factory" name="test_get_provider" time="1.311" /><testcase classname="tests.service.test_provider_factory" name="test_get_unknown_provider" time="0.033" /><testcase classname="tests.service.test_provider_factory" name="test_provider_instance_caching" time="1.304" /><testcase classname="tests.service.test_provider_factory" name="test_provider_reinitialization" time="2.896" /><testcase classname="tests.service.test_provider_factory" name="test_provider_cleanup" time="1.355" /><testcase classname="tests.service.test_provider_factory" name="test_provider_case_insensitive" time="1.392" /><testcase classname="tests.service.test_query_rewriter.TestQueryRewriter" name="test_hde_rewriter" time="0.107" /><testcase classname="tests.service.test_query_rewriter.TestQueryRewriter" name="test_hde_rewriter_empty_response" time="0.094" /><testcase classname="tests.service.test_query_rewriter.TestQueryRewriter" name="test_hde_rewriter_error_handling" time="0.028" /><testcase classname="tests.service.test_query_rewriter.TestQueryRewriter" name="test_hde_rewriter_with_context" time="0.025" /><testcase classname="tests.service.test_query_rewriter.TestQueryRewriter" name="test_logging" time="0.029" /><testcase classname="tests.service.test_query_rewriter.TestQueryRewriter" name="test_query_rewriter_empty_query" time="0.027" /><testcase classname="tests.service.test_query_rewriter.TestQueryRewriter" name="test_query_rewriter_invalid_config" time="0.027" /><testcase classname="tests.service.test_query_rewriter.TestQueryRewriter" name="test_query_rewriter_with_all_rewriters" time="0.029" /><testcase classname="tests.service.test_query_rewriter.TestQueryRewriter" name="test_simple_query_rewriter" time="0.028" /><testcase classname="tests.service.test_question_service" name="test_suggest_questions_success" time="3.130"><failure message="AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'">backend/tests/service/test_question_service.py:42: in test_suggest_questions_success
    questions = await question_service.suggest_questions(
backend/rag_solution/services/question_service.py:211: in suggest_questions
    parameters = self.llm_parameters_service.get_user_default(user_id)
E   AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'</failure></testcase><testcase classname="tests.service.test_question_service" name="test_suggest_questions_empty_texts" time="3.106" /><testcase classname="tests.service.test_question_service" name="test_suggest_questions_validation" time="2.898"><failure message="AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'">backend/tests/service/test_question_service.py:106: in test_suggest_questions_validation
    questions = await service_with_config.suggest_questions(
backend/rag_solution/services/question_service.py:211: in suggest_questions
    parameters = self.llm_parameters_service.get_user_default(user_id)
E   AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'</failure></testcase><testcase classname="tests.service.test_question_service" name="test_regenerate_questions" time="3.107"><failure message="AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'">backend/tests/service/test_question_service.py:136: in test_regenerate_questions
    initial_questions = await question_service.suggest_questions(
backend/rag_solution/services/question_service.py:211: in suggest_questions
    parameters = self.llm_parameters_service.get_user_default(user_id)
E   AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'</failure></testcase><testcase classname="tests.service.test_question_service" name="test_get_collection_questions" time="2.862"><failure message="AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'">backend/tests/service/test_question_service.py:174: in test_get_collection_questions
    generated_questions = await question_service.suggest_questions(
backend/rag_solution/services/question_service.py:211: in suggest_questions
    parameters = self.llm_parameters_service.get_user_default(user_id)
E   AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'</failure></testcase><testcase classname="tests.service.test_question_service" name="test_question_filtering" time="0.036" /><testcase classname="tests.service.test_question_service" name="test_question_ranking" time="3.844" /><testcase classname="tests.service.test_question_service" name="test_duplicate_question_filtering" time="0.034" /><testcase classname="tests.service.test_question_service" name="test_suggest_questions_missing_template" time="3.095"><failure message="sqlalchemy.exc.InvalidRequestError: Entity namespace for &quot;prompt_templates&quot; has no property &quot;type&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/sql/base.py:2181: in _entity_namespace_key
    return getattr(ns, key)  # type: ignore
E   AttributeError: type object 'PromptTemplate' has no attribute 'type'

The above exception was the direct cause of the following exception:
backend/tests/service/test_question_service.py:273: in test_suggest_questions_missing_template
    db_session.query(PromptTemplate).filter_by(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:1984: in filter_by
    _entity_namespace_key(from_entity, key) == value
.venv/lib/python3.12/site-packages/sqlalchemy/sql/base.py:2183: in _entity_namespace_key
    raise exc.InvalidRequestError(
E   sqlalchemy.exc.InvalidRequestError: Entity namespace for "prompt_templates" has no property "type"</failure></testcase><testcase classname="tests.service.test_question_service" name="test_suggest_questions_missing_parameters" time="2.891"><failure message="AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'">backend/tests/service/test_question_service.py:307: in test_suggest_questions_missing_parameters
    await question_service.suggest_questions(
backend/rag_solution/services/question_service.py:211: in suggest_questions
    parameters = self.llm_parameters_service.get_user_default(user_id)
E   AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'</failure></testcase><testcase classname="tests.service.test_question_service" name="test_suggest_questions_empty_llm_response" time="3.112"><failure message="AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'">backend/tests/service/test_question_service.py:339: in test_suggest_questions_empty_llm_response
    questions = await service_with_config.suggest_questions(
backend/rag_solution/services/question_service.py:211: in suggest_questions
    parameters = self.llm_parameters_service.get_user_default(user_id)
E   AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'</failure></testcase><testcase classname="tests.service.test_question_service" name="test_validate_question_malformed_input" time="0.030"><failure message="AttributeError: 'NoneType' object has no attribute 'strip'">backend/tests/service/test_question_service.py:362: in test_validate_question_malformed_input
    is_valid, cleaned = question_service._validate_question(question, context)
backend/rag_solution/services/question_service.py:76: in _validate_question
    question = question.strip()
E   AttributeError: 'NoneType' object has no attribute 'strip'</failure></testcase><testcase classname="tests.service.test_question_service" name="test_invalid_configuration" time="0.031"><failure message="Failed: DID NOT RAISE &lt;class 'core.custom_exceptions.ValidationError'&gt;">backend/tests/service/test_question_service.py:377: in test_invalid_configuration
    with pytest.raises(ValidationError):
E   Failed: DID NOT RAISE &lt;class 'core.custom_exceptions.ValidationError'&gt;</failure></testcase><testcase classname="tests.service.test_question_service_providers" name="test_question_generation_with_watsonx" time="2.882"><failure message="AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'">backend/tests/service/test_question_service_providers.py:54: in test_question_generation_with_watsonx
    questions = await service.suggest_questions(
backend/rag_solution/services/question_service.py:211: in suggest_questions
    parameters = self.llm_parameters_service.get_user_default(user_id)
E   AttributeError: 'LLMParametersService' object has no attribute 'get_user_default'</failure></testcase><testcase classname="tests.service.test_question_service_providers" name="test_question_generation_with_invalid_template" time="0.030"><failure message="AttributeError: 'QuestionService' object has no attribute 'generate_questions'. Did you mean: 'regenerate_questions'?">backend/tests/service/test_question_service_providers.py:87: in test_question_generation_with_invalid_template
    service.generate_questions(context, template.id, num_questions=3)
E   AttributeError: 'QuestionService' object has no attribute 'generate_questions'. Did you mean: 'regenerate_questions'?</failure></testcase><testcase classname="tests.service.test_question_service_providers" name="test_question_generation_with_nonexistent_template" time="0.026"><failure message="AttributeError: 'QuestionService' object has no attribute 'generate_questions'. Did you mean: 'regenerate_questions'?">backend/tests/service/test_question_service_providers.py:96: in test_question_generation_with_nonexistent_template
    service.generate_questions(context, "nonexistent-id", num_questions=3)
E   AttributeError: 'QuestionService' object has no attribute 'generate_questions'. Did you mean: 'regenerate_questions'?</failure></testcase><testcase classname="tests.service.test_question_service_providers" name="test_question_generation_with_invalid_provider" time="0.026"><failure message="Failed: DID NOT RAISE &lt;class 'ValueError'&gt;">backend/tests/service/test_question_service_providers.py:102: in test_question_generation_with_invalid_provider
    with pytest.raises(ValueError, match="Invalid provider"):
E   Failed: DID NOT RAISE &lt;class 'ValueError'&gt;</failure></testcase><testcase classname="tests.service.test_retriever.TestRetriever" name="test_error_handling" time="0.028"><failure message="AttributeError: 'method' object has no attribute 'side_effect'">backend/tests/service/test_retriever.py:99: in test_error_handling
    self.mock_document_store.get_documents.side_effect = Exception("Test error")
E   AttributeError: 'method' object has no attribute 'side_effect'</failure></testcase><testcase classname="tests.service.test_retriever.TestRetriever" name="test_hybrid_retriever" time="0.026"><failure message="pydantic_core._pydantic_core.ValidationError: 3 validation errors for Document&#10;name&#10;  Field required [type=missing, input_value={'id': '1', 'content': 'Vector content 1'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;document_id&#10;  Field required [type=missing, input_value={'id': '1', 'content': 'Vector content 1'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;chunks&#10;  Field required [type=missing, input_value={'id': '1', 'content': 'Vector content 1'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing">backend/tests/service/test_retriever.py:63: in test_hybrid_retriever
    document=Document(id="1", content="Vector content 1"),
E   pydantic_core._pydantic_core.ValidationError: 3 validation errors for Document
E   name
E     Field required [type=missing, input_value={'id': '1', 'content': 'Vector content 1'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   document_id
E     Field required [type=missing, input_value={'id': '1', 'content': 'Vector content 1'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   chunks
E     Field required [type=missing, input_value={'id': '1', 'content': 'Vector content 1'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing</failure></testcase><testcase classname="tests.service.test_retriever.TestRetriever" name="test_keyword_retriever" time="0.026"><failure message="pydantic_core._pydantic_core.ValidationError: 3 validation errors for Document&#10;name&#10;  Field required [type=missing, input_value={'id': '1', 'content': 'This is a test document'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;document_id&#10;  Field required [type=missing, input_value={'id': '1', 'content': 'This is a test document'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;chunks&#10;  Field required [type=missing, input_value={'id': '1', 'content': 'This is a test document'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing">backend/tests/service/test_retriever.py:45: in test_keyword_retriever
    Document(id="1", content="This is a test document"),
E   pydantic_core._pydantic_core.ValidationError: 3 validation errors for Document
E   name
E     Field required [type=missing, input_value={'id': '1', 'content': 'This is a test document'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   document_id
E     Field required [type=missing, input_value={'id': '1', 'content': 'This is a test document'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   chunks
E     Field required [type=missing, input_value={'id': '1', 'content': 'This is a test document'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing</failure></testcase><testcase classname="tests.service.test_retriever.TestRetriever" name="test_vector_retriever" time="0.026"><failure message="pydantic_core._pydantic_core.ValidationError: 3 validation errors for Document&#10;name&#10;  Field required [type=missing, input_value={'id': '1', 'content': 'test content 1'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;document_id&#10;  Field required [type=missing, input_value={'id': '1', 'content': 'test content 1'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing&#10;chunks&#10;  Field required [type=missing, input_value={'id': '1', 'content': 'test content 1'}, input_type=dict]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/missing">backend/tests/service/test_retriever.py:17: in test_vector_retriever
    document=Document(id="1", content="test content 1"),
E   pydantic_core._pydantic_core.ValidationError: 3 validation errors for Document
E   name
E     Field required [type=missing, input_value={'id': '1', 'content': 'test content 1'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   document_id
E     Field required [type=missing, input_value={'id': '1', 'content': 'test content 1'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing
E   chunks
E     Field required [type=missing, input_value={'id': '1', 'content': 'test content 1'}, input_type=dict]
E       For further information visit https://errors.pydantic.dev/2.10/v/missing</failure></testcase><testcase classname="tests.service.test_search_service" name="test_search_basic" time="0.029"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('9a29b19b-8276-450f-8299-89accba70c68'), 'ibm_id': 'test-ibm-id', 'email': 'testuser@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 1, 27, 586389), 'updated_at': datetime.datetime(2025, 1, 19, 4, 1, 27, 586390)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/service/test_search_service.py:55: in test_user
    return user_service.create_user(user_schema)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.service.test_search_service" name="test_search_no_results" time="0.043"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('c8372719-cf4e-4a9b-8ae3-4072e1a131c1'), 'ibm_id': 'test-ibm-id', 'email': 'testuser@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 1, 28, 258146), 'updated_at': datetime.datetime(2025, 1, 19, 4, 1, 28, 258148)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/service/test_search_service.py:55: in test_user
    return user_service.create_user(user_schema)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.service.test_search_service" name="test_search_invalid_collection" time="0.047"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('178ae58f-8a69-467a-9e71-8fbc65fd7697'), 'ibm_id': 'test-ibm-id', 'email': 'testuser@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 1, 28, 727133), 'updated_at': datetime.datetime(2025, 1, 19, 4, 1, 28, 727136)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/service/test_search_service.py:55: in test_user
    return user_service.create_user(user_schema)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.service.test_search_service" name="test_search_unauthorized_collection" time="0.030"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('c4a2c74b-ac73-46c3-a294-53420af8a912'), 'ibm_id': 'test-ibm-id', 'email': 'testuser@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 1, 29, 185457), 'updated_at': datetime.datetime(2025, 1, 19, 4, 1, 29, 185458)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/service/test_search_service.py:55: in test_user
    return user_service.create_user(user_schema)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.service.test_search_service" name="test_search_multiple_documents" time="0.031"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('7a2919da-5976-4132-9455-9bcda1f15150'), 'ibm_id': 'test-ibm-id', 'email': 'testuser@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 1, 29, 628307), 'updated_at': datetime.datetime(2025, 1, 19, 4, 1, 29, 628308)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/service/test_search_service.py:55: in test_user
    return user_service.create_user(user_schema)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.service.test_search_service" name="test_search_invalid_pipeline" time="0.031"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('a44db45b-4cb2-4e64-ba3a-c4a52cf9ab96'), 'ibm_id': 'test-ibm-id', 'email': 'testuser@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 1, 30, 59255), 'updated_at': datetime.datetime(2025, 1, 19, 4, 1, 30, 59257)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/service/test_search_service.py:55: in test_user
    return user_service.create_user(user_schema)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.service.test_search_service" name="test_search_empty_question" time="0.027"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('50204c1c-c6f2-4ab6-bbbe-c6ab2cdcd2b1'), 'ibm_id': 'test-ibm-id', 'email': 'testuser@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 1, 30, 488267), 'updated_at': datetime.datetime(2025, 1, 19, 4, 1, 30, 488268)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/service/test_search_service.py:55: in test_user
    return user_service.create_user(user_schema)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.service.test_search_service" name="test_search_vector_store_error" time="0.029"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('b2d627b5-e4f7-49d0-b6bc-0ff76be68085'), 'ibm_id': 'test-ibm-id', 'email': 'testuser@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 1, 30, 909211), 'updated_at': datetime.datetime(2025, 1, 19, 4, 1, 30, 909212)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/service/test_search_service.py:55: in test_user
    return user_service.create_user(user_schema)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.service.test_search_service" name="test_search_llm_provider_error" time="0.027"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('950d4c37-58d5-4d5d-8808-4e923fd04b1e'), 'ibm_id': 'test-ibm-id', 'email': 'testuser@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 1, 31, 352458), 'updated_at': datetime.datetime(2025, 1, 19, 4, 1, 31, 352459)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/service/test_search_service.py:55: in test_user
    return user_service.create_user(user_schema)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.service.test_search_service" name="test_clean_generated_answer" time="0.026" /><testcase classname="tests.service.test_search_service" name="test_generate_document_metadata_missing_files" time="0.027"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('ee8be9e1-a112-419b-bd93-3ad5e3fe3edc'), 'ibm_id': 'test-ibm-id', 'email': 'testuser@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 1, 31, 807822), 'updated_at': datetime.datetime(2025, 1, 19, 4, 1, 31, 807824)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/service/test_search_service.py:55: in test_user
    return user_service.create_user(user_schema)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.service.test_search_service" name="test_generate_document_metadata_error" time="0.030"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('84670f32-7e51-4080-a363-90ecdc38699e'), 'ibm_id': 'test-ibm-id', 'email': 'testuser@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 1, 32, 231377), 'updated_at': datetime.datetime(2025, 1, 19, 4, 1, 32, 231378)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/service/test_search_service.py:55: in test_user
    return user_service.create_user(user_schema)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.service.test_search_service" name="test_lazy_service_initialization" time="3.869" /><testcase classname="tests.service.test_search_service" name="test_initialize_pipeline_error" time="0.034"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('206e7c0e-ff57-4176-9222-fadf199d65f4'), 'ibm_id': 'test-ibm-id', 'email': 'testuser@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 1, 36, 549279), 'updated_at': datetime.datetime(2025, 1, 19, 4, 1, 36, 549281)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/service/test_search_service.py:55: in test_user
    return user_service.create_user(user_schema)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.service.test_search_service" name="test_search_with_context" time="0.033"><error message="failed on setup with &quot;fastapi.exceptions.HTTPException: 400: IBM ID already exists&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test-ibm-id) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('07f1bb67-033e-44a6-83ec-c9db4df12281'), 'ibm_id': 'test-ibm-id', 'email': 'testuser@example.com', 'name': 'Test User', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 1, 36, 994806), 'updated_at': datetime.datetime(2025, 1, 19, 4, 1, 36, 994808)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/service/test_search_service.py:55: in test_user
    return user_service.create_user(user_schema)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</error></testcase><testcase classname="tests.service.test_team_service" name="test_create_team_success" time="0.030"><failure message="AttributeError: 'TeamOutput' object has no attribute 'is_private'">backend/tests/service/test_team_service.py:51: in test_create_team_success
    assert result.is_private == test_team_input.is_private
.venv/lib/python3.12/site-packages/pydantic/main.py:892: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'TeamOutput' object has no attribute 'is_private'</failure></testcase><testcase classname="tests.service.test_team_service" name="test_create_team_duplicate_name" time="0.026"><error message="failed on setup with &quot;AttributeError: 'TeamInput' object has no attribute 'is_private'&quot;">backend/tests/service/test_team_service.py:31: in test_team
    is_private=test_team_input.is_private
.venv/lib/python3.12/site-packages/pydantic/main.py:892: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'TeamInput' object has no attribute 'is_private'</error></testcase><testcase classname="tests.service.test_team_service" name="test_get_team_by_id_success" time="0.027"><error message="failed on setup with &quot;AttributeError: 'TeamInput' object has no attribute 'is_private'&quot;">backend/tests/service/test_team_service.py:31: in test_team
    is_private=test_team_input.is_private
.venv/lib/python3.12/site-packages/pydantic/main.py:892: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'TeamInput' object has no attribute 'is_private'</error></testcase><testcase classname="tests.service.test_team_service" name="test_get_team_by_id_not_found" time="0.026" /><testcase classname="tests.service.test_team_service" name="test_update_team_success" time="0.027"><error message="failed on setup with &quot;AttributeError: 'TeamInput' object has no attribute 'is_private'&quot;">backend/tests/service/test_team_service.py:31: in test_team
    is_private=test_team_input.is_private
.venv/lib/python3.12/site-packages/pydantic/main.py:892: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'TeamInput' object has no attribute 'is_private'</error></testcase><testcase classname="tests.service.test_team_service" name="test_update_team_not_found" time="0.029" /><testcase classname="tests.service.test_team_service" name="test_delete_team_success" time="0.031"><error message="failed on setup with &quot;AttributeError: 'TeamInput' object has no attribute 'is_private'&quot;">backend/tests/service/test_team_service.py:31: in test_team
    is_private=test_team_input.is_private
.venv/lib/python3.12/site-packages/pydantic/main.py:892: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'TeamInput' object has no attribute 'is_private'</error></testcase><testcase classname="tests.service.test_team_service" name="test_delete_team_not_found" time="0.031"><failure message="fastapi.exceptions.HTTPException: 404: Team not found">backend/tests/service/test_team_service.py:143: in test_delete_team_not_found
    result = service.delete_team(uuid4())
backend/rag_solution/services/team_service.py:71: in delete_team
    raise HTTPException(status_code=404, detail="Team not found")
E   fastapi.exceptions.HTTPException: 404: Team not found</failure></testcase><testcase classname="tests.service.test_team_service" name="test_get_team_users" time="0.031"><error message="failed on setup with &quot;AttributeError: 'TeamInput' object has no attribute 'is_private'&quot;">backend/tests/service/test_team_service.py:31: in test_team
    is_private=test_team_input.is_private
.venv/lib/python3.12/site-packages/pydantic/main.py:892: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'TeamInput' object has no attribute 'is_private'</error></testcase><testcase classname="tests.service.test_team_service" name="test_add_user_to_team" time="0.029"><error message="failed on setup with &quot;AttributeError: 'TeamInput' object has no attribute 'is_private'&quot;">backend/tests/service/test_team_service.py:31: in test_team
    is_private=test_team_input.is_private
.venv/lib/python3.12/site-packages/pydantic/main.py:892: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'TeamInput' object has no attribute 'is_private'</error></testcase><testcase classname="tests.service.test_team_service" name="test_remove_user_from_team" time="0.026"><error message="failed on setup with &quot;AttributeError: 'TeamInput' object has no attribute 'is_private'&quot;">backend/tests/service/test_team_service.py:31: in test_team
    is_private=test_team_input.is_private
.venv/lib/python3.12/site-packages/pydantic/main.py:892: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'TeamInput' object has no attribute 'is_private'</error></testcase><testcase classname="tests.service.test_team_service" name="test_list_teams" time="0.026"><error message="failed on setup with &quot;AttributeError: 'TeamInput' object has no attribute 'is_private'&quot;">backend/tests/service/test_team_service.py:31: in test_team
    is_private=test_team_input.is_private
.venv/lib/python3.12/site-packages/pydantic/main.py:892: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'TeamInput' object has no attribute 'is_private'</error></testcase><testcase classname="tests.service.test_team_service" name="test_list_teams_pagination" time="0.026"><error message="failed on setup with &quot;AttributeError: 'TeamInput' object has no attribute 'is_private'&quot;">backend/tests/service/test_team_service.py:31: in test_team
    is_private=test_team_input.is_private
.venv/lib/python3.12/site-packages/pydantic/main.py:892: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'TeamInput' object has no attribute 'is_private'</error></testcase><testcase classname="tests.service.test_user_collection_interaction_service" name="test_get_user_collections_with_files" time="0.030"><error message="failed on setup with &quot;sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column &quot;user_id&quot; of relation &quot;files&quot; violates not-null constraint&#10;DETAIL:  Failing row contains (31e13c8e-ec43-4be8-b82d-da0c37510060, null, 336c6de4-b5d2-416d-a27f-58b1640e3080, file0.txt, /path/to/file0.txt, txt, doc0, {}, 2025-01-19 04:01:38.039683, 2025-01-19 04:01:38.039685).&#10;&#10;[SQL: INSERT INTO files (id, user_id, collection_id, filename, file_path, file_type, document_id, file_metadata, created_at, updated_at) VALUES (%(id__0)s::UUID, %(user_id__0)s::UUID, %(collection_id__0)s::UUID, %(filename__0)s, %(file_path__0)s, %(file_ty ... 410 characters truncated ... ile_type__2)s, %(document_id__2)s, %(file_metadata__2)s::JSON, %(created_at__2)s, %(updated_at__2)s)]&#10;[parameters: {'file_path__0': '/path/to/file0.txt', 'filename__0': 'file0.txt', 'file_metadata__0': '{}', 'collection_id__0': UUID('336c6de4-b5d2-416d-a27f-58b1640e3080'), 'file_type__0': 'txt', 'id__0': UUID('31e13c8e-ec43-4be8-b82d-da0c37510060'), 'created_at__0': datetime.datetime(2025, 1, 19, 4, 1, 38, 39683), 'updated_at__0': datetime.datetime(2025, 1, 19, 4, 1, 38, 39685), 'document_id__0': 'doc0', 'user_id__0': None, 'file_path__1': '/path/to/file1.txt', 'filename__1': 'file1.txt', 'file_metadata__1': '{}', 'collection_id__1': UUID('336c6de4-b5d2-416d-a27f-58b1640e3080'), 'file_type__1': 'txt', 'id__1': UUID('ea316529-4380-4c69-98a4-1ad5da47bb7c'), 'created_at__1': datetime.datetime(2025, 1, 19, 4, 1, 38, 39689), 'updated_at__1': datetime.datetime(2025, 1, 19, 4, 1, 38, 39689), 'document_id__1': 'doc1', 'user_id__1': None, 'file_path__2': '/path/to/file2.txt', 'filename__2': 'file2.txt', 'file_metadata__2': '{}', 'collection_id__2': UUID('336c6de4-b5d2-416d-a27f-58b1640e3080'), 'file_type__2': 'txt', 'id__2': UUID('62349c49-e4ed-4e78-8559-2d526d092642'), 'created_at__2': datetime.datetime(2025, 1, 19, 4, 1, 38, 39693), 'updated_at__2': datetime.datetime(2025, 1, 19, 4, 1, 38, 39694), 'document_id__2': 'doc2', 'user_id__2': None}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)&quot;">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2118: in _exec_insertmany_context
    dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.NotNullViolation: null value in column "user_id" of relation "files" violates not-null constraint
E   DETAIL:  Failing row contains (31e13c8e-ec43-4be8-b82d-da0c37510060, null, 336c6de4-b5d2-416d-a27f-58b1640e3080, file0.txt, /path/to/file0.txt, txt, doc0, {}, 2025-01-19 04:01:38.039683, 2025-01-19 04:01:38.039685).

The above exception was the direct cause of the following exception:
backend/tests/service/test_user_collection_interaction_service.py:80: in test_collection_with_files
    db_session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1143: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1844: in _execute_context
    return self._exec_insertmany_context(dialect, context)
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2126: in _exec_insertmany_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2118: in _exec_insertmany_context
    dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "user_id" of relation "files" violates not-null constraint
E   DETAIL:  Failing row contains (31e13c8e-ec43-4be8-b82d-da0c37510060, null, 336c6de4-b5d2-416d-a27f-58b1640e3080, file0.txt, /path/to/file0.txt, txt, doc0, {}, 2025-01-19 04:01:38.039683, 2025-01-19 04:01:38.039685).
E   
E   [SQL: INSERT INTO files (id, user_id, collection_id, filename, file_path, file_type, document_id, file_metadata, created_at, updated_at) VALUES (%(id__0)s::UUID, %(user_id__0)s::UUID, %(collection_id__0)s::UUID, %(filename__0)s, %(file_path__0)s, %(file_ty ... 410 characters truncated ... ile_type__2)s, %(document_id__2)s, %(file_metadata__2)s::JSON, %(created_at__2)s, %(updated_at__2)s)]
E   [parameters: {'file_path__0': '/path/to/file0.txt', 'filename__0': 'file0.txt', 'file_metadata__0': '{}', 'collection_id__0': UUID('336c6de4-b5d2-416d-a27f-58b1640e3080'), 'file_type__0': 'txt', 'id__0': UUID('31e13c8e-ec43-4be8-b82d-da0c37510060'), 'created_at__0': datetime.datetime(2025, 1, 19, 4, 1, 38, 39683), 'updated_at__0': datetime.datetime(2025, 1, 19, 4, 1, 38, 39685), 'document_id__0': 'doc0', 'user_id__0': None, 'file_path__1': '/path/to/file1.txt', 'filename__1': 'file1.txt', 'file_metadata__1': '{}', 'collection_id__1': UUID('336c6de4-b5d2-416d-a27f-58b1640e3080'), 'file_type__1': 'txt', 'id__1': UUID('ea316529-4380-4c69-98a4-1ad5da47bb7c'), 'created_at__1': datetime.datetime(2025, 1, 19, 4, 1, 38, 39689), 'updated_at__1': datetime.datetime(2025, 1, 19, 4, 1, 38, 39689), 'document_id__1': 'doc1', 'user_id__1': None, 'file_path__2': '/path/to/file2.txt', 'filename__2': 'file2.txt', 'file_metadata__2': '{}', 'collection_id__2': UUID('336c6de4-b5d2-416d-a27f-58b1640e3080'), 'file_type__2': 'txt', 'id__2': UUID('62349c49-e4ed-4e78-8559-2d526d092642'), 'created_at__2': datetime.datetime(2025, 1, 19, 4, 1, 38, 39693), 'updated_at__2': datetime.datetime(2025, 1, 19, 4, 1, 38, 39694), 'document_id__2': 'doc2', 'user_id__2': None}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</error></testcase><testcase classname="tests.service.test_user_collection_interaction_service" name="test_get_user_collections_with_files_no_collections" time="0.029" /><testcase classname="tests.service.test_user_collection_interaction_service" name="test_get_user_collections_with_files_multiple_collections" time="0.035"><failure message="sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column &quot;user_id&quot; of relation &quot;files&quot; violates not-null constraint&#10;DETAIL:  Failing row contains (bd5f50aa-6f68-4b6f-abef-72ed3f9e6648, null, 8be5512d-74a5-4476-b150-1cdcf9de1004, collection0_file0.txt, /path/to/collection0/file0.txt, txt, doc00, {}, 2025-01-19 04:01:38.493757, 2025-01-19 04:01:38.493758).&#10;&#10;[SQL: INSERT INTO files (id, user_id, collection_id, filename, file_path, file_type, document_id, file_metadata, created_at, updated_at) VALUES (%(id__0)s::UUID, %(user_id__0)s::UUID, %(collection_id__0)s::UUID, %(filename__0)s, %(file_path__0)s, %(file_ty ... 202 characters truncated ... ile_type__1)s, %(document_id__1)s, %(file_metadata__1)s::JSON, %(created_at__1)s, %(updated_at__1)s)]&#10;[parameters: {'file_path__0': '/path/to/collection0/file0.txt', 'filename__0': 'collection0_file0.txt', 'file_metadata__0': '{}', 'collection_id__0': UUID('8be5512d-74a5-4476-b150-1cdcf9de1004'), 'file_type__0': 'txt', 'id__0': UUID('bd5f50aa-6f68-4b6f-abef-72ed3f9e6648'), 'created_at__0': datetime.datetime(2025, 1, 19, 4, 1, 38, 493757), 'updated_at__0': datetime.datetime(2025, 1, 19, 4, 1, 38, 493758), 'document_id__0': 'doc00', 'user_id__0': None, 'file_path__1': '/path/to/collection0/file1.txt', 'filename__1': 'collection0_file1.txt', 'file_metadata__1': '{}', 'collection_id__1': UUID('8be5512d-74a5-4476-b150-1cdcf9de1004'), 'file_type__1': 'txt', 'id__1': UUID('2300b682-d0be-4699-aae1-e574c9c3b23b'), 'created_at__1': datetime.datetime(2025, 1, 19, 4, 1, 38, 493762), 'updated_at__1': datetime.datetime(2025, 1, 19, 4, 1, 38, 493763), 'document_id__1': 'doc01', 'user_id__1': None}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2118: in _exec_insertmany_context
    dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.NotNullViolation: null value in column "user_id" of relation "files" violates not-null constraint
E   DETAIL:  Failing row contains (bd5f50aa-6f68-4b6f-abef-72ed3f9e6648, null, 8be5512d-74a5-4476-b150-1cdcf9de1004, collection0_file0.txt, /path/to/collection0/file0.txt, txt, doc00, {}, 2025-01-19 04:01:38.493757, 2025-01-19 04:01:38.493758).

The above exception was the direct cause of the following exception:
backend/tests/service/test_user_collection_interaction_service.py:139: in test_get_user_collections_with_files_multiple_collections
    db_session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1143: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1844: in _execute_context
    return self._exec_insertmany_context(dialect, context)
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2126: in _exec_insertmany_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2118: in _exec_insertmany_context
    dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "user_id" of relation "files" violates not-null constraint
E   DETAIL:  Failing row contains (bd5f50aa-6f68-4b6f-abef-72ed3f9e6648, null, 8be5512d-74a5-4476-b150-1cdcf9de1004, collection0_file0.txt, /path/to/collection0/file0.txt, txt, doc00, {}, 2025-01-19 04:01:38.493757, 2025-01-19 04:01:38.493758).
E   
E   [SQL: INSERT INTO files (id, user_id, collection_id, filename, file_path, file_type, document_id, file_metadata, created_at, updated_at) VALUES (%(id__0)s::UUID, %(user_id__0)s::UUID, %(collection_id__0)s::UUID, %(filename__0)s, %(file_path__0)s, %(file_ty ... 202 characters truncated ... ile_type__1)s, %(document_id__1)s, %(file_metadata__1)s::JSON, %(created_at__1)s, %(updated_at__1)s)]
E   [parameters: {'file_path__0': '/path/to/collection0/file0.txt', 'filename__0': 'collection0_file0.txt', 'file_metadata__0': '{}', 'collection_id__0': UUID('8be5512d-74a5-4476-b150-1cdcf9de1004'), 'file_type__0': 'txt', 'id__0': UUID('bd5f50aa-6f68-4b6f-abef-72ed3f9e6648'), 'created_at__0': datetime.datetime(2025, 1, 19, 4, 1, 38, 493757), 'updated_at__0': datetime.datetime(2025, 1, 19, 4, 1, 38, 493758), 'document_id__0': 'doc00', 'user_id__0': None, 'file_path__1': '/path/to/collection0/file1.txt', 'filename__1': 'collection0_file1.txt', 'file_metadata__1': '{}', 'collection_id__1': UUID('8be5512d-74a5-4476-b150-1cdcf9de1004'), 'file_type__1': 'txt', 'id__1': UUID('2300b682-d0be-4699-aae1-e574c9c3b23b'), 'created_at__1': datetime.datetime(2025, 1, 19, 4, 1, 38, 493762), 'updated_at__1': datetime.datetime(2025, 1, 19, 4, 1, 38, 493763), 'document_id__1': 'doc01', 'user_id__1': None}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</failure></testcase><testcase classname="tests.service.test_user_collection_interaction_service" name="test_get_user_collections_with_files_nonexistent_user" time="0.055" /><testcase classname="tests.service.test_user_collection_interaction_service" name="test_get_user_collections_with_files_empty_collections" time="0.042" /><testcase classname="tests.service.test_user_collection_service" name="test_get_user_collections" time="0.039"><failure message="AssertionError: assert False&#10; +  where False = isinstance(UserCollectionOutput(user_id=UUID('e52ad423-ec00-4cd9-b1bc-c00e3906e250'), collection_id=UUID('4485955e-8ba7-4ffb-8cad-5e526715ee9f')), CollectionOutput)">backend/tests/service/test_user_collection_service.py:48: in test_get_user_collections
    assert isinstance(result[0], CollectionOutput)
E   AssertionError: assert False
E    +  where False = isinstance(UserCollectionOutput(user_id=UUID('e52ad423-ec00-4cd9-b1bc-c00e3906e250'), collection_id=UUID('4485955e-8ba7-4ffb-8cad-5e526715ee9f')), CollectionOutput)</failure></testcase><testcase classname="tests.service.test_user_collection_service" name="test_add_user_to_collection" time="0.042" /><testcase classname="tests.service.test_user_collection_service" name="test_add_user_to_collection_duplicate" time="0.044"><failure message="assert 500 == 400&#10; +  where 500 = HTTPException(status_code=500, detail='Failed to add user to collection: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;user_collection_pkey&quot;\nDETAIL:  Key (user_id, collection_id)=(273d3338-3f45-4879-99ae-8e55238fa7af, 53db70d0-289a-4f22-9cff-18d49c830f9e) already exists.\n\n[SQL: INSERT INTO user_collection (user_id, collection_id, joined_at) VALUES (%(user_id)s::UUID, %(collection_id)s::UUID, %(joined_at)s)]\n[parameters: {\'user_id\': UUID(\'273d3338-3f45-4879-99ae-8e55238fa7af\'), \'collection_id\': UUID(\'53db70d0-289a-4f22-9cff-18d49c830f9e\'), \'joined_at\': datetime.datetime(2025, 1, 19, 4, 1, 39, 64601)}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)').status_code&#10; +    where HTTPException(status_code=500, detail='Failed to add user to collection: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;user_collection_pkey&quot;\nDETAIL:  Key (user_id, collection_id)=(273d3338-3f45-4879-99ae-8e55238fa7af, 53db70d0-289a-4f22-9cff-18d49c830f9e) already exists.\n\n[SQL: INSERT INTO user_collection (user_id, collection_id, joined_at) VALUES (%(user_id)s::UUID, %(collection_id)s::UUID, %(joined_at)s)]\n[parameters: {\'user_id\': UUID(\'273d3338-3f45-4879-99ae-8e55238fa7af\'), \'collection_id\': UUID(\'53db70d0-289a-4f22-9cff-18d49c830f9e\'), \'joined_at\': datetime.datetime(2025, 1, 19, 4, 1, 39, 64601)}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)') = &lt;ExceptionInfo HTTPException(status_code=500, detail='Failed to add user to collection: (psycopg2.errors.UniqueViolation) duplicate k...at\': datetime.datetime(2025, 1, 19, 4, 1, 39, 64601)}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)') tblen=2&gt;.value">backend/tests/service/test_user_collection_service.py:86: in test_add_user_to_collection_duplicate
    assert exc_info.value.status_code == 400
E   assert 500 == 400
E    +  where 500 = HTTPException(status_code=500, detail='Failed to add user to collection: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "user_collection_pkey"\nDETAIL:  Key (user_id, collection_id)=(273d3338-3f45-4879-99ae-8e55238fa7af, 53db70d0-289a-4f22-9cff-18d49c830f9e) already exists.\n\n[SQL: INSERT INTO user_collection (user_id, collection_id, joined_at) VALUES (%(user_id)s::UUID, %(collection_id)s::UUID, %(joined_at)s)]\n[parameters: {\'user_id\': UUID(\'273d3338-3f45-4879-99ae-8e55238fa7af\'), \'collection_id\': UUID(\'53db70d0-289a-4f22-9cff-18d49c830f9e\'), \'joined_at\': datetime.datetime(2025, 1, 19, 4, 1, 39, 64601)}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)').status_code
E    +    where HTTPException(status_code=500, detail='Failed to add user to collection: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "user_collection_pkey"\nDETAIL:  Key (user_id, collection_id)=(273d3338-3f45-4879-99ae-8e55238fa7af, 53db70d0-289a-4f22-9cff-18d49c830f9e) already exists.\n\n[SQL: INSERT INTO user_collection (user_id, collection_id, joined_at) VALUES (%(user_id)s::UUID, %(collection_id)s::UUID, %(joined_at)s)]\n[parameters: {\'user_id\': UUID(\'273d3338-3f45-4879-99ae-8e55238fa7af\'), \'collection_id\': UUID(\'53db70d0-289a-4f22-9cff-18d49c830f9e\'), \'joined_at\': datetime.datetime(2025, 1, 19, 4, 1, 39, 64601)}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)') = &lt;ExceptionInfo HTTPException(status_code=500, detail='Failed to add user to collection: (psycopg2.errors.UniqueViolation) duplicate k...at\': datetime.datetime(2025, 1, 19, 4, 1, 39, 64601)}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)') tblen=2&gt;.value</failure></testcase><testcase classname="tests.service.test_user_collection_service" name="test_add_user_to_nonexistent_collection" time="0.040"><failure message="assert 500 == 404&#10; +  where 500 = HTTPException(status_code=500, detail='Failed to add user to collection: (psycopg2.errors.ForeignKeyViolation) insert or update on table &quot;user_collection&quot; violates foreign key constraint &quot;user_collection_collection_id_fkey&quot;\nDETAIL:  Key (collection_id)=(34baae24-d3f6-4742-915b-d5ac6460b01f) is not present in table &quot;collections&quot;.\n\n[SQL: INSERT INTO user_collection (user_id, collection_id, joined_at) VALUES (%(user_id)s::UUID, %(collection_id)s::UUID, %(joined_at)s)]\n[parameters: {\'user_id\': UUID(\'c7681322-e40a-4ef6-a771-34734f76d2e5\'), \'collection_id\': UUID(\'34baae24-d3f6-4742-915b-d5ac6460b01f\'), \'joined_at\': datetime.datetime(2025, 1, 19, 4, 1, 39, 111198)}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)').status_code&#10; +    where HTTPException(status_code=500, detail='Failed to add user to collection: (psycopg2.errors.ForeignKeyViolation) insert or update on table &quot;user_collection&quot; violates foreign key constraint &quot;user_collection_collection_id_fkey&quot;\nDETAIL:  Key (collection_id)=(34baae24-d3f6-4742-915b-d5ac6460b01f) is not present in table &quot;collections&quot;.\n\n[SQL: INSERT INTO user_collection (user_id, collection_id, joined_at) VALUES (%(user_id)s::UUID, %(collection_id)s::UUID, %(joined_at)s)]\n[parameters: {\'user_id\': UUID(\'c7681322-e40a-4ef6-a771-34734f76d2e5\'), \'collection_id\': UUID(\'34baae24-d3f6-4742-915b-d5ac6460b01f\'), \'joined_at\': datetime.datetime(2025, 1, 19, 4, 1, 39, 111198)}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)') = &lt;ExceptionInfo HTTPException(status_code=500, detail='Failed to add user to collection: (psycopg2.errors.ForeignKeyViolation) insert ...t\': datetime.datetime(2025, 1, 19, 4, 1, 39, 111198)}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)') tblen=2&gt;.value">backend/tests/service/test_user_collection_service.py:99: in test_add_user_to_nonexistent_collection
    assert exc_info.value.status_code == 404
E   assert 500 == 404
E    +  where 500 = HTTPException(status_code=500, detail='Failed to add user to collection: (psycopg2.errors.ForeignKeyViolation) insert or update on table "user_collection" violates foreign key constraint "user_collection_collection_id_fkey"\nDETAIL:  Key (collection_id)=(34baae24-d3f6-4742-915b-d5ac6460b01f) is not present in table "collections".\n\n[SQL: INSERT INTO user_collection (user_id, collection_id, joined_at) VALUES (%(user_id)s::UUID, %(collection_id)s::UUID, %(joined_at)s)]\n[parameters: {\'user_id\': UUID(\'c7681322-e40a-4ef6-a771-34734f76d2e5\'), \'collection_id\': UUID(\'34baae24-d3f6-4742-915b-d5ac6460b01f\'), \'joined_at\': datetime.datetime(2025, 1, 19, 4, 1, 39, 111198)}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)').status_code
E    +    where HTTPException(status_code=500, detail='Failed to add user to collection: (psycopg2.errors.ForeignKeyViolation) insert or update on table "user_collection" violates foreign key constraint "user_collection_collection_id_fkey"\nDETAIL:  Key (collection_id)=(34baae24-d3f6-4742-915b-d5ac6460b01f) is not present in table "collections".\n\n[SQL: INSERT INTO user_collection (user_id, collection_id, joined_at) VALUES (%(user_id)s::UUID, %(collection_id)s::UUID, %(joined_at)s)]\n[parameters: {\'user_id\': UUID(\'c7681322-e40a-4ef6-a771-34734f76d2e5\'), \'collection_id\': UUID(\'34baae24-d3f6-4742-915b-d5ac6460b01f\'), \'joined_at\': datetime.datetime(2025, 1, 19, 4, 1, 39, 111198)}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)') = &lt;ExceptionInfo HTTPException(status_code=500, detail='Failed to add user to collection: (psycopg2.errors.ForeignKeyViolation) insert ...t\': datetime.datetime(2025, 1, 19, 4, 1, 39, 111198)}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)') tblen=2&gt;.value</failure></testcase><testcase classname="tests.service.test_user_collection_service" name="test_remove_user_from_collection" time="0.035" /><testcase classname="tests.service.test_user_collection_service" name="test_remove_user_not_in_collection" time="0.029"><failure message="Failed: DID NOT RAISE &lt;class 'fastapi.exceptions.HTTPException'&gt;">backend/tests/service/test_user_collection_service.py:137: in test_remove_user_not_in_collection
    with pytest.raises(HTTPException) as exc_info:
E   Failed: DID NOT RAISE &lt;class 'fastapi.exceptions.HTTPException'&gt;</failure></testcase><testcase classname="tests.service.test_user_collection_service" name="test_get_collection_users" time="0.033"><failure message="AttributeError: 'UserCollectionOutput' object has no attribute 'name'">backend/tests/service/test_user_collection_service.py:163: in test_get_collection_users
    assert result[0].name == base_user.name
.venv/lib/python3.12/site-packages/pydantic/main.py:892: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'UserCollectionOutput' object has no attribute 'name'</failure></testcase><testcase classname="tests.service.test_user_collection_service" name="test_get_users_nonexistent_collection" time="0.027"><failure message="Failed: DID NOT RAISE &lt;class 'fastapi.exceptions.HTTPException'&gt;">backend/tests/service/test_user_collection_service.py:170: in test_get_users_nonexistent_collection
    with pytest.raises(HTTPException) as exc_info:
E   Failed: DID NOT RAISE &lt;class 'fastapi.exceptions.HTTPException'&gt;</failure></testcase><testcase classname="tests.service.test_user_collection_service" name="test_remove_all_users_from_collection" time="0.038" /><testcase classname="tests.service.test_user_collection_service" name="test_remove_all_users_nonexistent_collection" time="0.025"><failure message="Failed: DID NOT RAISE &lt;class 'fastapi.exceptions.HTTPException'&gt;">backend/tests/service/test_user_collection_service.py:212: in test_remove_all_users_nonexistent_collection
    with pytest.raises(HTTPException) as exc_info:
E   Failed: DID NOT RAISE &lt;class 'fastapi.exceptions.HTTPException'&gt;</failure></testcase><testcase classname="tests.service.test_user_service" name="test_create_user_success" time="0.027"><failure message="fastapi.exceptions.HTTPException: 400: IBM ID already exists">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id_2) already exists.

The above exception was the direct cause of the following exception:
backend/rag_solution/repository/user_repository.py:27: in create
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1967: in _exec_single_context
    self.dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id_2) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id)s::UUID, %(ibm_id)s, %(email)s, %(name)s, %(role)s, %(created_at)s, %(updated_at)s)]
E   [parameters: {'id': UUID('f44f6364-48e8-4e0c-8543-f6deda9c09fa'), 'ibm_id': 'test_ibm_id_2', 'email': 'test2@example.com', 'name': 'Test User 2', 'role': 'user', 'created_at': datetime.datetime(2025, 1, 19, 4, 1, 39, 364837), 'updated_at': datetime.datetime(2025, 1, 19, 4, 1, 39, 364838)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)

During handling of the above exception, another exception occurred:
backend/rag_solution/services/user_service.py:26: in create_user
    user = self.user_repository.create(user_input)
backend/rag_solution/repository/user_repository.py:34: in create
    raise ValueError("IBM ID already exists")
E   ValueError: IBM ID already exists

During handling of the above exception, another exception occurred:
backend/tests/service/test_user_service.py:33: in test_create_user_success
    result = service.create_user(test_user_input)
backend/rag_solution/services/user_service.py:31: in create_user
    raise HTTPException(status_code=400, detail=str(e))
E   fastapi.exceptions.HTTPException: 400: IBM ID already exists</failure></testcase><testcase classname="tests.service.test_user_service" name="test_create_user_duplicate_ibm_id" time="0.028" /><testcase classname="tests.service.test_user_service" name="test_get_or_create_user_by_fields" time="0.032" /><testcase classname="tests.service.test_user_service" name="test_get_user_by_id" time="0.029" /><testcase classname="tests.service.test_user_service" name="test_get_user_by_id_not_found" time="0.027" /><testcase classname="tests.service.test_user_service" name="test_get_user_by_ibm_id" time="0.027" /><testcase classname="tests.service.test_user_service" name="test_get_user_by_ibm_id_not_found" time="0.026" /><testcase classname="tests.service.test_user_service" name="test_update_user" time="0.028"><failure message="AssertionError: assert False&#10; +  where False = isinstance(UserInput(ibm_id='test_user_072ce338-49b7-473c-9317-2600abf95381', email='updated@example.com', name='Updated Name', role='admin'), UserOutput)">backend/tests/service/test_user_service.py:141: in test_update_user
    assert isinstance(result, UserOutput)
E   AssertionError: assert False
E    +  where False = isinstance(UserInput(ibm_id='test_user_072ce338-49b7-473c-9317-2600abf95381', email='updated@example.com', name='Updated Name', role='admin'), UserOutput)</failure></testcase><testcase classname="tests.service.test_user_service" name="test_update_user_not_found" time="0.027" /><testcase classname="tests.service.test_user_service" name="test_delete_user" time="0.034"><failure message="sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column &quot;user_id&quot; of relation &quot;prompt_templates&quot; violates not-null constraint&#10;DETAIL:  Failing row contains (0fbc5829-3d4b-418f-a286-a927abf98e12, null, default-rag-template, watsonx, RAG_QUERY, You are a helpful AI assistant specializing in answering questio..., {context}&#10;&#10;{question}, {&quot;context&quot;: &quot;Retrieved context for answering the question&quot;, &quot;que..., {&quot;context&quot;: &quot;Python was created by Guido van Rossum.&quot;, &quot;question..., null, null, null, null, t, 2025-01-19 04:01:40.028095+00, 2025-01-19 04:01:40.034324+00).&#10;&#10;[SQL: UPDATE prompt_templates SET user_id=%(user_id)s::UUID, updated_at=now() WHERE prompt_templates.id = %(prompt_templates_id)s::UUID]&#10;[parameters: [{'user_id': None, 'prompt_templates_id': UUID('0fbc5829-3d4b-418f-a286-a927abf98e12')}, {'user_id': None, 'prompt_templates_id': UUID('3505d1be-5ad8-42af-81c3-01159df3de4d')}]]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1936: in _exec_single_context
    self.dialect.do_executemany(
.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/psycopg2.py:794: in do_executemany
    cursor.executemany(statement, parameters)
E   psycopg2.errors.NotNullViolation: null value in column "user_id" of relation "prompt_templates" violates not-null constraint
E   DETAIL:  Failing row contains (0fbc5829-3d4b-418f-a286-a927abf98e12, null, default-rag-template, watsonx, RAG_QUERY, You are a helpful AI assistant specializing in answering questio..., {context}
E   
E   {question}, {"context": "Retrieved context for answering the question", "que..., {"context": "Python was created by Guido van Rossum.", "question..., null, null, null, null, t, 2025-01-19 04:01:40.028095+00, 2025-01-19 04:01:40.034324+00).

The above exception was the direct cause of the following exception:
backend/tests/service/test_user_service.py:168: in test_delete_user
    result = service.delete_user(base_user.id)
backend/rag_solution/services/user_service.py:79: in delete_user
    if not self.user_repository.delete(user_id):
backend/rag_solution/repository/user_repository.py:76: in delete
    self.db.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:85: in save_obj
    _emit_update_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:912: in _emit_update_statements
    c = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1846: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1986: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1936: in _exec_single_context
    self.dialect.do_executemany(
.venv/lib/python3.12/site-packages/sqlalchemy/dialects/postgresql/psycopg2.py:794: in do_executemany
    cursor.executemany(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.NotNullViolation) null value in column "user_id" of relation "prompt_templates" violates not-null constraint
E   DETAIL:  Failing row contains (0fbc5829-3d4b-418f-a286-a927abf98e12, null, default-rag-template, watsonx, RAG_QUERY, You are a helpful AI assistant specializing in answering questio..., {context}
E   
E   {question}, {"context": "Retrieved context for answering the question", "que..., {"context": "Python was created by Guido van Rossum.", "question..., null, null, null, null, t, 2025-01-19 04:01:40.028095+00, 2025-01-19 04:01:40.034324+00).
E   
E   [SQL: UPDATE prompt_templates SET user_id=%(user_id)s::UUID, updated_at=now() WHERE prompt_templates.id = %(prompt_templates_id)s::UUID]
E   [parameters: [{'user_id': None, 'prompt_templates_id': UUID('0fbc5829-3d4b-418f-a286-a927abf98e12')}, {'user_id': None, 'prompt_templates_id': UUID('3505d1be-5ad8-42af-81c3-01159df3de4d')}]]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</failure></testcase><testcase classname="tests.service.test_user_service" name="test_delete_user_not_found" time="0.027" /><testcase classname="tests.service.test_user_service" name="test_get_user_teams" time="0.031"><failure message="AssertionError: assert False&#10; +  where False = isinstance(UserTeamOutput(user_id=UUID('1554c921-0be0-434e-8767-9d2be1c80c72'), team_id=UUID('fa8cc58f-50af-41e3-8525-593ff6b96ef8'), joined_at=datetime.datetime(2025, 1, 19, 4, 1, 40, 598234)), TeamOutput)">backend/tests/service/test_user_service.py:203: in test_get_user_teams
    assert isinstance(result[0], TeamOutput)
E   AssertionError: assert False
E    +  where False = isinstance(UserTeamOutput(user_id=UUID('1554c921-0be0-434e-8767-9d2be1c80c72'), team_id=UUID('fa8cc58f-50af-41e3-8525-593ff6b96ef8'), joined_at=datetime.datetime(2025, 1, 19, 4, 1, 40, 598234)), TeamOutput)</failure></testcase><testcase classname="tests.service.test_user_service" name="test_list_users" time="0.036"><failure message="AssertionError: assert 10 == 2&#10; +  where 10 = len([UserOutput(id=UUID('eccdd5b0-31c5-440a-8d37-5df9863318e3'), ibm_id='test_user_a3bcd073-acf5-4991-9802-8edbe15183ec', email='test@example.com', name='Test User', role='user', created_at=datetime.datetime(2025, 1, 19, 3, 48, 24, 681865), updated_at=datetime.datetime(2025, 1, 19, 3, 48, 24, 681867)), UserOutput(id=UUID('3d338b1d-ee23-4b42-9163-91ed56aa701d'), ibm_id='test_user_2f714b3a-a370-4fb4-822f-ca67d9b85881', email='test@example.com', name='Test User', role='user', created_at=datetime.datetime(2025, 1, 19, 3, 48, 27, 176972), updated_at=datetime.datetime(2025, 1, 19, 3, 48, 27, 176975)), UserOutput(id=UUID('5e792259-471b-4565-b365-8786f76f5e95'), ibm_id='test_user_f2036aa5-4b50-40f9-a330-cfaecb635c4f', email='test@example.com', name='Test User', role='user', created_at=datetime.datetime(2025, 1, 19, 3, 48, 30, 313404), updated_at=datetime.datetime(2025, 1, 19, 3, 48, 30, 313407)), UserOutput(id=UUID('060a8a3d-3c17-41a0-82e7-b4c848ff183d'), ibm_id='test_user_2a1201b1-189f-41f2-b0bf-88a5fe5e1bf9', email='test@example.com', name='Test User', role='user', created_at=datetime.datetime(2025, 1, 19, 3, 48, 33, 256869), updated_at=datetime.datetime(2025, 1, 19, 3, 48, 33, 256872)), UserOutput(id=UUID('1ecb79ac-61ba-4498-a87f-a3b753d1d6cc'), ibm_id='test_user_9c2dd5e6-3df2-40ba-b07a-7aca2ce41bae', email='test@example.com', name='Test User', role='user', created_at=datetime.datetime(2025, 1, 19, 3, 48, 36, 240813), updated_at=datetime.datetime(2025, 1, 19, 3, 48, 36, 240816)), UserOutput(id=UUID('4d435b3a-3025-46d9-9f6c-035336e8aee1'), ibm_id='test_user_404eae87-b7dc-4922-b8b9-baef743172b2', email='test@example.com', name='Test User', role='user', created_at=datetime.datetime(2025, 1, 19, 3, 48, 39, 187234), updated_at=datetime.datetime(2025, 1, 19, 3, 48, 39, 187236)), ...])">backend/tests/service/test_user_service.py:225: in test_list_users
    assert len(result) == 2
E   AssertionError: assert 10 == 2
E    +  where 10 = len([UserOutput(id=UUID('eccdd5b0-31c5-440a-8d37-5df9863318e3'), ibm_id='test_user_a3bcd073-acf5-4991-9802-8edbe15183ec', email='test@example.com', name='Test User', role='user', created_at=datetime.datetime(2025, 1, 19, 3, 48, 24, 681865), updated_at=datetime.datetime(2025, 1, 19, 3, 48, 24, 681867)), UserOutput(id=UUID('3d338b1d-ee23-4b42-9163-91ed56aa701d'), ibm_id='test_user_2f714b3a-a370-4fb4-822f-ca67d9b85881', email='test@example.com', name='Test User', role='user', created_at=datetime.datetime(2025, 1, 19, 3, 48, 27, 176972), updated_at=datetime.datetime(2025, 1, 19, 3, 48, 27, 176975)), UserOutput(id=UUID('5e792259-471b-4565-b365-8786f76f5e95'), ibm_id='test_user_f2036aa5-4b50-40f9-a330-cfaecb635c4f', email='test@example.com', name='Test User', role='user', created_at=datetime.datetime(2025, 1, 19, 3, 48, 30, 313404), updated_at=datetime.datetime(2025, 1, 19, 3, 48, 30, 313407)), UserOutput(id=UUID('060a8a3d-3c17-41a0-82e7-b4c848ff183d'), ibm_id='test_user_2a1201b1-189f-41f2-b0bf-88a5fe5e1bf9', email='test@example.com', name='Test User', role='user', created_at=datetime.datetime(2025, 1, 19, 3, 48, 33, 256869), updated_at=datetime.datetime(2025, 1, 19, 3, 48, 33, 256872)), UserOutput(id=UUID('1ecb79ac-61ba-4498-a87f-a3b753d1d6cc'), ibm_id='test_user_9c2dd5e6-3df2-40ba-b07a-7aca2ce41bae', email='test@example.com', name='Test User', role='user', created_at=datetime.datetime(2025, 1, 19, 3, 48, 36, 240813), updated_at=datetime.datetime(2025, 1, 19, 3, 48, 36, 240816)), UserOutput(id=UUID('4d435b3a-3025-46d9-9f6c-035336e8aee1'), ibm_id='test_user_404eae87-b7dc-4922-b8b9-baef743172b2', email='test@example.com', name='Test User', role='user', created_at=datetime.datetime(2025, 1, 19, 3, 48, 39, 187234), updated_at=datetime.datetime(2025, 1, 19, 3, 48, 39, 187236)), ...])</failure></testcase><testcase classname="tests.service.test_user_service" name="test_list_users_pagination" time="0.031"><failure message="sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint &quot;ix_users_ibm_id&quot;&#10;DETAIL:  Key (ibm_id)=(test_ibm_id_2) already exists.&#10;&#10;[SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id__0)s::UUID, %(ibm_id__0)s, %(email__0)s, %(name__0)s, %(role__0)s, %(created_at__0)s, %(updated_at__0)s), (%(id__1)s::UUID, %(ibm_id__1)s, %(email__1)s, %(name__1) ... 289 characters truncated ... ::UUID, %(ibm_id__4)s, %(email__4)s, %(name__4)s, %(role__4)s, %(created_at__4)s, %(updated_at__4)s)]&#10;[parameters: {'name__0': 'Test User 0', 'ibm_id__0': 'test_ibm_id_0', 'role__0': 'user', 'email__0': 'test0@example.com', 'id__0': UUID('69d70f3a-6c90-4c81-8280-3c65fb667f4b'), 'created_at__0': datetime.datetime(2025, 1, 19, 4, 1, 40, 674614), 'updated_at__0': datetime.datetime(2025, 1, 19, 4, 1, 40, 674616), 'name__1': 'Test User 1', 'ibm_id__1': 'test_ibm_id_1', 'role__1': 'user', 'email__1': 'test1@example.com', 'id__1': UUID('bbd2da3c-3be4-4900-b8c5-ee61e4f73228'), 'created_at__1': datetime.datetime(2025, 1, 19, 4, 1, 40, 674621), 'updated_at__1': datetime.datetime(2025, 1, 19, 4, 1, 40, 674621), 'name__2': 'Test User 2', 'ibm_id__2': 'test_ibm_id_2', 'role__2': 'user', 'email__2': 'test2@example.com', 'id__2': UUID('b7ac8c8c-a639-4baf-b634-8ced621f2f6a'), 'created_at__2': datetime.datetime(2025, 1, 19, 4, 1, 40, 674625), 'updated_at__2': datetime.datetime(2025, 1, 19, 4, 1, 40, 674626), 'name__3': 'Test User 3', 'ibm_id__3': 'test_ibm_id_3', 'role__3': 'user', 'email__3': 'test3@example.com', 'id__3': UUID('f68ff671-85a1-42a8-9a77-43e5cd7551a1'), 'created_at__3': datetime.datetime(2025, 1, 19, 4, 1, 40, 674629), 'updated_at__3': datetime.datetime(2025, 1, 19, 4, 1, 40, 674630), 'name__4': 'Test User 4', 'ibm_id__4': 'test_ibm_id_4', 'role__4': 'user', 'email__4': 'test4@example.com', 'id__4': UUID('de7903fa-501e-43b8-b135-baf5c0b2a837'), 'created_at__4': datetime.datetime(2025, 1, 19, 4, 1, 40, 674633), 'updated_at__4': datetime.datetime(2025, 1, 19, 4, 1, 40, 674634)}]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)">.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2118: in _exec_insertmany_context
    dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id_2) already exists.

The above exception was the direct cause of the following exception:
backend/tests/service/test_user_service.py:246: in test_list_users_pagination
    db_session.commit()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2028: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4352: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4487: in _flush
    with util.safe_reraise():
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4448: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1143: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1418: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:515: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1640: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1844: in _execute_context
    return self._exec_insertmany_context(dialect, context)
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2126: in _exec_insertmany_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2355: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2118: in _exec_insertmany_context
    dialect.do_execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:941: in do_execute
    cursor.execute(statement, parameters)
E   sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "ix_users_ibm_id"
E   DETAIL:  Key (ibm_id)=(test_ibm_id_2) already exists.
E   
E   [SQL: INSERT INTO users (id, ibm_id, email, name, role, created_at, updated_at) VALUES (%(id__0)s::UUID, %(ibm_id__0)s, %(email__0)s, %(name__0)s, %(role__0)s, %(created_at__0)s, %(updated_at__0)s), (%(id__1)s::UUID, %(ibm_id__1)s, %(email__1)s, %(name__1) ... 289 characters truncated ... ::UUID, %(ibm_id__4)s, %(email__4)s, %(name__4)s, %(role__4)s, %(created_at__4)s, %(updated_at__4)s)]
E   [parameters: {'name__0': 'Test User 0', 'ibm_id__0': 'test_ibm_id_0', 'role__0': 'user', 'email__0': 'test0@example.com', 'id__0': UUID('69d70f3a-6c90-4c81-8280-3c65fb667f4b'), 'created_at__0': datetime.datetime(2025, 1, 19, 4, 1, 40, 674614), 'updated_at__0': datetime.datetime(2025, 1, 19, 4, 1, 40, 674616), 'name__1': 'Test User 1', 'ibm_id__1': 'test_ibm_id_1', 'role__1': 'user', 'email__1': 'test1@example.com', 'id__1': UUID('bbd2da3c-3be4-4900-b8c5-ee61e4f73228'), 'created_at__1': datetime.datetime(2025, 1, 19, 4, 1, 40, 674621), 'updated_at__1': datetime.datetime(2025, 1, 19, 4, 1, 40, 674621), 'name__2': 'Test User 2', 'ibm_id__2': 'test_ibm_id_2', 'role__2': 'user', 'email__2': 'test2@example.com', 'id__2': UUID('b7ac8c8c-a639-4baf-b634-8ced621f2f6a'), 'created_at__2': datetime.datetime(2025, 1, 19, 4, 1, 40, 674625), 'updated_at__2': datetime.datetime(2025, 1, 19, 4, 1, 40, 674626), 'name__3': 'Test User 3', 'ibm_id__3': 'test_ibm_id_3', 'role__3': 'user', 'email__3': 'test3@example.com', 'id__3': UUID('f68ff671-85a1-42a8-9a77-43e5cd7551a1'), 'created_at__3': datetime.datetime(2025, 1, 19, 4, 1, 40, 674629), 'updated_at__3': datetime.datetime(2025, 1, 19, 4, 1, 40, 674630), 'name__4': 'Test User 4', 'ibm_id__4': 'test_ibm_id_4', 'role__4': 'user', 'email__4': 'test4@example.com', 'id__4': UUID('de7903fa-501e-43b8-b135-baf5c0b2a837'), 'created_at__4': datetime.datetime(2025, 1, 19, 4, 1, 40, 674633), 'updated_at__4': datetime.datetime(2025, 1, 19, 4, 1, 40, 674634)}]
E   (Background on this error at: https://sqlalche.me/e/20/gkpj)</failure></testcase><testcase classname="tests.unit.test_core_config" name="test_settings_loaded_from_env" time="0.026" /><testcase classname="tests.unit.test_milvus_connection" name="test_milvus_connection" time="0.246" /><testcase classname="tests.unit.test_postgresql_connection" name="test_postgresql_connection" time="0.049" /><testcase classname="tests.unit.test_prompt_template" name="test_create_prompt_template" time="0.034" /><testcase classname="tests.unit.test_prompt_template" name="test_create_question_generation_template" time="0.034" /><testcase classname="tests.unit.test_prompt_template" name="test_invalid_provider" time="0.027"><failure message="Failed: DID NOT RAISE &lt;class 'ValueError'&gt;">backend/tests/unit/test_prompt_template.py:90: in test_invalid_provider
    with pytest.raises(ValueError, match="Invalid provider"):
E   Failed: DID NOT RAISE &lt;class 'ValueError'&gt;</failure></testcase><testcase classname="tests.unit.test_prompt_template" name="test_missing_variables" time="0.026"><failure message="Failed: DID NOT RAISE &lt;class 'ValueError'&gt;">backend/tests/unit/test_prompt_template.py:106: in test_missing_variables
    with pytest.raises(ValueError, match="Template variables missing"):
E   Failed: DID NOT RAISE &lt;class 'ValueError'&gt;</failure></testcase><testcase classname="tests.unit.test_provider_config" name="test_create_provider" time="0.027" /><testcase classname="tests.unit.test_provider_config" name="test_create_provider_validation_error" time="0.025"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderInput&#10;name&#10;  String should match pattern '^[a-zA-Z0-9_-]+$' [type=string_pattern_mismatch, input_value='test@invalid', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/string_pattern_mismatch">backend/tests/unit/test_provider_config.py:93: in test_create_provider_validation_error
    provider_service.create_provider(LLMProviderInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderInput
E   name
E     String should match pattern '^[a-zA-Z0-9_-]+$' [type=string_pattern_mismatch, input_value='test@invalid', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.10/v/string_pattern_mismatch</failure></testcase><testcase classname="tests.unit.test_provider_config" name="test_create_provider_model" time="0.035" /><testcase classname="tests.unit.test_provider_config" name="test_create_model_without_provider" time="0.031"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput&#10;provider_id&#10;  UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/uuid_type">backend/tests/unit/test_provider_config.py:130: in test_create_model_without_provider
    valid_model_input.provider_id = None
.venv/lib/python3.12/site-packages/pydantic/main.py:923: in __setattr__
    self.__pydantic_validator__.validate_assignment(self, name, value)
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderModelInput
E   provider_id
E     UUID input should be a string, bytes or UUID object [type=uuid_type, input_value=None, input_type=NoneType]
E       For further information visit https://errors.pydantic.dev/2.10/v/uuid_type</failure></testcase><testcase classname="tests.unit.test_provider_config" name="test_model_validation" time="0.034" /><testcase classname="tests.unit.test_provider_config" name="test_get_provider" time="0.036" /><testcase classname="tests.unit.test_provider_config" name="test_get_nonexistent_provider" time="0.030" /><testcase classname="tests.unit.test_provider_config" name="test_update_provider" time="0.031" /><testcase classname="tests.unit.test_provider_config" name="test_update_provider_validation_error" time="0.034"><failure message="Failed: DID NOT RAISE &lt;class 'core.custom_exceptions.ProviderValidationError'&gt;">backend/tests/unit/test_provider_config.py:225: in test_update_provider_validation_error
    with pytest.raises(ProviderValidationError) as exc_info:
E   Failed: DID NOT RAISE &lt;class 'core.custom_exceptions.ProviderValidationError'&gt;</failure></testcase><testcase classname="tests.unit.test_provider_config" name="test_delete_provider" time="0.031"><failure message="AssertionError: assert LLMProviderOutput(id=UUID('90728d25-b744-4b38-9c84-d47def09df43'), name='test-watsonx', base_url='https://us-south.ml.cloud.ibm.com', api_key='test-key', org_id=None, project_id='test-project', is_active=False, created_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 887254, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 891110, tzinfo=datetime.timezone.utc)) is None">backend/tests/unit/test_provider_config.py:245: in test_delete_provider
    assert retrieved is None
E   AssertionError: assert LLMProviderOutput(id=UUID('90728d25-b744-4b38-9c84-d47def09df43'), name='test-watsonx', base_url='https://us-south.ml.cloud.ibm.com', api_key='test-key', org_id=None, project_id='test-project', is_active=False, created_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 887254, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 891110, tzinfo=datetime.timezone.utc)) is None</failure></testcase><testcase classname="tests.unit.test_provider_config" name="test_get_active_providers" time="0.036"><failure message="AssertionError: assert 3 == 2&#10; +  where 3 = len([LLMProviderOutput(id=UUID('d4d364ed-b08c-45db-ba2d-04f970041d76'), name='watsonx', base_url='https://us-south.ml.cloud.ibm.com', api_key='vOP8jN6QNnWXR2HJGguzs1AvGOdadZY3_ppjwV-jJfjg', org_id=None, project_id='3f77f23d-71b7-426b-ae13-bc4710769880', is_active=True, created_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 913005, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 913005, tzinfo=datetime.timezone.utc)), LLMProviderOutput(id=UUID('db3a1b41-b162-4c6e-9329-f2e21bd8d9de'), name='test-provider-0', base_url='https://test.com', api_key='test-key', org_id=None, project_id=None, is_active=True, created_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 924165, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 924165, tzinfo=datetime.timezone.utc)), LLMProviderOutput(id=UUID('16ce9cde-1644-4c7e-872b-c5539c7ac533'), name='test-provider-1', base_url='https://test.com', api_key='test-key', org_id=None, project_id=None, is_active=True, created_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 927682, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 927682, tzinfo=datetime.timezone.utc))])">backend/tests/unit/test_provider_config.py:269: in test_get_active_providers
    assert len(active_providers) == 2
E   AssertionError: assert 3 == 2
E    +  where 3 = len([LLMProviderOutput(id=UUID('d4d364ed-b08c-45db-ba2d-04f970041d76'), name='watsonx', base_url='https://us-south.ml.cloud.ibm.com', api_key='vOP8jN6QNnWXR2HJGguzs1AvGOdadZY3_ppjwV-jJfjg', org_id=None, project_id='3f77f23d-71b7-426b-ae13-bc4710769880', is_active=True, created_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 913005, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 913005, tzinfo=datetime.timezone.utc)), LLMProviderOutput(id=UUID('db3a1b41-b162-4c6e-9329-f2e21bd8d9de'), name='test-provider-0', base_url='https://test.com', api_key='test-key', org_id=None, project_id=None, is_active=True, created_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 924165, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 924165, tzinfo=datetime.timezone.utc)), LLMProviderOutput(id=UUID('16ce9cde-1644-4c7e-872b-c5539c7ac533'), name='test-provider-1', base_url='https://test.com', api_key='test-key', org_id=None, project_id=None, is_active=True, created_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 927682, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 4, 1, 41, 927682, tzinfo=datetime.timezone.utc))])</failure></testcase><testcase classname="tests.unit.test_provider_config" name="test_provider_with_models" time="0.034"><failure message="core.custom_exceptions.LLMProviderError: Failed to retrieve provider with models: 'LLMProviderOutput' object has no attribute 'models'">backend/rag_solution/services/llm_provider_service.py:486: in get_provider_with_models
    "models": [LLMProviderModelOutput.model_validate(m) for m in provider.models]
.venv/lib/python3.12/site-packages/pydantic/main.py:892: in __getattr__
    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E   AttributeError: 'LLMProviderOutput' object has no attribute 'models'

During handling of the above exception, another exception occurred:
backend/tests/unit/test_provider_config.py:287: in test_provider_with_models
    result = provider_service.get_provider_with_models(provider.id)
backend/rag_solution/services/llm_provider_service.py:489: in get_provider_with_models
    raise LLMProviderError(
E   core.custom_exceptions.LLMProviderError: Failed to retrieve provider with models: 'LLMProviderOutput' object has no attribute 'models'</failure></testcase><testcase classname="tests.unit.test_provider_config" name="test_provider_initialization" time="0.038"><failure message="AssertionError: assert 3 == 1&#10; +  where 3 = len([LLMProviderOutput(id=UUID('fc19e86c-03ff-475c-bceb-5264312ac503'), name='watsonx', base_url='https://us-south.ml.cloud.ibm.com', api_key='test-key', org_id=None, project_id='test-project', is_active=True, created_at=datetime.datetime(2025, 1, 19, 4, 1, 42, 21121, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 4, 1, 42, 33885, tzinfo=datetime.timezone.utc)), LLMProviderOutput(id=UUID('ff5f6507-0622-43b6-aceb-ae5112de1929'), name='openai', base_url='https://api.openai.com', api_key='sk-proj-Om6eZoxq1M3QeSERWUv8T3BlbkFJqrrhhvMIezJ7o5wlxGCq', org_id=None, project_id=None, is_active=True, created_at=datetime.datetime(2025, 1, 19, 4, 1, 42, 39140, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 4, 1, 42, 39140, tzinfo=datetime.timezone.utc)), LLMProviderOutput(id=UUID('6aa60ed2-5d58-403d-8c35-c4a51f96be7f'), name='anthropic', base_url='https://api.anthropic.com', api_key='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', org_id=None, project_id=None, is_active=True, created_at=datetime.datetime(2025, 1, 19, 4, 1, 42, 40973, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 4, 1, 42, 40973, tzinfo=datetime.timezone.utc))])">backend/tests/unit/test_provider_config.py:308: in test_provider_initialization
    assert len(providers) == 1
E   AssertionError: assert 3 == 1
E    +  where 3 = len([LLMProviderOutput(id=UUID('fc19e86c-03ff-475c-bceb-5264312ac503'), name='watsonx', base_url='https://us-south.ml.cloud.ibm.com', api_key='test-key', org_id=None, project_id='test-project', is_active=True, created_at=datetime.datetime(2025, 1, 19, 4, 1, 42, 21121, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 4, 1, 42, 33885, tzinfo=datetime.timezone.utc)), LLMProviderOutput(id=UUID('ff5f6507-0622-43b6-aceb-ae5112de1929'), name='openai', base_url='https://api.openai.com', api_key='sk-proj-Om6eZoxq1M3QeSERWUv8T3BlbkFJqrrhhvMIezJ7o5wlxGCq', org_id=None, project_id=None, is_active=True, created_at=datetime.datetime(2025, 1, 19, 4, 1, 42, 39140, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 4, 1, 42, 39140, tzinfo=datetime.timezone.utc)), LLMProviderOutput(id=UUID('6aa60ed2-5d58-403d-8c35-c4a51f96be7f'), name='anthropic', base_url='https://api.anthropic.com', api_key='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', org_id=None, project_id=None, is_active=True, created_at=datetime.datetime(2025, 1, 19, 4, 1, 42, 40973, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2025, 1, 19, 4, 1, 42, 40973, tzinfo=datetime.timezone.utc))])</failure></testcase><testcase classname="tests.unit.test_provider_config" name="test_provider_initialization_error" time="0.032"><failure message="pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderInput&#10;base_url&#10;  String should match pattern '^https?://' [type=string_pattern_mismatch, input_value='not-a-url', input_type=str]&#10;    For further information visit https://errors.pydantic.dev/2.10/v/string_pattern_mismatch">backend/tests/unit/test_provider_config.py:327: in test_provider_initialization_error
    provider_service.initialize_providers(raise_on_error=True)
backend/rag_solution/services/llm_provider_service.py:534: in initialize_providers
    default_configs["watsonx"] = LLMProviderInput(
E   pydantic_core._pydantic_core.ValidationError: 1 validation error for LLMProviderInput
E   base_url
E     String should match pattern '^https?://' [type=string_pattern_mismatch, input_value='not-a-url', input_type=str]
E       For further information visit https://errors.pydantic.dev/2.10/v/string_pattern_mismatch</failure></testcase><testcase classname="tests.unit.test_watsonx" name="test_provider_initialization" time="1.385"><failure message="AssertionError: assert 'watsonxllm' == 'watsonx'&#10;  - watsonx&#10;  + watsonxllm&#10;  ?        +++">backend/tests/unit/test_watsonx.py:11: in test_provider_initialization
    assert provider._provider_name == "watsonx"
E   AssertionError: assert 'watsonxllm' == 'watsonx'
E     - watsonx
E     + watsonxllm
E     ?        +++</failure></testcase><testcase classname="tests.unit.test_watsonx" name="test_generate_text" time="2.483"><failure message="core.custom_exceptions.LLMProviderError: Failed to generate text: 'list' object has no attribute 'id'">backend/rag_solution/generation/providers/watsonx.py:150: in generate_text
    model = self._get_model(user_id, model_parameters)
backend/rag_solution/generation/providers/watsonx.py:96: in _get_model
    params = self._get_generation_params(user_id, model_parameters)
backend/rag_solution/generation/providers/watsonx.py:120: in _get_generation_params
    self.llm_parameters_service.create_or_update_parameters(user_id, model_parameters)
backend/rag_solution/services/llm_parameters_service.py:66: in create_or_update_parameters
    updated_params = self.repository.update(existing_params.id, parameters_input)
E   AttributeError: 'list' object has no attribute 'id'

During handling of the above exception, another exception occurred:
backend/tests/unit/test_watsonx.py:37: in test_generate_text
    response = provider.generate_text(
backend/rag_solution/generation/providers/watsonx.py:187: in generate_text
    raise LLMProviderError(
E   core.custom_exceptions.LLMProviderError: Failed to generate text: 'list' object has no attribute 'id'</failure></testcase><testcase classname="tests.unit.test_watsonx" name="test_generate_text_stream" time="3.096"><failure message="core.custom_exceptions.LLMProviderError: Failed to generate streaming text: 'list' object has no attribute 'id'">backend/rag_solution/generation/providers/watsonx.py:217: in generate_text_stream
    model = self._get_model(user_id, model_parameters)
backend/rag_solution/generation/providers/watsonx.py:96: in _get_model
    params = self._get_generation_params(user_id, model_parameters)
backend/rag_solution/generation/providers/watsonx.py:120: in _get_generation_params
    self.llm_parameters_service.create_or_update_parameters(user_id, model_parameters)
backend/rag_solution/services/llm_parameters_service.py:66: in create_or_update_parameters
    updated_params = self.repository.update(existing_params.id, parameters_input)
E   AttributeError: 'list' object has no attribute 'id'

During handling of the above exception, another exception occurred:
backend/tests/unit/test_watsonx.py:67: in test_generate_text_stream
    chunks = list(stream)
backend/rag_solution/generation/providers/watsonx.py:231: in generate_text_stream
    raise LLMProviderError(
E   core.custom_exceptions.LLMProviderError: Failed to generate streaming text: 'list' object has no attribute 'id'</failure></testcase><testcase classname="tests.unit.test_watsonx" name="test_get_embeddings" time="1.628" /><testcase classname="tests.unit.test_watsonx" name="test_template_formatting" time="2.383"><failure message="core.custom_exceptions.LLMProviderError: Failed to generate text: 'list' object has no attribute 'id'">backend/rag_solution/generation/providers/watsonx.py:150: in generate_text
    model = self._get_model(user_id, model_parameters)
backend/rag_solution/generation/providers/watsonx.py:96: in _get_model
    params = self._get_generation_params(user_id, model_parameters)
backend/rag_solution/generation/providers/watsonx.py:120: in _get_generation_params
    self.llm_parameters_service.create_or_update_parameters(user_id, model_parameters)
backend/rag_solution/services/llm_parameters_service.py:66: in create_or_update_parameters
    updated_params = self.repository.update(existing_params.id, parameters_input)
E   AttributeError: 'list' object has no attribute 'id'

During handling of the above exception, another exception occurred:
backend/tests/unit/test_watsonx.py:112: in test_template_formatting
    response = provider.generate_text(
backend/rag_solution/generation/providers/watsonx.py:187: in generate_text
    raise LLMProviderError(
E   core.custom_exceptions.LLMProviderError: Failed to generate text: 'list' object has no attribute 'id'</failure></testcase><testcase classname="tests.unit.test_watsonx" name="test_batch_generation" time="2.754"><failure message="core.custom_exceptions.LLMProviderError: Failed to generate text: 'list' object has no attribute 'id'">backend/rag_solution/generation/providers/watsonx.py:150: in generate_text
    model = self._get_model(user_id, model_parameters)
backend/rag_solution/generation/providers/watsonx.py:96: in _get_model
    params = self._get_generation_params(user_id, model_parameters)
backend/rag_solution/generation/providers/watsonx.py:120: in _get_generation_params
    self.llm_parameters_service.create_or_update_parameters(user_id, model_parameters)
backend/rag_solution/services/llm_parameters_service.py:66: in create_or_update_parameters
    updated_params = self.repository.update(existing_params.id, parameters_input)
E   AttributeError: 'list' object has no attribute 'id'

During handling of the above exception, another exception occurred:
backend/tests/unit/test_watsonx.py:141: in test_batch_generation
    responses = provider.generate_text(
backend/rag_solution/generation/providers/watsonx.py:187: in generate_text
    raise LLMProviderError(
E   core.custom_exceptions.LLMProviderError: Failed to generate text: 'list' object has no attribute 'id'</failure></testcase><testcase classname="tests.vectordb.test_vector_store.TestVectorStore" name="test_create_collection" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/vectordb/test_vector_store.py, line 9&#10;      def test_create_collection(self, store):&#10;E       fixture 'store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/vectordb/test_vector_store.py:9&quot;">file /app/backend/tests/vectordb/test_vector_store.py, line 9
      def test_create_collection(self, store):
E       fixture 'store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/vectordb/test_vector_store.py:9</error></testcase><testcase classname="tests.vectordb.test_vector_store.TestVectorStore" name="test_add_documents" time="0.027"><error message="failed on setup with &quot;file /app/backend/tests/vectordb/test_vector_store.py, line 13&#10;      def test_add_documents(self, store):&#10;E       fixture 'store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/vectordb/test_vector_store.py:13&quot;">file /app/backend/tests/vectordb/test_vector_store.py, line 13
      def test_add_documents(self, store):
E       fixture 'store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/vectordb/test_vector_store.py:13</error></testcase><testcase classname="tests.vectordb.test_vector_store.TestVectorStore" name="test_retrieve_documents" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/vectordb/test_vector_store.py, line 21&#10;      def test_retrieve_documents(self, store):&#10;E       fixture 'store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/vectordb/test_vector_store.py:21&quot;">file /app/backend/tests/vectordb/test_vector_store.py, line 21
      def test_retrieve_documents(self, store):
E       fixture 'store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/vectordb/test_vector_store.py:21</error></testcase><testcase classname="tests.vectordb.test_vector_store.TestVectorStore" name="test_query_documents" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/vectordb/test_vector_store.py, line 26&#10;      def test_query_documents(self, store):&#10;E       fixture 'store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/vectordb/test_vector_store.py:26&quot;">file /app/backend/tests/vectordb/test_vector_store.py, line 26
      def test_query_documents(self, store):
E       fixture 'store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/vectordb/test_vector_store.py:26</error></testcase><testcase classname="tests.vectordb.test_vector_store.TestVectorStore" name="test_delete_collection" time="0.026"><error message="failed on setup with &quot;file /app/backend/tests/vectordb/test_vector_store.py, line 32&#10;      def test_delete_collection(self, store):&#10;E       fixture 'store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/vectordb/test_vector_store.py:32&quot;">file /app/backend/tests/vectordb/test_vector_store.py, line 32
      def test_delete_collection(self, store):
E       fixture 'store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/vectordb/test_vector_store.py:32</error></testcase><testcase classname="tests.vectordb.test_vector_store.TestVectorStore" name="test_delete_documents" time="0.025"><error message="failed on setup with &quot;file /app/backend/tests/vectordb/test_vector_store.py, line 38&#10;      def test_delete_documents(self, store):&#10;E       fixture 'store' not found&#10;&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/app/backend/tests/vectordb/test_vector_store.py:38&quot;">file /app/backend/tests/vectordb/test_vector_store.py, line 38
      def test_delete_documents(self, store):
E       fixture 'store' not found
&gt;       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, auth_headers, base_collection, base_file, base_llm_parameters, base_prompt_template, base_suggested_question, base_user, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capture_logs, class_mocker, clean_db, collection_service, configure_logging, cov, db_engine, db_session, doctest_namespace, ensure_watsonx_provider, event_loop, extra, extras, include_metadata_in_junit_xml, initialize_factory, llm_parameters_service, llm_provider, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, prompt_template_service, provider, provider_factory, pytestconfig, question_service, record_property, record_testsuite_property, record_xml_attribute, recwarn, session_mocker, test_client, test_documents, test_prompt_template_data, test_questions, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, user_service, worker_id
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/app/backend/tests/vectordb/test_vector_store.py:38</error></testcase><testcase classname="tests.vectordbs.test_vectordbs" name="test_vector_db_factory" time="0.033"><failure message="TypeError: Can't instantiate abstract class WeaviateDataStore without an implementation for abstract method 'delete_collection'">backend/tests/vectordbs/test_vectordbs.py:38: in test_vector_db_factory
    weaviate_store = get_datastore("weaviate")
backend/vectordbs/factory.py:12: in get_datastore
    return WeaviateDataStore()
E   TypeError: Can't instantiate abstract class WeaviateDataStore without an implementation for abstract method 'delete_collection'</failure></testcase><testcase classname="tests.vectordbs.test_vectordbs" name="test_chroma_vector_store" time="0.028"><error message="failed on setup with &quot;AttributeError: __enter__&quot;">backend/tests/vectordbs/test_vectordbs.py:22: in mock_vectordb_session
    mock_session.begin_nested.return_value.__enter__.return_value = mock_session
/usr/local/lib/python3.12/unittest/mock.py:662: in __getattr__
    raise AttributeError(name)
E   AttributeError: __enter__</error></testcase><testcase classname="tests.vectordbs.test_vectordbs" name="test_elasticsearch_vector_store" time="0.027"><error message="failed on setup with &quot;AttributeError: __enter__&quot;">backend/tests/vectordbs/test_vectordbs.py:22: in mock_vectordb_session
    mock_session.begin_nested.return_value.__enter__.return_value = mock_session
/usr/local/lib/python3.12/unittest/mock.py:662: in __getattr__
    raise AttributeError(name)
E   AttributeError: __enter__</error></testcase><testcase classname="tests.vectordbs.test_vectordbs" name="test_milvus_vector_store" time="0.026"><error message="failed on setup with &quot;AttributeError: __enter__&quot;">backend/tests/vectordbs/test_vectordbs.py:22: in mock_vectordb_session
    mock_session.begin_nested.return_value.__enter__.return_value = mock_session
/usr/local/lib/python3.12/unittest/mock.py:662: in __getattr__
    raise AttributeError(name)
E   AttributeError: __enter__</error></testcase><testcase classname="tests.vectordbs.test_vectordbs" name="test_pinecone_vector_store" time="0.027"><error message="failed on setup with &quot;AttributeError: __enter__&quot;">backend/tests/vectordbs/test_vectordbs.py:22: in mock_vectordb_session
    mock_session.begin_nested.return_value.__enter__.return_value = mock_session
/usr/local/lib/python3.12/unittest/mock.py:662: in __getattr__
    raise AttributeError(name)
E   AttributeError: __enter__</error></testcase><testcase classname="tests.vectordbs.test_vectordbs" name="test_weaviate_vector_store" time="0.041"><error message="failed on setup with &quot;AttributeError: __enter__&quot;">backend/tests/vectordbs/test_vectordbs.py:22: in mock_vectordb_session
    mock_session.begin_nested.return_value.__enter__.return_value = mock_session
/usr/local/lib/python3.12/unittest/mock.py:662: in __getattr__
    raise AttributeError(name)
E   AttributeError: __enter__</error></testcase></testsuite></testsuites>